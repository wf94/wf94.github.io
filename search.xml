<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[153 Find Minimum in Rotated Sorted Array]]></title>
      <url>http://wf94.github.io/2017/04/18/153-Find-Minimum-in-Rotated-Sorted-Array/</url>
      <content type="html"><![CDATA[<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e., <code>0 1 2 4 5 6 7</code> might become <code>4 5 6 7 0 1 2</code>).</p>
<p>Find the minimum element.</p>
<p>You may assume no duplicate exists in the array.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>可以利用传统的二分搜索法来解决这个问题。我们很容易知道，如果第一个数比最后一个数要大，说明它经过了某种方法的旋转。所以说，我们可以找到最大元素紧接着的那个元素，就是最小的元素了。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len = nums.size();</div><div class="line">        <span class="keyword">if</span> (nums[<span class="number">0</span>] &lt;= nums[len<span class="number">-1</span>])&#123;</div><div class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">int</span> low = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> high = len<span class="number">-1</span>;</div><div class="line">            <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">while</span>(low &lt; high)&#123;</div><div class="line">                <span class="keyword">if</span>(nums[mid] &gt; nums[high])&#123;</div><div class="line">                    low = mid + <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    high = mid;</div><div class="line">                &#125;</div><div class="line">                mid = (low + high) / <span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> nums[mid];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Array </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[137 Single Number II]]></title>
      <url>http://wf94.github.io/2017/04/17/137-Single-Number-II/</url>
      <content type="html"><![CDATA[<p>Given an array of integers, every element appears <em>three</em> times except for one, which appears exactly once. Find that single one. </p>
<p><strong>Note:</strong><br> Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? </p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们如果用最直白的方法，统计一下整型数组里面数字出现的次数即可。顺便熟悉了一下Java里面HashMap的操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        HashMap&lt;Integer, Integer&gt; stats = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (stats.containsKey(nums[i]))&#123;</div><div class="line">                <span class="keyword">int</span> tmp = stats.get(nums[i]) + <span class="number">1</span>;</div><div class="line">                stats.put(nums[i], tmp);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                stats.put(nums[i], <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; e : stats.entrySet())&#123;</div><div class="line">            <span class="keyword">if</span> (e.getValue() == <span class="number">1</span>) res = e.getKey();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参考资料：</p>
<p>利用HashMap是无法达到线性空间复杂度的，我们可以参考这种方法。</p>
<p><a href="https://discuss.leetcode.com/topic/22821/an-general-way-to-handle-all-this-sort-of-questions" target="_blank" rel="external">https://discuss.leetcode.com/topic/22821/an-general-way-to-handle-all-this-sort-of-questions</a></p>
<p>这个……就很厉害了，用状态机的方法来做这道题。我们要想办法构建三个状态，等第三个状态进行完之后，状态机的状态回归0。实际上巧妙是利用位运算的方法来解决这个问题。</p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[129 Sum Root to Leaf Numbers]]></title>
      <url>http://wf94.github.io/2017/04/16/129-Sum-Root-to-Leaf-Numbers/</url>
      <content type="html"><![CDATA[<p>Given a binary tree containing digits from <code>0-9</code> only, each root-to-leaf path could represent a number.</p>
<p>An example is the root-to-leaf path <code>1-&gt;2-&gt;3</code> which represents the number <code>123</code>.</p>
<p>Find the total sum of all root-to-leaf numbers.</p>
<p>For example, </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  1</div><div class="line"> / \</div><div class="line">2   3</div></pre></td></tr></table></figure>
<p>The root-to-leaf path <code>1-&gt;2</code> represents the number <code>12</code>.<br> The root-to-leaf path <code>1-&gt;3</code> represents the number <code>13</code>. </p>
<p>Return the sum = 12 + 13 = <code>25</code>. </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们利用深度优先遍历，可以分别得到所有可能出现的数字。然后将这些数字分别求和即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendnumber</span><span class="params">(TreeNode cur, <span class="keyword">int</span> number)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> cur_val = cur.val;</div><div class="line">        <span class="keyword">if</span>(cur.left != <span class="keyword">null</span>) appendnumber(cur.left, number*<span class="number">10</span> + cur_val);</div><div class="line">        <span class="keyword">if</span>(cur.right != <span class="keyword">null</span>) appendnumber(cur.right, number*<span class="number">10</span> + cur_val);</div><div class="line">        <span class="keyword">if</span> (cur.left == <span class="keyword">null</span> &amp;&amp; cur.right == <span class="keyword">null</span>) sum += number * <span class="number">10</span> + cur_val;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumNumbers</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) appendnumber(root, <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Tree </tag>
            
            <tag> DFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[116 Populating Next Right Pointers in Each Node]]></title>
      <url>http://wf94.github.io/2017/04/15/116-Populating-Next-Right-Pointers-in-Each-Node/</url>
      <content type="html"><![CDATA[<p>Given a binary tree </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">struct TreeLinkNode &#123;</div><div class="line">  TreeLinkNode *left;</div><div class="line">  TreeLinkNode *right;</div><div class="line">  TreeLinkNode *next;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>
<p>Initially, all next pointers are set to <code>NULL</code>.</p>
<p><strong>Note:</strong> </p>
<ul>
<li>You may only use constant extra space.</li>
<li>You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).</li>
</ul>
<p>For example,<br> Given the following perfect binary tree,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">     1</div><div class="line">   /  \</div><div class="line">  2    3</div><div class="line"> / \  / \</div><div class="line">4  5  6  7</div></pre></td></tr></table></figure>
<p>After calling your function, the tree should look like:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">     1 -&gt; NULL</div><div class="line">   /  \</div><div class="line">  2 -&gt; 3 -&gt; NULL</div><div class="line"> / \  / \</div><div class="line">4-&gt;5-&gt;6-&gt;7 -&gt; NULL</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这也是一道非常典型的利用层次遍历解决树的问题的题目。我们可以利用队列进行BFS的操作，从而求解。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for binary tree with next pointer.</div><div class="line"> * struct TreeLinkNode &#123;</div><div class="line"> *  int val;</div><div class="line"> *  TreeLinkNode *left, *right, *next;</div><div class="line"> *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">(TreeLinkNode *root)</span> </span>&#123;</div><div class="line">        <span class="built_in">queue</span>&lt;TreeLinkNode *&gt; layer;</div><div class="line">        <span class="keyword">if</span>(root != <span class="literal">NULL</span>)&#123;</div><div class="line">            layer.push(root);</div><div class="line">            layer.push(<span class="literal">NULL</span>);</div><div class="line">        &#125;</div><div class="line">        TreeLinkNode *prev = <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">while</span>(!layer.empty())&#123;</div><div class="line">            TreeLinkNode *cur = layer.front();</div><div class="line">            layer.pop();</div><div class="line">            <span class="keyword">if</span>(prev != <span class="literal">NULL</span>)&#123;</div><div class="line">                prev-&gt;next = cur;</div><div class="line">            &#125;</div><div class="line">            prev = cur;</div><div class="line">            <span class="keyword">if</span>(cur == <span class="literal">NULL</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(!layer.empty()) layer.push(<span class="literal">NULL</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(cur-&gt;left != <span class="literal">NULL</span>) layer.push(cur-&gt;left);</div><div class="line">                <span class="keyword">if</span>(cur-&gt;right != <span class="literal">NULL</span>) layer.push(cur-&gt;right);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Tree </tag>
            
            <tag> DFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[114 Flatten Binary Tree to Linked List]]></title>
      <url>http://wf94.github.io/2017/04/14/114-Flatten-Binary-Tree-to-Linked-List/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, flatten it to a linked list in-place. </p>
<p>For example,<br> Given </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    1</div><div class="line">   / \</div><div class="line">  2   5</div><div class="line"> / \   \</div><div class="line">3   4   6</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line"> \</div><div class="line">  2</div><div class="line">   \</div><div class="line">    3</div><div class="line">     \</div><div class="line">      4</div><div class="line">       \</div><div class="line">        5</div><div class="line">         \</div><div class="line">          6</div></pre></td></tr></table></figure>
<p>Hints:</p>
<p>If you notice carefully in the flattened tree, each node’s right child points to the next node of a pre-order traversal.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们根据题目的提示，知道了flattened tree的组织形式是基于先根序遍历的。那我们可以利用后根序遍历来构造这棵flattened tree。后序遍历节点，依次将遍历到的第n+1个节点指向第n个节点即可。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    TreeNode next = null;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postorder</span><span class="params">(TreeNode root)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(root != null)&#123;</div><div class="line">            postorder(root.right);</div><div class="line">            postorder(root.left);</div><div class="line">            <span class="keyword">if</span>(next != null)&#123;</div><div class="line">                root.right = next;</div><div class="line">                root.left = null;</div><div class="line">            &#125;</div><div class="line">            next = root;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatten</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        postorder(root);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Tree </tag>
            
            <tag> Depth-first Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[给Hexo博客添加Gitment评论系统]]></title>
      <url>http://wf94.github.io/2017/04/14/Use-Gitment-In-Hexo/</url>
      <content type="html"><![CDATA[<p>之前一直懒得给自己的博客搭建“多说”评论系统。但没想到的是，多说居然要在今年6月底停止服务了，着实令人诧异。偶然在知乎上看到一个基于github issue搭建的评论系统，名叫<a href="https://github.com/imsun/gitment" target="_blank" rel="external">gitment</a>。这位作者也是相当有想法，佩服佩服。技术类博客的受众终究还是广大<del>同性交友网站</del>代码分享网站的注册用户，利用gitment作为本网站的评论系统再好不过了。下面就简单介绍一下如何将Gitmemt嵌入到基于hexo的博客主题当中。</p>
<h4 id="创建OAuth-Key"><a href="#创建OAuth-Key" class="headerlink" title="创建OAuth Key"></a>创建OAuth Key</h4><p><a href="https://github.com/settings/applications/new" target="_blank" rel="external">这个链接</a> 可以来注册一个新的 OAuth Application——但当然，前提是要有一个github账号。表单中的其他内容可以随意填写，但要确保填入正确的 callback URL（一般是评论页面对应的域名，如 <code>https://imsun.net</code>）。提交好之后，github会生成一个 client ID 和一个 client secret，这个将被用于之后的用户登录。</p>
<h4 id="在Hexo主题中引入gitment"><a href="#在Hexo主题中引入gitment" class="headerlink" title="在Hexo主题中引入gitment"></a>在Hexo主题中引入gitment</h4><p>我使用的Hexo主题是<a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="external">Maupassant</a>，主题的页面是基于Node.js下的Jade编写。简而言之，Jade是一种空格敏感的静态页面描述语言，它可以与HTML语言进行一一对应。引入gitment的Jade语言代码示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#container</div><div class="line">link(rel=&apos;stylesheet&apos;, href=&apos;https://imsun.github.io/gitment/style/default.css&apos;)</div><div class="line">script(src=&apos;https://imsun.github.io/gitment/dist/gitment.browser.js&apos;)</div><div class="line">script.</div><div class="line">  var gitment = new Gitment(&#123;</div><div class="line">    owner: &apos;你的 GitHub ID&apos;,</div><div class="line">    repo: &apos;存储评论的 repo&apos;,</div><div class="line">    oauth: &#123;</div><div class="line">      client_id: &apos;你的 client ID&apos;,</div><div class="line">      client_secret: &apos;你的 client secret&apos;,</div><div class="line">    &#125;,</div><div class="line">  &#125;)</div><div class="line">  gitment.render(&apos;container&apos;)</div></pre></td></tr></table></figure>
<p>在Maupassant主题中，我们在这个文件中添加gitment：<code>$THEME_ROOT/layout/_partial/comments.jade</code> ，不同的主题会有不同的添加路径。我们可以根据自己的Hexo主题自定义进行gitment插件的添加。</p>
<h4 id="初始化评论"><a href="#初始化评论" class="headerlink" title="初始化评论"></a>初始化评论</h4><p>添加之后，我们在Hexo中生成并上传静态页面，可以看到在博客的下方已经有了gitment插件。我们登陆自己的github账号，可以看到一个蓝色的按钮，点击它就可以初始化该页面的评论框。</p>
<p>gitment现在还有一些小问题。譬如说，如果我们有100篇博客页面，我们就需要手动初始化100次博客页面的评论框，创建100个issue。作者在接下来会写一个自动初始化评论的插件，期待作者的更新。</p>
<h4 id="一些小问题"><a href="#一些小问题" class="headerlink" title="一些小问题"></a>一些小问题</h4><p>由于我现在用的是Windows 10操作系统，下意识地用Edge浏览器试了一下。遗憾的是，在Edge浏览器中，我们只能浏览评论，不能登录github账号发表评论或点赞……这应该也是待解决的问题之一吧。【Chrome浏览器亲测可用】</p>
<p>有人可能会注意到，我们添加的这一段gitment插件的代码将自己的github账号的OAth client ID和client secret暴露在外，这样是否安全呢？作者在文档中的解释是，github除了需要验证ID和secret，还要验证callback URL，所以只要callback URL不暴露在外，坏叔叔恶意给你的repo添加issue的情况就不会发生。</p>
<p>最后附上我修改过的Maupassant主题，供各位参考，戳这个→<a href="https://github.com/wf94/github-pages-comment" target="_blank" rel="external">主题页面</a></p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="external">作者的个人博客</a></p>
<p><a href="https://github.com/tufu9441/maupassant-hexo/blob/master/README.md" target="_blank" rel="external">Maupassant官方文档</a></p>
]]></content>
      
        <categories>
            
            <category> Tech </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[096 Unique Binary Search Trees]]></title>
      <url>http://wf94.github.io/2017/04/13/096-Unique-Binary-Search-Trees/</url>
      <content type="html"><![CDATA[<p>Given <em>n</em>, how many structurally unique <strong>BST’s</strong> (binary search trees) that store values 1…<em>n</em>?</p>
<p>For example,<br> Given <em>n</em> = 3, there are a total of 5 unique BST’s. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1         3     3      2      1</div><div class="line"> \       /     /      / \      \</div><div class="line">  3     2     1      1   3      2</div><div class="line"> /     /       \                 \</div><div class="line">2     1         2                 3</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>投机取巧了一下。这道题可以将问题转化成，知道一棵树的中序遍历，我们能够构造出几棵不同的树？最后的结果是一组Catalan Number（明安图-卡塔兰数）。这个规律其实一开始是由我们中国的一位老祖先发现的。卡塔兰数的一般项公式为 (1/n+1) * C(n,2n)，从而得到解。</p>
<p>当然也可以用动态规划/递归的方式解决。</p>
<p>譬如[1,2,3,4], 取 1 为根节点，右边的子树2，3，4是有序的，取1为根节点的结果是1 <em> numTrees(3) = 5, 取2为根节点的结果是 1 </em> numTrees(2) = 2, 取3为根节点的结果是2, 取4为根节点的结果是5，所以我们可以得到numTrees(4) = 14。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="comment">//Return a catalan number</span></div><div class="line">        <span class="keyword">double</span> res = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            <span class="keyword">double</span> tmp = (<span class="number">2.0</span> * n - i) / (n - i);</div><div class="line">            res *= tmp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">double</span> a = res / (n + <span class="number">1.0</span>);</div><div class="line">        <span class="keyword">return</span> round(a);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Dynamic Programming </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[090 Subsets II]]></title>
      <url>http://wf94.github.io/2017/04/12/090-Subsets-II/</url>
      <content type="html"><![CDATA[<p>Given a collection of integers that might contain duplicates, <strong>nums</strong>, return all possible subsets. </p>
<p><strong>Note:</strong> The solution set must not contain duplicate subsets. </p>
<p>For example,<br> If <strong>nums</strong> = <code>[1,2,2]</code>, a solution is: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [2],</div><div class="line">  [1],</div><div class="line">  [1,2,2],</div><div class="line">  [2,2],</div><div class="line">  [1,2],</div><div class="line">  []</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们之前做过Subsets这一题，我们利用回溯的方法可以取出一个数组所有的Subset。如果Subset里面有重复的元素怎么办呢？非常直接的一种方法就是利用set的数据结构，将结果去重即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subset</span><span class="params">(Set&lt;List&lt;Integer&gt;&gt; result, <span class="keyword">int</span> index, List&lt;Integer&gt; cur, <span class="keyword">int</span>[] nums, <span class="keyword">int</span> layer)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(layer == <span class="number">0</span>)&#123;</div><div class="line">            result.add(cur);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">int</span> i = index;</div><div class="line">            <span class="keyword">while</span>(i &lt; nums.length)&#123;</div><div class="line">                List&lt;Integer&gt; new_cur = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(cur);</div><div class="line">                new_cur.add(nums[i]);</div><div class="line">                <span class="keyword">int</span> new_layer = layer - <span class="number">1</span>;</div><div class="line">                subset(result, i + <span class="number">1</span>, new_cur, nums, new_layer);</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        Set&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> HashSet&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        Arrays.sort(nums);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= nums.length; i++)&#123;</div><div class="line">            List&lt;Integer&gt; cur = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">            subset(result, <span class="number">0</span>, cur, nums, i);</div><div class="line">        &#125;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; result_new = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;(result);</div><div class="line">        <span class="keyword">return</span> result_new;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然这个方法可用，但是效率不高。</p>
<p>还有这两种方法，效率和可读性都还不错：</p>
<p><a href="https://discuss.leetcode.com/topic/13543/accepted-10ms-c-solution-use-backtracking-only-10-lines-easy-understand" target="_blank" rel="external">https://discuss.leetcode.com/topic/13543/accepted-10ms-c-solution-use-backtracking-only-10-lines-easy-understand</a></p>
<p><a href="https://discuss.leetcode.com/topic/22638/very-simple-and-fast-java-solution" target="_blank" rel="external">https://discuss.leetcode.com/topic/22638/very-simple-and-fast-java-solution</a></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Array </tag>
            
            <tag> Backtracking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[089 Gray Code]]></title>
      <url>http://wf94.github.io/2017/04/11/089-Gray-Code/</url>
      <content type="html"><![CDATA[<p>The gray code is a binary numeral system where two successive values differ in only one bit.</p>
<p>Given a non-negative integer <em>n</em> representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.</p>
<p>For example, given <em>n</em> = 2, return <code>[0,1,3,2]</code>. Its gray code sequence is:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">00 - 0</div><div class="line">01 - 1</div><div class="line">11 - 3</div><div class="line">10 - 2</div></pre></td></tr></table></figure>
<p><strong>Note:</strong><br> For a given <em>n</em>, a gray code sequence is not uniquely defined. </p>
<p>For example, <code>[0,2,3,1]</code> is also a valid gray code sequence according to the above definition.</p>
<p>For now, the judge is able to judge based on one instance of gray code sequence. Sorry about that.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这个格雷码啊……必须要找到一个合适的组合满足题目要求才行。 </p>
<p>如果n=2, 必须是[0,1,3,2] ；如果n=3, 必须是[0,1,3,2,6,7,5,4]；究其原因，就是因为它的解法比较固sha定bi。</p>
<p>我找了半天规律，发现如果生成的格雷码序列不符合题意，就根本没有规律可言…… </p>
<p>在这道题中，格雷码分布的规律是[0,1]是对称的。</p>
<p>00 01 | 11 10 当中，第一位是镜像对称的， </p>
<p>000 001 011 010 | 110 111 101 100， 第一，第二位都是镜像对称的。 从而可以得到规律。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; grayCode(int n) &#123;</div><div class="line">        vector&lt;int&gt; result;</div><div class="line">        if (n &lt; 0) return result;</div><div class="line">        else &#123;</div><div class="line">            result.push_back(0);</div><div class="line">            int count = 0;</div><div class="line">            while(count &lt; n)&#123;</div><div class="line">                int curlen = result.size();</div><div class="line">                for (int i = curlen - 1; i &gt;= 0; i--)&#123;</div><div class="line">                    int tmp = result[i] + ( 1 &lt;&lt; count );</div><div class="line">                    result.push_back(tmp);</div><div class="line">                &#125;</div><div class="line">                count++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Backtracking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[080 Remove Duplicates from Sorted Array II]]></title>
      <url>http://wf94.github.io/2017/04/10/080-Remove-Duplicates-from-Sorted-Array-II/</url>
      <content type="html"><![CDATA[<p>Follow up for “Remove Duplicates”:<br> What if duplicates are allowed at most <em>twice</em>?</p>
<p>For example,<br> Given sorted array <em>nums</em> = <code>[1,1,1,2,2,3]</code>, </p>
<p>Your function should return length = <code>5</code>, with the first five elements of <em>nums</em> being <code>1</code>, <code>1</code>, <code>2</code>, <code>2</code> and <code>3</code>. It doesn’t matter what you leave beyond the new length. </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>数组遍历第一次，找出应当返回的数组长度。</p>
<p>数组遍历第二次，用两个指针，分别指向ref数组（没有改变的nums数组）和nums数组的当前值。</p>
<p>ref数组判断，超过两个相同的数，自动往下寻找不同的数。将ref数组的当前值赋给nums数组。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">        <span class="keyword">int</span>[] ref = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</div><div class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++)&#123;</div><div class="line">            ref[i] = nums[i];</div><div class="line">            <span class="keyword">if</span>(nums[i] == nums[i+<span class="number">1</span>])&#123;</div><div class="line">                count++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(count &gt; <span class="number">0</span>) length += <span class="number">2</span>;</div><div class="line">                <span class="keyword">else</span> length += <span class="number">1</span>;</div><div class="line">                count = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(count &gt; <span class="number">0</span>) length += <span class="number">2</span>;</div><div class="line">        <span class="keyword">else</span> length += <span class="number">1</span>;</div><div class="line">        ref[nums.length-<span class="number">1</span>] = nums[nums.length-<span class="number">1</span>];</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(length != nums.length)&#123;</div><div class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</div><div class="line">                <span class="keyword">if</span>(j &lt; nums.length -<span class="number">1</span>)&#123;</div><div class="line">                    <span class="keyword">if</span>(ref[j] != ref[j+<span class="number">1</span>])&#123;</div><div class="line">                        nums[i] = ref[j];</div><div class="line">                        j++;</div><div class="line">                        cnt = <span class="number">0</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span>&#123;</div><div class="line">                        cnt++;</div><div class="line">                        <span class="keyword">if</span>(cnt &gt; <span class="number">1</span>)&#123;</div><div class="line">                            <span class="keyword">while</span>(j &lt; nums.length -<span class="number">1</span> &amp;&amp; ref[j] == ref[j+<span class="number">1</span>]) j++;</div><div class="line">                            cnt = <span class="number">0</span>;</div><div class="line">                        &#125;</div><div class="line">                        nums[i] = ref[j];</div><div class="line">                        j++;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> nums[i] = nums[j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> length;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考资料：</p>
<p><a href="https://discuss.leetcode.com/topic/46519/short-and-simple-java-solution-easy-to-understand" target="_blank" rel="external">https://discuss.leetcode.com/topic/46519/short-and-simple-java-solution-easy-to-understand</a><br><a href="https://www.xiadong.info/2016/08/13/leetcode-80-remove-duplicates-from-sorted-array-ii/" target="_blank" rel="external">https://www.xiadong.info/2016/08/13/leetcode-80-remove-duplicates-from-sorted-array-ii/</a></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Array </tag>
            
            <tag> Two Pointers </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[078 Subsets]]></title>
      <url>http://wf94.github.io/2017/04/09/078-Subsets/</url>
      <content type="html"><![CDATA[<p>Given a set of <strong>distinct</strong> integers, <em>nums</em>, return all possible subsets. </p>
<p><strong>Note:</strong> The solution set must not contain duplicate subsets. </p>
<p>For example,<br> If <strong>nums</strong> = <code>[1,2,3]</code>, a solution is: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [3],</div><div class="line">  [1],</div><div class="line">  [2],</div><div class="line">  [1,2,3],</div><div class="line">  [1,3],</div><div class="line">  [2,3],</div><div class="line">  [1,2],</div><div class="line">  []</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>类似于排列组合的问题，我们都可以一律利用回溯的方法来解决。在回溯的函数里，我们递归地调用函数本身，layers代表回溯的层数；nums是输入的数组，append是当前层已有的数，result是将要返回的最终结果。当回溯层数为0时，我们可以将当前层已有的数加入到result中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">combination</span><span class="params">(<span class="keyword">int</span> layers, List&lt;Integer&gt; append, <span class="keyword">int</span>[] nums, List&lt;List&lt;Integer&gt;&gt; result)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (layers == <span class="number">0</span>)&#123;</div><div class="line">            result.add(append);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</div><div class="line">                List&lt;Integer&gt; new_append = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(append);</div><div class="line">                new_append.add(nums[i]);</div><div class="line">                <span class="keyword">int</span> len = nums.length - i - <span class="number">1</span>;</div><div class="line">                <span class="keyword">int</span>[] new_nums = <span class="keyword">new</span> <span class="keyword">int</span>[len];</div><div class="line">                <span class="keyword">int</span> k = i+<span class="number">1</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++)&#123;</div><div class="line">                    new_nums[j] = nums[k];</div><div class="line">                    k++;</div><div class="line">                &#125;</div><div class="line">                combination(layers-<span class="number">1</span>, new_append, new_nums, result);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        List&lt;Integer&gt; append = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= nums.length; i++)&#123;</div><div class="line">            combination(i, append, nums, result);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是利用位运算的方法解决这道题，非常巧妙。</p>
<p>Using Bit Manipulation</p>
<p>This is the most clever solution that I have seen. The idea is that to give all the possible subsets, we just need to exhaust all the possible combinations of the numbers. And each number has only two possibilities: either in or not in a subset. And this can be represented using a bit.</p>
<p>There is also another a way to visualize this idea. That is, if we use the above example, 1 appears once in every two consecutive subsets, 2 appears twice in every four consecutive subsets, and 3 appears four times in every eight subsets, shown in the following (initially the 8 subsets are all empty):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[], [], [], [], [], [], [], []</div><div class="line">[], [1], [], [1], [], [1], [], [1]</div><div class="line">[], [1], [2], [1, 2], [], [1], [2], [1, 2]</div><div class="line">[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]</div></pre></td></tr></table></figure>
<p>The code is as follows.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; subsets(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        sort(nums.begin(), nums.end());</div><div class="line">        <span class="keyword">int</span> num_subset = <span class="built_in">pow</span>(<span class="number">2</span>, nums.size()); </div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res(num_subset, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num_subset; j++)</div><div class="line">                <span class="keyword">if</span> ((j &gt;&gt; i) &amp; <span class="number">1</span>)</div><div class="line">                    res[j].push_back(nums[i]);</div><div class="line">        <span class="keyword">return</span> res;  </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Array </tag>
            
            <tag> Backtracking </tag>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[077 Combinations]]></title>
      <url>http://wf94.github.io/2017/04/08/077-Combinations/</url>
      <content type="html"><![CDATA[<p>Given two integers <em>n</em> and <em>k</em>, return all possible combinations of <em>k</em> numbers out of 1 … <em>n</em>. </p>
<p>For example,<br> If <em>n</em> = 4 and <em>k</em> = 2, a solution is: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [2,4],</div><div class="line">  [3,4],</div><div class="line">  [2,3],</div><div class="line">  [1,2],</div><div class="line">  [1,3],</div><div class="line">  [1,4],</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用回溯的方法来计算组合数。</p>
<p>我们知道组合数的k，我们就可以知道回溯的时候要走几层。知道组合数的n，我们可以知道组合数的总数目。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">combination</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cur, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; result)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>)&#123;</div><div class="line">            result.push_back(cur);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= n; i++)&#123;</div><div class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp = cur;</div><div class="line">                tmp.push_back(i);</div><div class="line">                combination(i+<span class="number">1</span>, n, k<span class="number">-1</span>, tmp, result);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cur;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</div><div class="line">        combination(<span class="number">1</span>, n, k, cur, result);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Backtracking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[075 Sort Colors]]></title>
      <url>http://wf94.github.io/2017/04/07/075-Sort-Colors/</url>
      <content type="html"><![CDATA[<p>Given an array with <em>n</em> objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue. </p>
<p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively. </p>
<p><strong>Note:</strong><br> You are not suppose to use the library’s sort function for this problem. </p>
<p><strong>Follow up:</strong><br> A rather straight forward solution is a two-pass algorithm using counting sort.<br> First, iterate the array counting number of 0’s, 1’s, and 2’s, then overwrite array with total number of 0’s, then 1’s and followed by 2’s.</p>
<p>Could you come up with an one-pass algorithm using only constant space?</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>最直白的方法就是利用一趟快速排序的方法，把0，1，2三个数分开。利用到了头尾两个指针。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> head = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(nums[head] == <span class="number">0</span>) head++;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head; i &lt; nums.size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(nums[i] == <span class="number">0</span>)&#123;</div><div class="line">                tmp = nums[head];</div><div class="line">                nums[head] = nums[i];</div><div class="line">                nums[i] = tmp;</div><div class="line">                <span class="keyword">while</span>(nums[head] == <span class="number">0</span>) head++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> tail = nums.size() - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(nums[tail] == <span class="number">2</span>) tail--;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head; i &lt;= tail; i++)&#123;</div><div class="line">            <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(nums[i] == <span class="number">2</span>)&#123;</div><div class="line">                tmp = nums[tail];</div><div class="line">                nums[tail] = nums[i];</div><div class="line">                nums[i] = tmp;</div><div class="line">                <span class="keyword">while</span>(nums[tail] == <span class="number">2</span>) tail--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如果不考虑空间的开销，在题目的提示当中使用的counting sort的方法也是非常好的。数一下0、1、2的个数，然后更新一下原来的数组就可以了。</p>
<p>下面这个方法就厉害了，利用一趟排序、O(1)的空间复杂度就可以完成。<code>We keep a loop invariant that [0,i) [i, j) [j, k) are 0s, 1s and 2s sorted in place for [0,k).</code></p>
<p><a href="https://discuss.leetcode.com/topic/26181/ac-python-in-place-one-pass-solution-o-n-time-o-1-space-no-swap-no-count" target="_blank" rel="external">https://discuss.leetcode.com/topic/26181/ac-python-in-place-one-pass-solution-o-n-time-o-1-space-no-swap-no-count</a></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Array </tag>
            
            <tag> Two Pointers </tag>
            
            <tag> Sort </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[074 Search a 2D Matrix]]></title>
      <url>http://wf94.github.io/2017/04/06/074-Search-a-2D-Matrix/</url>
      <content type="html"><![CDATA[<p>Write an efficient algorithm that searches for a value in an <em>m</em> x <em>n</em> matrix. This matrix has the following properties:</p>
<ul>
<li>Integers in each row are sorted from left to right.</li>
<li>The first integer of each row is greater than the last integer of the previous row.</li>
</ul>
<p>For example,</p>
<p>Consider the following matrix: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [1,   3,  5,  7],</div><div class="line">  [10, 11, 16, 20],</div><div class="line">  [23, 30, 34, 50]</div><div class="line">]</div></pre></td></tr></table></figure>
<p>Given <strong>target</strong> = <code>3</code>, return <code>true</code>.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>可以利用二分法进行查找。由于矩阵是按行按列顺序组织的，先寻找最后一列的数，哪一个大于并最接近目标数(target)。这个数对应的那一行就是目标数所在的那一行。再在这一行利用二分法寻找即可。总共用两次二分法，时间复杂度是O(log(m+n))。</p>
<p>二分法搜索成功的关键就是要在纸上理清楚思路才行。注意22行、39行low=mid+1的处理方法，不然会让结果陷入死循环。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(matrix.length &gt; <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(matrix[<span class="number">0</span>].length &gt; <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">int</span> start = matrix[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">                <span class="keyword">int</span> end = matrix[matrix.length - <span class="number">1</span>][matrix[<span class="number">0</span>].length - <span class="number">1</span>];</div><div class="line">                <span class="keyword">if</span>(target &lt; start || target &gt; end) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">int</span> low = <span class="number">0</span>;</div><div class="line">                    <span class="keyword">int</span> high = matrix.length - <span class="number">1</span>;</div><div class="line">                    <span class="keyword">int</span> mid = <span class="number">0</span>;</div><div class="line">                    <span class="comment">//Binary Search for the last column of whole matrix.</span></div><div class="line">                    <span class="keyword">while</span>(low &lt; high)&#123;</div><div class="line">                        mid = (low + high) / <span class="number">2</span>;</div><div class="line">                        <span class="keyword">if</span>(matrix[mid][matrix[<span class="number">0</span>].length-<span class="number">1</span>] &gt; target)&#123;</div><div class="line">                            high = mid;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(matrix[mid][matrix[<span class="number">0</span>].length-<span class="number">1</span>] == target)&#123;</div><div class="line">                            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">else</span>&#123;</div><div class="line">                            low = mid + <span class="number">1</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">//The target line has found.</span></div><div class="line">                    <span class="keyword">int</span> line = low;</div><div class="line">                    low = <span class="number">0</span>;</div><div class="line">                    high = matrix[<span class="number">0</span>].length - <span class="number">1</span>;</div><div class="line">                    <span class="comment">//Binary Search in the target line.</span></div><div class="line">                    <span class="keyword">while</span>(low &lt; high)&#123;</div><div class="line">                        mid = (low + high) / <span class="number">2</span>;</div><div class="line">                        <span class="keyword">if</span>(matrix[line][mid] &gt; target)&#123;</div><div class="line">                            high = mid;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(matrix[line][mid] == target)&#123;</div><div class="line">                            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">else</span>&#123;</div><div class="line">                            low = mid + <span class="number">1</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(matrix[line][low] == target) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Array </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[073 Set Matrix Zeroes]]></title>
      <url>http://wf94.github.io/2017/04/05/073-Set-Matrix-Zeroes/</url>
      <content type="html"><![CDATA[<p>Given a <em>m</em> x <em>n</em> matrix, if an element is 0, set its entire row and column to 0. Do it in place. </p>
<p>Follow up:</p>
<p>Did you use extra space?</p>
<p> A straight forward solution using O(<em>m**n</em>) space is probably a bad idea.</p>
<p> A simple improvement uses O(<em>m</em> + <em>n</em>) space, but still not the best solution.</p>
<p> Could you devise a constant space solution? </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>想法比较简单，把0所在的坐标记录下来，再把所有对应的行和列置为零即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZeroes</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; lines = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        List&lt;Integer&gt; cols = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix.length; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; matrix[i].length; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(matrix[i][j] == <span class="number">0</span>)&#123;</div><div class="line">                    lines.add(i);</div><div class="line">                    cols.add(j);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lines.size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> cur = lines.get(i);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; matrix[cur].length; j++)&#123;</div><div class="line">                matrix[cur][j] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cols.size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> cur = cols.get(i);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; matrix.length; j++)&#123;</div><div class="line">                matrix[j][cur] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[064 Minimum Path Sum]]></title>
      <url>http://wf94.github.io/2017/04/04/064-Minimum-Path-Sum/</url>
      <content type="html"><![CDATA[<p>Given a <em>m</em> x <em>n</em> grid filled with non-negative numbers, find a path from top left to bottom right which <em>minimizes</em> the sum of all numbers along its path.</p>
<p><strong>Note:</strong> You can only move either down or right at any point in time.</p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>很简单的动态规划问题，用一个和grid数组一样大的数组，来存储前一次的状态。 当前元素的左侧元素和上方元素的最小路径和，再加上当前元素的值，就是当前元素的最短路径值了。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> row = grid.size();</div><div class="line">        <span class="keyword">int</span> col = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(row &gt; <span class="number">0</span>) col = grid[<span class="number">0</span>].size();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(row);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)&#123;</div><div class="line">            dp[i].resize(col);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) dp[i][j] = grid[i][j];</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</div><div class="line">                        dp[i][j] = grid[i][j] + dp[i][j<span class="number">-1</span>];</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">0</span>)&#123;</div><div class="line">                        dp[i][j] = grid[i][j] + dp[i<span class="number">-1</span>][j];</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span>&#123;</div><div class="line">                        dp[i][j] = min(dp[i<span class="number">-1</span>][j] + grid[i][j], dp[i][j<span class="number">-1</span>] + grid[i][j]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[row<span class="number">-1</span>][col<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
            <tag> Dynamic Programming </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[062 Unique Paths]]></title>
      <url>http://wf94.github.io/2017/04/03/062-Unique-Paths/</url>
      <content type="html"><![CDATA[<p>A robot is located at the top-left corner of a <em>m</em> x <em>n</em> grid (marked ‘Start’ in the diagram below).</p>
<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).</p>
<p>How many possible unique paths are there?</p>
<p><img src="https://leetcode.com/static/images/problemset/robot_maze.png" alt="img"></p>
<p>Above is a 3 x 7 grid. How many possible unique paths are there? </p>
<p><strong>Note:</strong> <em>m</em> and <em>n</em> will be at most 100.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这是一道比较直白的找规律题。只有一行的情况无需多言，我们来看看示例中三行的情况，有多少个Unique Path。</p>
<p>由图可知，我们要想到达终点，需要至少往纵向的方向走两步，横向的方向走六步。我们只关心纵向的走法。因为一旦纵向的走法确定了，横向的走法也是唯一的了。</p>
<p>我们从起点向下走，走一格的纵向走法有六种。而这六种走法中，分别对应了不同的第二格的走法。它们的走法数目分别是6、5、4、3、2、1。据此我们可以得到第16行while语句中间循环的内容。行数的增加，只是增加循环的深度而已。将所有可能性求和，我们就可以得到最终的结果。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> line = min(m, n);</div><div class="line">        <span class="keyword">int</span> col = max(m, n);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(line &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(line == <span class="number">1</span>) <span class="keyword">return</span> line;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; col; i++)&#123;</div><div class="line">                result.push_back(<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp(col);</div><div class="line">            <span class="keyword">int</span> i = <span class="number">2</span>;</div><div class="line">            <span class="keyword">while</span>(i &lt; line)&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; col; i++)&#123;</div><div class="line">                    tmp[i] = <span class="number">0</span>;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++)&#123;</div><div class="line">                        tmp[i] += result[j];</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                i++;</div><div class="line">                result = tmp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; col; i++)&#123;</div><div class="line">            ans += result[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
            <tag> Dynamic Programming </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[059 Spiral Matrix II]]></title>
      <url>http://wf94.github.io/2017/04/02/059-Spiral-Matrix-II/</url>
      <content type="html"><![CDATA[<p>Given an integer <em>n</em>, generate a square matrix filled with elements from 1 to <em>n</em>2 in spiral order.</p>
<p>For example,<br> Given <em>n</em> = <code>3</code>, </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line"> [ 1, 2, 3 ],</div><div class="line"> [ 8, 9, 4 ],</div><div class="line"> [ 7, 6, 5 ]</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题其实没有什么算法上的技术含量。题目需要我们按照蛇形的路线生成一个数组，我们其实可以按照题目的要求，碰到不合适的路径不走即可。比较考验编程能力的就是在边界条件和实现的过程中的技巧。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] generateMatrix(<span class="keyword">int</span> n) &#123;</div><div class="line">        <span class="comment">// A very good way to assign dynamic-length array</span></div><div class="line">        <span class="keyword">int</span>[][] ans = <span class="keyword">new</span> <span class="keyword">int</span>[n][];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            ans[i] = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</div><div class="line">                ans[i][j] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> y = <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> right = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">boolean</span> down = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">boolean</span> up = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">boolean</span> left = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> count = <span class="number">1</span>; count &lt;= n * n; count++)&#123;</div><div class="line">            ans[x][y] = count;</div><div class="line"></div><div class="line">            <span class="keyword">boolean</span> rightblock = y + <span class="number">1</span> &gt;= n || ans[x][y+<span class="number">1</span>] &gt; <span class="number">0</span>;</div><div class="line">            <span class="keyword">boolean</span> leftblock = y - <span class="number">1</span> &lt; <span class="number">0</span> || ans[x][y-<span class="number">1</span>] &gt; <span class="number">0</span>;</div><div class="line">            <span class="keyword">boolean</span> upblock = x - <span class="number">1</span> &lt; <span class="number">0</span> || ans[x-<span class="number">1</span>][y] &gt; <span class="number">0</span>;</div><div class="line">            <span class="keyword">boolean</span> downblock = x + <span class="number">1</span> &gt;= n || ans[x+<span class="number">1</span>][y] &gt; <span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(rightblock &amp;&amp; leftblock &amp;&amp; upblock)&#123;</div><div class="line">                right = up = left = <span class="keyword">false</span>;</div><div class="line">                down = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(rightblock &amp;&amp; leftblock &amp;&amp; downblock)&#123;</div><div class="line">                right = down = left = <span class="keyword">false</span>;</div><div class="line">                up = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(rightblock &amp;&amp; downblock &amp;&amp; upblock)&#123;</div><div class="line">                right = down = up = <span class="keyword">false</span>;</div><div class="line">                left = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(leftblock &amp;&amp; downblock &amp;&amp; upblock)&#123;</div><div class="line">                left = down = up = <span class="keyword">false</span>;</div><div class="line">                right = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(left)&#123;</div><div class="line">                y--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(right)&#123;</div><div class="line">                y++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(down)&#123;</div><div class="line">                x++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(up)&#123;</div><div class="line">                x--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[048 Rotate Image]]></title>
      <url>http://wf94.github.io/2017/04/01/048-Rotate-Image/</url>
      <content type="html"><![CDATA[<p>You are given an <em>n</em> x <em>n</em> 2D matrix representing an image.</p>
<p>Rotate the image by 90 degrees (clockwise).</p>
<p>Follow up:<br> Could you do this in-place?</p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>如果新开一个n*n的数组来存旋转后的结果，需要的空间就很多了。</p>
<p>因此题目要求我们in-place来进行操作。思路实际上很简单，依次交换左上角，右上角，右下角，左下角的像素点就可以实现旋转了。这道题目CC150这本书的第一章就出现了，也可以以此为参考。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = matrix.size();</div><div class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end = n - <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = n; j &gt; <span class="number">1</span>; j = j<span class="number">-2</span>)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; end - start; i++)&#123;</div><div class="line">                <span class="comment">//Upper-Right to TMP</span></div><div class="line">                <span class="keyword">int</span> tmp = matrix[start+i][end];</div><div class="line">                <span class="comment">//Upper-Left to Upper-Right</span></div><div class="line">                matrix[start+i][end] = matrix[start][start+i];</div><div class="line">                <span class="comment">//Down-Left to Upper-Left</span></div><div class="line">                matrix[start][start+i] = matrix[end-i][start];</div><div class="line">                <span class="comment">//Down-Right to Down-Left</span></div><div class="line">                matrix[end-i][start] = matrix[end][end-i];</div><div class="line">                <span class="comment">//TMP to Down-Left</span></div><div class="line">                matrix[end][end-i] = tmp;</div><div class="line">            &#125;</div><div class="line">            start++;</div><div class="line">            end--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[046 Permutations]]></title>
      <url>http://wf94.github.io/2017/03/31/046-Permutations/</url>
      <content type="html"><![CDATA[<p>Given a collection of <strong>distinct</strong> numbers, return all possible permutations. </p>
<a id="more"></a>
<p>For example,<br><code>[1,2,3]</code> have the following permutations:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [1,2,3],</div><div class="line">  [1,3,2],</div><div class="line">  [2,1,3],</div><div class="line">  [2,3,1],</div><div class="line">  [3,1,2],</div><div class="line">  [3,2,1]</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们可以利用递归的方法求解。</p>
<p>在helper函数里面，我们可以利用nums当作参数，每次取出一个数，nums里面的对应元素就删除，length也减去1。当length为0的时候，我们就可以把其中的一个结果给放在结果序列当中了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> copy</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permute</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: List[List[int]]</div><div class="line">        """</div><div class="line">        length = len(nums)</div><div class="line">        self.ans = []</div><div class="line">        self.helper(nums, length, [])</div><div class="line">        <span class="keyword">return</span> self.ans</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, nums, length, res)</span>:</span></div><div class="line">        <span class="keyword">if</span> (length):</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> nums:</div><div class="line">                restmp = copy.copy(res)</div><div class="line">                restmp.append(i)</div><div class="line">                numtmp = copy.copy(nums)</div><div class="line">                numtmp.remove(i)</div><div class="line">                self.helper(numtmp, length - <span class="number">1</span>, restmp)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.ans.append(res)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Backtracking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[011 Container With Most Water]]></title>
      <url>http://wf94.github.io/2017/03/30/011-Container-With-Most-Water/</url>
      <content type="html"><![CDATA[<p>Given <em>n</em> non-negative integers <em>a1</em>, <em>a2</em>, …, <em>an</em>, where each represents a point at coordinate (<em>i</em>, <em>ai</em>). <em>n</em> vertical lines are drawn such that the two endpoints of line <em>i</em> is at (<em>i</em>, <em>ai</em>) and (<em>i</em>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water. </p>
<p>Note: You may not slant the container and <em>n</em> is at least 2. </p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>由题意我们知道，可以装水的容量由短板决定。所以，我们计算当前装水的容量的公式是(index之差) × (短板长度)。</p>
<p>我们可以利用双指针的思想。设定一个头指针，一个尾指针。如果其中一个指针指向的板子小于另个板子，我们就挪到下一个位置。头指针移动方向是尾部，尾指针移动方向是头部。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> high = height.length - <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> volume = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(low &lt; high)&#123;</div><div class="line">            <span class="keyword">int</span> tmpvolume = (high - low) * ( Math.min(height[high], height[low]) );</div><div class="line">            <span class="keyword">if</span>(height[high] &lt; height[low]) high--;</div><div class="line">            <span class="keyword">else</span> low++;</div><div class="line">            <span class="keyword">if</span>(tmpvolume &gt; volume) volume = tmpvolume;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> volume;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Array </tag>
            
            <tag> Two Pointers </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[002 Add Two Numbers]]></title>
      <url>http://wf94.github.io/2017/03/29/002-Add-Two-Numbers/</url>
      <content type="html"><![CDATA[<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>
<p><strong>Input:</strong> (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br><strong>Output:</strong> 7 -&gt; 0 -&gt; 8</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题不需要非常复杂的思考，但是需要判断多个边界条件。尤其是加到最后，只剩一个链表可以操作，应该如何处理。可以看看后面参考资料给出的代码，简洁明了，不知道比我高到哪儿去了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</div><div class="line">        ListNode root = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        ListNode cur = root;</div><div class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</div><div class="line">        ListNode remain = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">            <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">          	<span class="comment">//需要注意前一个数的进位</span></div><div class="line">            <span class="keyword">if</span>(remain == <span class="keyword">null</span>) tmp = l1.val + l2.val + carry;</div><div class="line">            <span class="keyword">else</span> tmp = remain.val + carry;</div><div class="line">            <span class="keyword">if</span>(tmp &gt;= <span class="number">10</span>)&#123;</div><div class="line">                tmp -= <span class="number">10</span>;</div><div class="line">                carry = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> carry = <span class="number">0</span>;</div><div class="line">            cur.val = tmp;</div><div class="line">            ListNode next_node = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">          	<span class="comment">//如果被加数和加数都存在，直接将两个链表的数相加</span></div><div class="line">            <span class="keyword">if</span>(remain == <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(l1.next != <span class="keyword">null</span> &amp;&amp; l2.next != <span class="keyword">null</span>)&#123;</div><div class="line">                    l1 = l1.next;</div><div class="line">                    l2 = l2.next;</div><div class="line">                    cur.next = next_node;</div><div class="line">                    cur = cur.next;</div><div class="line">                &#125;</div><div class="line">              	<span class="comment">//走到了某一个链表的尾部</span></div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">if</span>(l1.next == <span class="keyword">null</span> &amp;&amp; l2.next == <span class="keyword">null</span>) <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(l1.next == <span class="keyword">null</span> &amp;&amp; l2.next != <span class="keyword">null</span>) &#123;</div><div class="line">                        remain = l2.next;</div><div class="line">                        cur.next = next_node;</div><div class="line">                        cur = cur.next;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(l1.next != <span class="keyword">null</span> &amp;&amp; l2.next == <span class="keyword">null</span>) &#123;</div><div class="line">                        remain = l1.next;</div><div class="line">                        cur.next = next_node;</div><div class="line">                        cur = cur.next;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//把链表的剩下部分加上</span></div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(remain.next != <span class="keyword">null</span>) &#123;</div><div class="line">                    remain = remain.next;</div><div class="line">                    cur.next = next_node;</div><div class="line">                    cur = cur.next;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//加到最后仍然有进位，把这个数给加上</span></div><div class="line">        <span class="keyword">if</span>(carry == <span class="number">1</span>)&#123;</div><div class="line">            ListNode next_node = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</div><div class="line">            cur.next = next_node;</div><div class="line">            cur = cur.next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考资料：<a href="https://discuss.leetcode.com/topic/39130/4ms-11lines-java-solution" target="_blank" rel="external">https://discuss.leetcode.com/topic/39130/4ms-11lines-java-solution</a></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Math </tag>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[526 Beautiful Arrangement]]></title>
      <url>http://wf94.github.io/2017/03/28/526-Beautiful-Arrangement/</url>
      <content type="html"><![CDATA[<p>Suppose you have <strong>N</strong> integers from 1 to N. We define a beautiful arrangement as an array that is constructed by these <strong>N</strong> numbers successfully if one of the following is true for the ith position (1 ≤ i ≤ N) in this array: </p>
<ol>
<li>The number at the ith position is divisible by <strong>i</strong>.</li>
<li><strong>i</strong> is divisible by the number at the ith position.</li>
</ol>
<p>Now given N, how many beautiful arrangements can you construct? </p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Input: 2</div><div class="line">Output: 2</div><div class="line">Explanation: </div><div class="line"></div><div class="line">The first beautiful arrangement is [1, 2]:</div><div class="line">Number at the 1st position (i=1) is 1, and 1 is divisible by i (i=1).</div><div class="line">Number at the 2nd position (i=2) is 2, and 2 is divisible by i (i=2).</div><div class="line"></div><div class="line">The second beautiful arrangement is [2, 1]:</div><div class="line">Number at the 1st position (i=1) is 2, and 2 is divisible by i (i=1).</div><div class="line">Number at the 2nd position (i=2) is 1, and i (i=2) is divisible by 1.</div></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li><strong>N</strong> is a positive integer and will not exceed 15.</li>
</ol>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>在这一题中，我们利用回溯算法来解决问题。</p>
<p>回溯算法和穷举的方法有点类似，利用递归的方式，指定限制条件从而可以在问题集当中递归地访问，从而得出问题的可行解。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countArrangement</span><span class="params">(self, N)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type N: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        search = []</div><div class="line">        visited = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,N+<span class="number">1</span>):</div><div class="line">            tmp1 = []</div><div class="line">            tmp2 = []</div><div class="line">            a = i</div><div class="line">            b = N</div><div class="line">            <span class="keyword">while</span>(b):</div><div class="line">                <span class="keyword">if</span> (b % a == <span class="number">0</span>):</div><div class="line">                    tmp1.append(b)</div><div class="line">                    tmp2.append(<span class="keyword">False</span>)</div><div class="line">                b -= <span class="number">1</span></div><div class="line">            b = N</div><div class="line">            <span class="keyword">while</span>(b):</div><div class="line">                <span class="keyword">if</span> (a % b == <span class="number">0</span>):</div><div class="line">                    <span class="keyword">if</span> (a != b):</div><div class="line">                        tmp1.append(b)</div><div class="line">                        tmp2.append(<span class="keyword">False</span>)</div><div class="line">                b -= <span class="number">1</span></div><div class="line">            search.append(tmp1)</div><div class="line">            visited.append(tmp2)</div><div class="line">           </div><div class="line">        x = y = <span class="number">0</span></div><div class="line">        ans = <span class="number">0</span></div><div class="line">        res = <span class="number">0</span> </div><div class="line">        <span class="keyword">for</span> y, enum <span class="keyword">in</span> enumerate(search[<span class="number">0</span>]):</div><div class="line">            ans = <span class="number">0</span></div><div class="line">            result = []</div><div class="line">            res += self.backtracking(result, search, x, y, ans)</div><div class="line">            </div><div class="line">        <span class="keyword">return</span> res</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span><span class="params">(self, result, search, x, y, ans)</span>:</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> result:</div><div class="line">            <span class="keyword">if</span> (search[x][y] == i):</div><div class="line">                <span class="keyword">return</span> ans</div><div class="line">                </div><div class="line">        result.append(search[x][y])</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (x  &lt; len(search) - <span class="number">1</span>):</div><div class="line">            <span class="keyword">for</span> i, enum <span class="keyword">in</span> enumerate(search[x+<span class="number">1</span>]):</div><div class="line">                ans = self.backtracking(result, search, x+<span class="number">1</span>, i, ans)</div><div class="line">            result.pop()</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> ans</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            result.pop()</div><div class="line">            ans += <span class="number">1</span></div><div class="line">            <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
<p>参考资料：<a href="http://www.cnblogs.com/wuyuegb2312/p/3273337.html" target="_blank" rel="external">http://www.cnblogs.com/wuyuegb2312/p/3273337.html</a></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Backtracking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[524 Longest Word in Dictionary through Deleting]]></title>
      <url>http://wf94.github.io/2017/03/27/524-Longest-Word-in-Dictionary-through-Deleting/</url>
      <content type="html"><![CDATA[<p>Given a string and a string dictionary, find the longest string in the dictionary that can be formed by deleting some characters of the given string. If there are more than one possible results, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string. </p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">s = &quot;abpcplea&quot;, d = [&quot;ale&quot;,&quot;apple&quot;,&quot;monkey&quot;,&quot;plea&quot;]</div><div class="line"></div><div class="line">Output: </div><div class="line">&quot;apple&quot;</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">s = &quot;abpcplea&quot;, d = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</div><div class="line"></div><div class="line">Output: </div><div class="line">&quot;a&quot;</div></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li>All the strings in the input will only contain lower-case letters.</li>
<li>The size of the dictionary won’t exceed 1,000.</li>
<li>The length of all the strings in the input won’t exceed 1,000.</li>
</ol>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>错了很多次，都是因为边界条件的锅。</p>
<p>首先需要判断字符串的长度是否为0，如果为0就需要返回一个空的字符串——没有找到符合要求的字符串也需要返回空。</p>
<p>接下来，就是利用双指针来进行操作了。</p>
<p>一开始是想，如果指针指到了d[i]字符串的最后一个元素，就可以判定这个字符串满足要求。可是，如果指到最后一个元素，s中却找不到元素和d[i]字符串最后一个元素相等，是不满足题目要求的。因此，我在代码当中加入了一个Flag布尔变量，来判断访问到最后一个元素，且相等的情况。</p>
<p>在把所有的最大长度的单词放进ArrayList里面之后，我们需要对ArrayList里面的元素进行排序。在这里，可以直接使用ArrayList里面的内建函数，sort(String::compareTo)来进行排序。也可以直接通过比较String长度的最值，维护一个最长的String，这样可以降低时间复杂度。代码中仍然演示了ArrayList的排序方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findLongestWord</span><span class="params">(String s, List&lt;String&gt; d)</span> </span>&#123;</div><div class="line">        ArrayList&lt;String&gt; candidate = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        <span class="keyword">int</span> length = s.length();</div><div class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (String cur : d) &#123;</div><div class="line">            <span class="keyword">int</span> curlen = cur.length();</div><div class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">while</span> (j &lt; length) &#123;</div><div class="line">                <span class="keyword">char</span> a = cur.charAt(i);</div><div class="line">                <span class="keyword">char</span> b = s.charAt(j);</div><div class="line">                <span class="keyword">if</span> (cur.charAt(i) == s.charAt(j)) &#123;</div><div class="line">                    <span class="keyword">if</span> (i &lt; curlen - <span class="number">1</span>)&#123;</div><div class="line">                        i++;</div><div class="line">                        j++;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (i == curlen - <span class="number">1</span>)&#123;</div><div class="line">                        flag = <span class="keyword">true</span>;</div><div class="line">                        j++;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    j++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (flag) &#123;</div><div class="line">                <span class="keyword">if</span> (curlen &gt; max) &#123;</div><div class="line">                    candidate.clear();</div><div class="line">                    candidate.add(cur);</div><div class="line">                    max = curlen;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (curlen == max) &#123;</div><div class="line">                    candidate.add(cur);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (candidate.isEmpty()) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            candidate.sort(String::compareTo);</div><div class="line">            <span class="keyword">return</span> candidate.get(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Two Pointers </tag>
            
            <tag> Sort </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[515 Find Largest Value in Each Tree Row]]></title>
      <url>http://wf94.github.io/2017/03/26/515-Find-Largest-Value-in-Each-Tree-Row/</url>
      <content type="html"><![CDATA[<p>You need to find the largest value in each row of a binary tree.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Input: </div><div class="line"></div><div class="line">          1</div><div class="line">         / \</div><div class="line">        3   2</div><div class="line">       / \   \  </div><div class="line">      5   3   9 </div><div class="line"></div><div class="line">Output: [1, 3, 9]</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这一题可以简单地采用层次遍历的方法。在层次遍历的队列当中加入空元素的方法，来分隔每一层。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for a binary tree node.</span></div><div class="line"><span class="comment"># class TreeNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.left = None</span></div><div class="line"><span class="comment">#         self.right = None</span></div><div class="line"><span class="keyword">import</span> Queue</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestValues</span><span class="params">(self, root)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type root: TreeNode</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        q = Queue.Queue()</div><div class="line">        ans = []</div><div class="line">        stats = []</div><div class="line">        <span class="keyword">if</span> (root):</div><div class="line">            q.put(root)</div><div class="line">            q.put(<span class="keyword">None</span>)</div><div class="line">            <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</div><div class="line">                cur = q.get()</div><div class="line">                <span class="keyword">if</span> (cur):</div><div class="line">                    stats.append(cur.val)</div><div class="line">                    <span class="keyword">if</span> (cur.left):</div><div class="line">                        q.put(cur.left)</div><div class="line">                    <span class="keyword">if</span> (cur.right):</div><div class="line">                        q.put(cur.right)</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="keyword">if</span> (q.empty()):</div><div class="line">                        <span class="keyword">if</span> (stats):</div><div class="line">                            ans.append(max(stats))</div><div class="line">                        <span class="keyword">break</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        <span class="keyword">if</span> (stats):</div><div class="line">                            ans.append(max(stats))</div><div class="line">                        stats = []</div><div class="line">                        q.put(<span class="keyword">None</span>)</div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
<p>这个解法就比较厉害了：<a href="https://discuss.leetcode.com/topic/78991/python-bfs/3" target="_blank" rel="external">https://discuss.leetcode.com/topic/78991/python-bfs/3</a> </p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tree </tag>
            
            <tag> DFS </tag>
            
            <tag> BFS </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[513 Find Bottom Left Tree Value]]></title>
      <url>http://wf94.github.io/2017/03/25/513-Find-Bottom-Left-Tree-Value/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, find the leftmost value in the last row of the tree.  </p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line"></div><div class="line">    2</div><div class="line">   / \</div><div class="line">  1   3</div><div class="line"></div><div class="line">Output:</div><div class="line">1</div></pre></td></tr></table></figure>
<p><strong> Example 2: </strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line"></div><div class="line">        1</div><div class="line">       / \</div><div class="line">      2   3</div><div class="line">     /   / \</div><div class="line">    4   5   6</div><div class="line">       /</div><div class="line">      7</div><div class="line"></div><div class="line">Output:</div><div class="line">7</div></pre></td></tr></table></figure>
<p><strong>Note:</strong> You may assume the tree (i.e., the given root node) is not <strong>NULL</strong>. </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用队列进行树的层次遍历，亦即广度优先搜索。层次遍历时右子树先入栈，接着左子树入栈。由此可以找到最后一层最左侧的元素。另外，因为我们不需要知道遍历到了第几层，所以不需要加入空节点。这大大简化了层次遍历的过程。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for a binary tree node.</span></div><div class="line"><span class="comment"># class TreeNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.left = None</span></div><div class="line"><span class="comment">#         self.right = None</span></div><div class="line"><span class="keyword">import</span> Queue</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findBottomLeftValue</span><span class="params">(self, root)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type root: TreeNode</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        a = Queue.Queue()</div><div class="line">        <span class="keyword">if</span> (root):</div><div class="line">            a.put(root)</div><div class="line">        ans = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span>(<span class="keyword">not</span> a.empty()):</div><div class="line">            cur = a.get()</div><div class="line">            <span class="keyword">if</span> (cur):</div><div class="line">                ans = cur.val</div><div class="line">                a.put(cur.right)</div><div class="line">                a.put(cur.left)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Tree </tag>
            
            <tag> DFS </tag>
            
            <tag> BFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[508 Most Frequent Subtree Sum]]></title>
      <url>http://wf94.github.io/2017/03/24/508-Most-Frequent-Subtree-Sum/</url>
      <content type="html"><![CDATA[<p>Given the root of a tree, you are asked to find the most frequent subtree sum. The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself). So what is the most frequent subtree sum value? If there is a tie, return all the values with the highest frequency in any order. </p>
<p><strong>Examples 1</strong><br> Input: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  5</div><div class="line"> /  \</div><div class="line">2   -3</div></pre></td></tr></table></figure>
<p><strong>Examples 2</strong><br> Input: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  5</div><div class="line"> /  \</div><div class="line">2   -5</div></pre></td></tr></table></figure>
<p><strong>Note:</strong> You may assume the sum of values in any subtree is in the range of 32-bit signed integer. </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>最下方的sum函数的作用就是递归地求出该节点下子树的和。居然在这个地方卡了很久【捂脸】</p>
<p>接下来，我们从根节点开始进行递归，求出每一个节点的子树和。我们把每一个节点的和它的子树和当作一个键值对，放进哈希表当中，从而可以统计出题意所需的众数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for a binary tree node.</span></div><div class="line"><span class="comment"># class TreeNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.left = None</span></div><div class="line"><span class="comment">#         self.right = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findFrequentTreeSum</span><span class="params">(self, root)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type root: TreeNode</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> (root):</div><div class="line">            sums = []</div><div class="line">            self.helper(root, sums)</div><div class="line">            count = &#123;&#125;</div><div class="line">            <span class="keyword">for</span> s <span class="keyword">in</span> sums:</div><div class="line">                <span class="keyword">if</span> count.has_key(s):</div><div class="line">                    count[s] += <span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    count[s] = <span class="number">1</span></div><div class="line">            </div><div class="line">            maximum = max(count.values())</div><div class="line">            </div><div class="line">            ans = []</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> count:</div><div class="line">                <span class="keyword">if</span> (count[i] == maximum):</div><div class="line">                    ans.append(i)</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> ans</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> []</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, root, sums)</span>:</span></div><div class="line">        sums.append(self.sumtree(root))</div><div class="line">        <span class="keyword">if</span> (root.left):</div><div class="line">            self.helper(root.left, sums)</div><div class="line">        <span class="keyword">if</span> (root.right):</div><div class="line">            self.helper(root.right, sums)</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumtree</span><span class="params">(self, root)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> self.sumtree(root.right) + self.sumtree(root.left) + root.val</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Hash Table </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[506 Relative Ranks]]></title>
      <url>http://wf94.github.io/2017/03/23/506-Relative-Ranks/</url>
      <content type="html"><![CDATA[<p>Given scores of <strong>N</strong> athletes, find their relative ranks and the people with the top three highest scores, who will be awarded medals: “Gold Medal”, “Silver Medal” and “Bronze Medal”.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Input: [5, 4, 3, 2, 1]</div><div class="line">Output: [&quot;Gold Medal&quot;, &quot;Silver Medal&quot;, &quot;Bronze Medal&quot;, &quot;4&quot;, &quot;5&quot;]</div><div class="line">Explanation: The first three athletes got the top three highest scores, so they got &quot;Gold Medal&quot;, &quot;Silver Medal&quot; and &quot;Bronze Medal&quot;. </div><div class="line">For the left two athletes, you just need to output their relative ranks according to their scores.</div></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li>N is a positive integer and won’t exceed 10,000.</li>
<li>All the scores of athletes are guaranteed to be unique.</li>
</ol>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用两个哈希表，对其中一个进行排序，再把结果转换到另外一个哈希表中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findRelativeRanks</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: List[str]</div><div class="line">        """</div><div class="line">        sortmap = &#123;&#125;</div><div class="line">        result = &#123;&#125;</div><div class="line">        ans = []</div><div class="line">        <span class="keyword">for</span> i,enum <span class="keyword">in</span> enumerate(nums):</div><div class="line">            sortmap[i] = enum</div><div class="line">        </div><div class="line">        length = len(nums)</div><div class="line">        a = length</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> sorted(sortmap, key=sortmap.__getitem__):</div><div class="line">            result[i] = a</div><div class="line">            a -= <span class="number">1</span></div><div class="line">        <span class="keyword">print</span> result</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            ans.append(<span class="string">" "</span>)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            <span class="keyword">if</span> (result[i] == <span class="number">1</span>):</div><div class="line">                ans[i] = <span class="string">"Gold Medal"</span></div><div class="line">            <span class="keyword">elif</span> (result[i] == <span class="number">2</span>):</div><div class="line">                ans[i] = <span class="string">"Silver Medal"</span></div><div class="line">            <span class="keyword">elif</span> (result[i] == <span class="number">3</span>):</div><div class="line">                ans[i] = <span class="string">"Bronze Medal"</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                ans[i] = str(result[i])</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[504 Base 7]]></title>
      <url>http://wf94.github.io/2017/03/22/504-Base-7/</url>
      <content type="html"><![CDATA[<p>Given an integer, return its base 7 string representation.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: 100</div><div class="line">Output: &quot;202&quot;</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: -7</div><div class="line">Output: &quot;-10&quot;</div></pre></td></tr></table></figure>
<p><strong>Note:</strong> The input will be in range of [-1e7, 1e7]. </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>简单的7进制转换，采用短除法即可实现。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convertToBase7</span><span class="params">(self, num)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type num: int</div><div class="line">        :rtype: str</div><div class="line">        """</div><div class="line">        </div><div class="line">        isNeg = <span class="keyword">False</span></div><div class="line">        <span class="keyword">if</span> (num &lt; <span class="number">0</span>):</div><div class="line">            num = -num</div><div class="line">            isNeg = <span class="keyword">True</span></div><div class="line">        <span class="keyword">elif</span> (num == <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> <span class="string">"0"</span></div><div class="line">        res = <span class="string">""</span></div><div class="line">        <span class="keyword">while</span> (num):</div><div class="line">            tmp = num % <span class="number">7</span></div><div class="line">            res = str(tmp) + res</div><div class="line">            num = num / <span class="number">7</span></div><div class="line">        <span class="keyword">if</span> (isNeg):</div><div class="line">            <span class="keyword">return</span> <span class="string">"-"</span> + res</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> res</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[503 Next Greater ElementII]]></title>
      <url>http://wf94.github.io/2017/03/21/503-Next-Greater-ElementII/</url>
      <content type="html"><![CDATA[<p>Given a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn’t exist, output -1 for this number. </p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: [1,2,1]</div><div class="line">Output: [2,-1,2]</div><div class="line">Explanation: The first 1&apos;s next greater number is 2; </div><div class="line">The number 2 can&apos;t find next greater number; </div><div class="line">The second 1&apos;s next greater number needs to search circularly, which is also 2.</div></pre></td></tr></table></figure>
<p><strong>Note:</strong> The length of given array won’t exceed 10000. </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>最开始以为O(n^2)的方法是可以使用的，但是不巧，这个答案是超时的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextGreaterElements</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        res = []</div><div class="line">        <span class="keyword">for</span> i, cur <span class="keyword">in</span> enumerate(nums):</div><div class="line">            hasFound = <span class="keyword">False</span></div><div class="line">            <span class="keyword">for</span> j, big <span class="keyword">in</span> enumerate(nums[i:]):</div><div class="line">                <span class="keyword">if</span> (cur &lt; big):</div><div class="line">                    res.append(big)</div><div class="line">                    hasFound = <span class="keyword">True</span></div><div class="line">                    <span class="keyword">break</span></div><div class="line">            <span class="keyword">if</span> (hasFound):</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">for</span> j, big <span class="keyword">in</span> enumerate(nums[:i]):</div><div class="line">                <span class="keyword">if</span> (cur &lt; big):</div><div class="line">                    res.append(big)</div><div class="line">                    hasFound = <span class="keyword">True</span></div><div class="line">                    <span class="keyword">break</span></div><div class="line">            <span class="keyword">if</span> (hasFound):</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                res.append(<span class="number">-1</span>)</div><div class="line">            </div><div class="line">        <span class="keyword">return</span> res</div></pre></td></tr></table></figure>
<p>接下来试一下stack的方法。基本的思路就是将所有的元素按照一定规律入栈和出栈，参见496题的基本方法。</p>
<p>首先要确定，这是一个循环的list，所以做两次O(n)的循环比较妥当。这样list尾部的元素还有机会和list头部的元素来进行比较。</p>
<p>其次，stack里面存放的应该是nums里面的元素index，每一个元素都需要入一次栈，和之后的元素进行比较。要注意的是，如果栈里面存有元素，那说明栈里面的元素后一个应当是大于前一个的。所以在出栈的时候，需要利用循环来判断最新访问的元素nums[index]是否大于栈里面的所有元素。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextGreaterElements</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        length = len(nums)</div><div class="line">        res = []</div><div class="line">        stack = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            res.append(<span class="number">-1</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span> * length):</div><div class="line">            index = i % length</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (stack):</div><div class="line">                <span class="keyword">while</span> (nums[stack[<span class="number">-1</span>]] &lt; nums[index]):</div><div class="line">                    res[stack[<span class="number">-1</span>]] = nums[index]</div><div class="line">                    stack.pop()</div><div class="line">                    <span class="keyword">if</span> (<span class="keyword">not</span> stack):</div><div class="line">                        <span class="keyword">break</span></div><div class="line">            <span class="keyword">if</span> (i &lt; length):</div><div class="line">                stack.append(i)</div><div class="line">        <span class="keyword">return</span> res</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Stack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[501 Find Mode in Binary Search Tree]]></title>
      <url>http://wf94.github.io/2017/03/20/501-Find-Mode-in-Binary-Search-Tree/</url>
      <content type="html"><![CDATA[<p>Given a binary search tree (BST) with duplicates, find all the <a href="https://en.wikipedia.org/wiki/Mode_(statistics" target="_blank" rel="external">mode(s)</a>) (the most frequently occurred element) in the given BST.</p>
<p>Assume a BST is defined as follows: </p>
<ul>
<li>The left subtree of a node contains only nodes with keys <strong>less than or equal to</strong> the node’s key.</li>
<li>The right subtree of a node contains only nodes with keys <strong>greater than or equal to</strong> the node’s key.</li>
<li>Both the left and right subtrees must also be binary search trees.</li>
</ul>
<p>For example:<br> Given BST <code>[1,null,2,2]</code>,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line"> \</div><div class="line">  2</div><div class="line"> /</div><div class="line">2</div></pre></td></tr></table></figure>
<p>return <code>[2]</code>. </p>
<p><strong>Note:</strong> If a tree has more than one mode, you can return them in any order. </p>
<p><strong>Follow up:</strong> Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count). </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>如果利用额外的存储空间，只需要遍历二叉搜索树即可；利用哈希表对字符出现的个数进行统计。</p>
<p>如果严格利用O(1)的存储空间，需要遍历两次二叉树；第一次找到众数(mode)的数字，第二次找到符合众数个数的字符。而且如果采用非递归的方法会更佳。这里可以利用[Morris Traversal][<a href="http://www.cnblogs.com/AnnieKim/archive/2013/06/15/MorrisTraversal.html]的方法来实现。" target="_blank" rel="external">http://www.cnblogs.com/AnnieKim/archive/2013/06/15/MorrisTraversal.html]的方法来实现。</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for a binary tree node.</span></div><div class="line"><span class="comment"># class TreeNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.left = None</span></div><div class="line"><span class="comment">#         self.right = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMode</span><span class="params">(self, root)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type root: TreeNode</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        result = []</div><div class="line">        count = &#123;&#125;</div><div class="line">        <span class="keyword">if</span> (root):</div><div class="line">            self.helper(root, count)</div><div class="line">            maxval = max(count.values())</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            maxval = <span class="number">0</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> count:</div><div class="line">            <span class="keyword">if</span> count[i] == maxval:</div><div class="line">                result.append(i)</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, root, count)</span>:</span></div><div class="line">        <span class="keyword">if</span> count.has_key(root.val):</div><div class="line">            count[root.val] += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            count[root.val] = <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (root.left):</div><div class="line">            self.helper(root.left, count)</div><div class="line">        <span class="keyword">if</span> (root.right):</div><div class="line">            self.helper(root.right, count)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> count</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[500 Keyboard Row]]></title>
      <url>http://wf94.github.io/2017/03/19/500-Keyboard-Row/</url>
      <content type="html"><![CDATA[<p>Given a List of words, return the words that can be typed using letters of <strong>alphabet</strong> on only one row’s of American keyboard like the image below. </p>
<p><img src="https://leetcode.com/static/images/problemset/keyboard.png" alt="American keyboard"> </p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: [&quot;Hello&quot;, &quot;Alaska&quot;, &quot;Dad&quot;, &quot;Peace&quot;]</div><div class="line">Output: [&quot;Alaska&quot;, &quot;Dad&quot;]</div></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li><p>You may use one character in the keyboard more than once.</p>
</li>
<li><p>You may assume the input string will only contain letters of alphabet.</p>
</li>
</ol>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>想办法利用简单的数组存储，模仿哈希表，判断一个单词是不是一行键盘就能打出来的【符合题意】。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findWords</span><span class="params">(self, words)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type words: List[str]</div><div class="line">        :rtype: List[str]</div><div class="line">        """</div><div class="line">        ans = []</div><div class="line">        row = [<span class="string">"QWERTYUIOPqwertyuiop"</span>, <span class="string">"ASDFGHJKLasdfghjkl"</span>, <span class="string">"ZXCVBNMzxcvbnm"</span>]</div><div class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</div><div class="line">            append = <span class="keyword">True</span></div><div class="line">            <span class="keyword">if</span> (word[<span class="number">0</span>] <span class="keyword">in</span> row[<span class="number">0</span>]):</div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> word:</div><div class="line">                    <span class="keyword">if</span> (i <span class="keyword">not</span> <span class="keyword">in</span> row[<span class="number">0</span>]):</div><div class="line">                        append = <span class="keyword">False</span></div><div class="line">                        <span class="keyword">break</span></div><div class="line">                </div><div class="line">            <span class="keyword">elif</span> (word[<span class="number">0</span>] <span class="keyword">in</span> row[<span class="number">1</span>]):</div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> word:</div><div class="line">                    <span class="keyword">if</span> (i <span class="keyword">not</span> <span class="keyword">in</span> row[<span class="number">1</span>]):</div><div class="line">                        append = <span class="keyword">False</span></div><div class="line">                        <span class="keyword">break</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> word:</div><div class="line">                    <span class="keyword">if</span> (i <span class="keyword">not</span> <span class="keyword">in</span> row[<span class="number">2</span>]):</div><div class="line">                        append = <span class="keyword">False</span></div><div class="line">                        <span class="keyword">break</span></div><div class="line">            <span class="keyword">if</span> (append):</div><div class="line">                ans.append(word)</div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[498 Diagonal Traverse]]></title>
      <url>http://wf94.github.io/2017/03/18/498-Diagonal-Travers/</url>
      <content type="html"><![CDATA[<p>Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.  </p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">[</div><div class="line"> [ 1, 2, 3 ],</div><div class="line"> [ 4, 5, 6 ],</div><div class="line"> [ 7, 8, 9 ]</div><div class="line">]</div><div class="line">Output:  [1,2,4,7,5,3,6,8,9]</div></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li>The total number of elements of the given matrix will not exceed 10,000.</li>
</ol>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>直接按照题目给的顺序来进行访问，时间复杂度是O(n)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findDiagonalOrder</span><span class="params">(self, matrix)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type matrix: List[List[int]]</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        x = <span class="number">0</span></div><div class="line">        y = <span class="number">1</span></div><div class="line">        res = []</div><div class="line">        vertical = len(matrix)</div><div class="line">        horizontal = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> (vertical):</div><div class="line">            horizontal = len(matrix[<span class="number">0</span>])</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (horizontal &gt; <span class="number">1</span> <span class="keyword">and</span> vertical &gt; <span class="number">1</span>):</div><div class="line">            res.append(matrix[<span class="number">0</span>][<span class="number">0</span>])</div><div class="line">            forward = <span class="keyword">False</span></div><div class="line">            downward = <span class="keyword">True</span></div><div class="line">            upward = <span class="keyword">False</span></div><div class="line">            count = <span class="number">0</span></div><div class="line">            <span class="keyword">while</span>( x &lt; vertical - <span class="number">1</span> <span class="keyword">or</span> y &lt; horizontal - <span class="number">1</span> ):</div><div class="line">                res.append(matrix[x][y])</div><div class="line">                </div><div class="line">                <span class="keyword">if</span> (forward):</div><div class="line">                    <span class="keyword">if</span> ( x &lt; vertical<span class="number">-1</span> <span class="keyword">and</span> y == <span class="number">0</span> ):</div><div class="line">                        x += <span class="number">1</span></div><div class="line">                        upward = <span class="keyword">True</span></div><div class="line">                        forward = <span class="keyword">False</span></div><div class="line">                    <span class="keyword">elif</span> (x &lt; vertical<span class="number">-1</span> <span class="keyword">and</span> y == horizontal - <span class="number">1</span>):</div><div class="line">                        x += <span class="number">1</span></div><div class="line">                        downward = <span class="keyword">True</span></div><div class="line">                        forward = <span class="keyword">False</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        <span class="keyword">if</span> (x == <span class="number">0</span>):</div><div class="line">                            y += <span class="number">1</span></div><div class="line">                            downward = <span class="keyword">True</span></div><div class="line">                            forward = <span class="keyword">False</span></div><div class="line">                        <span class="keyword">elif</span> (x == vertical <span class="number">-1</span>):</div><div class="line">                            y += <span class="number">1</span></div><div class="line">                            upward = <span class="keyword">True</span></div><div class="line">                            forward = <span class="keyword">False</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="keyword">if</span> (upward):</div><div class="line">                        x -= <span class="number">1</span></div><div class="line">                        y += <span class="number">1</span></div><div class="line">                        <span class="keyword">if</span> (x == <span class="number">0</span> <span class="keyword">or</span> y == horizontal - <span class="number">1</span>):</div><div class="line">                            upward = <span class="keyword">False</span></div><div class="line">                            forward = <span class="keyword">True</span></div><div class="line">                    </div><div class="line">                    <span class="keyword">if</span> (downward):</div><div class="line">                        x += <span class="number">1</span></div><div class="line">                        y -= <span class="number">1</span></div><div class="line">                        <span class="keyword">if</span> (x == vertical - <span class="number">1</span> <span class="keyword">or</span> y == <span class="number">0</span>):</div><div class="line">                            downward = <span class="keyword">False</span></div><div class="line">                            forward = <span class="keyword">True</span></div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (x == vertical - <span class="number">1</span> <span class="keyword">and</span> y == horizontal - <span class="number">1</span>):</div><div class="line">                res.append(matrix[x][y])</div><div class="line">        </div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> (horizontal == <span class="number">1</span>):</div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> matrix:</div><div class="line">                    res.append(i[<span class="number">0</span>])</div><div class="line">            <span class="keyword">elif</span>(vertical == <span class="number">1</span>):</div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> matrix[<span class="number">0</span>]:</div><div class="line">                    res.append(i)</div><div class="line">        <span class="keyword">return</span> res</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[496 Next Greater Element I]]></title>
      <url>http://wf94.github.io/2017/03/17/496-Next-Greater-Element-I/</url>
      <content type="html"><![CDATA[<p>You are given two arrays <strong>(without duplicates)</strong> <code>nums1</code> and <code>nums2</code> where <code>nums1</code>’s elements are subset of <code>nums2</code>. Find all the next greater numbers for <code>nums1</code>‘s elements in the corresponding places of <code>nums2</code>.  </p>
<p>The Next Greater Number of a number <strong>x</strong> in <code>nums1</code> is the first greater number to its right in <code>nums2</code>. If it does not exist, output -1 for this number. </p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Input: nums1 = [4,1,2], nums2 = [1,3,4,2].</div><div class="line">Output: [-1,3,-1]</div><div class="line">Explanation:</div><div class="line">    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.</div><div class="line">    For number 1 in the first array, the next greater number for it in the second array is 3.</div><div class="line">    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: nums1 = [2,4], nums2 = [1,2,3,4].</div><div class="line">Output: [3,-1]</div><div class="line">Explanation:</div><div class="line">    For number 2 in the first array, the next greater number for it in the second array is 3.</div><div class="line">    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.</div></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li>All elements in <code>nums1</code> and <code>nums2</code> are unique.</li>
<li>The length of both <code>nums1</code> and <code>nums2</code> would not exceed 1000.</li>
</ol>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用栈的方法，可以满足题意。</p>
<p>因为如果一个数组的元素是递减的，这些递减的元素都不可能互为“Next Greater Element”。直到有一个递增的元素，才能满足题意。我们拿到这个递增的元素，不断地和栈顶的元素进行比较，直到该元素比栈顶元素小为止。出栈的这些元素的“Next Greater Element”，就是这个递增的元素的值。</p>
<p>由于没有重复，可以用map来一一对应。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextGreaterElement</span><span class="params">(self, findNums, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type findNums: List[int]</div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        resultmap = &#123;&#125;</div><div class="line">        tmpelem = [<span class="number">-1</span>]</div><div class="line">        <span class="keyword">while</span> (nums):</div><div class="line">            tmp = nums.pop()</div><div class="line">            <span class="keyword">if</span> (nums):</div><div class="line">                <span class="keyword">if</span> (nums[<span class="number">-1</span>] &lt; tmp):</div><div class="line">                    tmpelem.append(tmp)</div><div class="line">            </div><div class="line">            resultmap[tmp] = <span class="number">-1</span></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> tmpelem:</div><div class="line">                <span class="keyword">if</span> (tmp &lt; i):</div><div class="line">                    resultmap[tmp] = i</div><div class="line">        </div><div class="line">        result = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> findNums:</div><div class="line">            result.append(resultmap[i])</div><div class="line">            </div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Stack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[495 Teemo Attacking]]></title>
      <url>http://wf94.github.io/2017/03/16/495-Teemo-Attacking/</url>
      <content type="html"><![CDATA[<p>In LLP world, there is a hero called Teemo and his attacking can make his enemy Ashe be in poisoned condition. Now, given the Teemo’s attacking <strong>ascending</strong> time series towards Ashe and the poisoning time duration per Teemo’s attacking, you need to output the total time that Ashe is in poisoned condition. </p>
<p>You may assume that Teemo attacks at the very beginning of a specific time point, and makes Ashe be in poisoned condition immediately.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Input: [1,4], 2</div><div class="line">Output: 4</div><div class="line">Explanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned immediately. </div><div class="line">This poisoned status will last 2 seconds until the end of time point 2. </div><div class="line">And at time point 4, Teemo attacks Ashe again, and causes Ashe to be in poisoned status for another 2 seconds. </div><div class="line">So you finally need to output 4.</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Input: [1,2], 2</div><div class="line">Output: 3</div><div class="line">Explanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned. </div><div class="line">This poisoned status will last 2 seconds until the end of time point 2. </div><div class="line">However, at the beginning of time point 2, Teemo attacks Ashe again who is already in poisoned status. </div><div class="line">Since the poisoned status won&apos;t add up together, though the second poisoning attack will still work at time point 2, it will stop at the end of time point 3. </div><div class="line">So you finally need to output 3.</div></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li>You may assume the length of given time series array won’t exceed 10000.</li>
<li>You may assume the numbers in the Teemo’s attacking time series and his poisoning time duration per attacking are non-negative integers, which won’t exceed 10,000,000.</li>
</ol>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们可以利用额外的数组空间来储存冷却时间；当然也可以将冷却时间存在一个单独的int变量里面。用额外的数组存储的话相对比较简单，我们只需要记住时间序列之间的差值，并逐一对比即可。如果要用单个变量存储，需要每次都比较差值与duration的关系，即倒数2-5行所做的工作。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findPoisonedDuration</span><span class="params">(self, timeSeries, duration)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type timeSeries: List[int]</div><div class="line">        :type duration: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        times = []</div><div class="line">        length = len(timeSeries)</div><div class="line">        <span class="keyword">if</span> (length):</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(length<span class="number">-1</span>):</div><div class="line">                times.append(timeSeries[i+<span class="number">1</span>] - timeSeries[i])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        ans = <span class="number">0</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> times:</div><div class="line">            <span class="keyword">if</span> (i &gt;= duration):</div><div class="line">                ans += duration</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                ans += i</div><div class="line">        <span class="keyword">return</span> ans + duration</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[494 Target Sum]]></title>
      <url>http://wf94.github.io/2017/03/15/494-Target-Sum/</url>
      <content type="html"><![CDATA[<p>You are given a list of non-negative integers, a1, a2, …, an, and a target, S. Now you have 2 symbols <code>+</code> and <code>-</code>. For each integer, you should choose one from <code>+</code> and <code>-</code> as its new symbol. </p>
<p>Find out how many ways to assign symbols to make sum of integers equal to target S.   </p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Input: nums is [1, 1, 1, 1, 1], S is 3. </div><div class="line">Output: 5</div><div class="line">Explanation: </div><div class="line"></div><div class="line">-1+1+1+1+1 = 3</div><div class="line">+1-1+1+1+1 = 3</div><div class="line">+1+1-1+1+1 = 3</div><div class="line">+1+1+1-1+1 = 3</div><div class="line">+1+1+1+1-1 = 3</div><div class="line"></div><div class="line">There are 5 ways to assign symbols to make the sum of nums be target 3.</div></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li>The length of the given array is positive and will not exceed 20. </li>
<li>The sum of elements in the given array will not exceed 1000.</li>
<li>Your output answer is guaranteed to be fitted in a 32-bit integer.</li>
</ol>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用动态规划解决问题。</p>
<p>分析例子：有5个数，转化成前四个数与第五个数之和为3；则转化成前三个数与第四个数之和为2或者4；则转化为前两个数与第三个数之和为1,3,3或5。</p>
<p>我们此时可以考虑用哈希表存储结果。直到数组遍历完全，问题可以得到解决。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span>    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findTargetSumWays</span><span class="params">(self, nums, S)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :type S: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        stats = &#123;&#125;</div><div class="line">        <span class="keyword">if</span>(len(nums)):</div><div class="line">            <span class="keyword">if</span> (len(nums) == <span class="number">1</span>):</div><div class="line">                <span class="keyword">if</span> (nums[<span class="number">0</span>] == S <span class="keyword">or</span> nums[<span class="number">0</span>] == -S):</div><div class="line">                    <span class="keyword">if</span> (nums[<span class="number">0</span>]):</div><div class="line">                        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        <span class="keyword">return</span> <span class="number">2</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">            <span class="keyword">elif</span> (len(nums) &gt; <span class="number">1</span>):</div><div class="line">                <span class="keyword">if</span> (nums[<span class="number">0</span>]):</div><div class="line">                    stats[S-nums[<span class="number">0</span>]] = <span class="number">1</span></div><div class="line">                    stats[S+nums[<span class="number">0</span>]] = <span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    stats[S] = <span class="number">2</span></div><div class="line">                tmp = &#123;&#125;</div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> nums[<span class="number">1</span>:]:</div><div class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> stats.keys():</div><div class="line">                        <span class="keyword">if</span> (tmp.has_key(j-i)):</div><div class="line">                            tmp[j-i] += stats[j]</div><div class="line">                        <span class="keyword">else</span>:</div><div class="line">                            tmp[j-i] = stats[j]</div><div class="line">                        </div><div class="line">                        <span class="keyword">if</span> (tmp.has_key(j+i)):</div><div class="line">                            tmp[j+i] += stats[j]</div><div class="line">                        <span class="keyword">else</span>:</div><div class="line">                            tmp[j+i] = stats[j]</div><div class="line">                    stats = tmp</div><div class="line">                    tmp = &#123;&#125;</div><div class="line">                <span class="keyword">if</span> (stats.has_key(<span class="number">0</span>)):</div><div class="line">                    <span class="keyword">return</span> stats[<span class="number">0</span>]</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<p>一开始我还是想用常规方式解决问题。</p>
<p>先求和，如果需要改变数的符号，就是要减去这个数两次。如果可以找到所有元素之和，与待求元素之差的话，应该可以解决问题。</p>
<p>实际上，如果遇到带0的元素，就会有困难，可能会陷入死循环当中。</p>
<p>而且，还会出现重复累加的情况，选取的应为组合数；重复累加就会变成排列数，最后的结果总是会大一些。</p>
<p>在做题的时候，我还不会利用DFS解决组合数的问题。这也是利用常规方法解决问题失败的原因之一。</p>
<p>测试用例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[9,7,0,3,9,8,6,5,7,6]</div><div class="line">2</div></pre></td></tr></table></figure>
<p>参考资料：</p>
<p><a href="http://blog.csdn.net/woshioosm/article/details/7438834" target="_blank" rel="external">http://blog.csdn.net/woshioosm/article/details/7438834</a></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Dynamic Programming </tag>
            
            <tag> DFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[492 Construct the Rectangle]]></title>
      <url>http://wf94.github.io/2017/03/14/492-Construct-the-Rectangle/</url>
      <content type="html"><![CDATA[<p>For a web developer, it is very important to know how to design a web page’s size. So, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1. The area of the rectangular web page you designed must equal to the given target area.</div><div class="line"></div><div class="line">2. The width W should not be larger than the length L, which means L &gt;= W.</div><div class="line"></div><div class="line">3. The difference between length L and width W should be as small as possible.</div></pre></td></tr></table></figure>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Input: 4</div><div class="line">Output: [2, 2]</div><div class="line">Explanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. </div><div class="line">But according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们需要构建一个最小面积的矩形。周长一定，矩形越接近正方形，面积越大。构建一个符合题意的矩形就可以了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">constructRectangle</span><span class="params">(self, area)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type area: int</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        width = int(math.sqrt(area))</div><div class="line">        length = <span class="number">0</span></div><div class="line">        ans = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(width, <span class="number">0</span>, <span class="number">-1</span>):</div><div class="line">            <span class="keyword">if</span> (area % i == <span class="number">0</span>):</div><div class="line">                length = area / i</div><div class="line">                width = i</div><div class="line">                <span class="keyword">break</span></div><div class="line">            </div><div class="line">        ans.append(length)</div><div class="line">        ans.append(width)</div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[491 Increasing Subsequences]]></title>
      <url>http://wf94.github.io/2017/03/13/491-Increasing-Subsequences/</url>
      <content type="html"><![CDATA[<p>Given an integer array, your task is to find all the different possible increasing subsequences of the given array, and the length of an increasing subsequence should be at least 2 . </p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: [4, 6, 7, 7]</div><div class="line">Output: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]</div></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li><p>The length of the given array will not exceed 15.</p>
</li>
<li><p>The range of integer in the given array is [-100,100].</p>
</li>
<li><p>The given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence.</p>
</li>
</ol>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>第一次用Java写DFS，就总结一下自己在写Java的时候踩到的坑吧。</p>
<p>首先在Java里面，所有的对象/变量都要实例化。所以在利用stats这个变量的时候，我们要在Solution类的构造函数里面把stats这个变量给实例化，这样我们才能在函数里面调用，不然就会有null-pointer exception。当然，我们也可以不在构造函数里面将stats变量实例化。我们将stats作为DFS函数的参数，在findSubsequences函数将stats变量实例化，也会得到一样的效果。</p>
<p>必须要注意，每次进行DFS的时候，都需要实例化一个新的存储空间。（当然，在C++里面如果要分配内存空间，记得每次都要释放掉）否则，不同函数的进行DFS的结果，就会在同一块区域里面不断堆叠，得不到我们想要的结果。</p>
<p>List, Set这些类，都是super interface/abstract interface ，它们本身不能被实例化。但是hashset，arraylist这些类分别是Set和List类的子类，它们都可以被实例化。</p>
<p>对于这道题，在做DFS的时候，思路其实很简单。我们将所给出的数组进行暴力搜索，然后在结果的基础上进行剪枝，如果有一个元素使得子数组递减，就舍去这个继续搜索的过程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Set&lt;List&lt;Integer&gt;&gt; stats;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        stats = <span class="keyword">new</span> HashSet&lt;List&lt;Integer&gt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target, List&lt;Integer&gt; result)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(target == <span class="number">0</span>)&#123;</div><div class="line">            stats.add(result);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</div><div class="line">                <span class="keyword">if</span>( ( (!result.isEmpty()) &amp;&amp; nums[i] &gt;= result.get(result.size() - <span class="number">1</span>) ) || ( result.isEmpty() ) )</div><div class="line">                &#123;</div><div class="line">                    List&lt;Integer&gt; new_result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(result);</div><div class="line">                    new_result.add(nums[i]);</div><div class="line">                    <span class="keyword">int</span> len = nums.length - <span class="number">1</span> - i;</div><div class="line">                    <span class="keyword">if</span> (len &gt;= target - <span class="number">1</span>)&#123;</div><div class="line">                        <span class="keyword">int</span>[] new_nums = <span class="keyword">new</span> <span class="keyword">int</span>[len];</div><div class="line">                        <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++)&#123;</div><div class="line">                            new_nums[k] = nums[j];</div><div class="line">                            k++;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">int</span> t = target - <span class="number">1</span>;</div><div class="line"></div><div class="line">                        DFS(new_nums, t, new_result);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; findSubsequences(<span class="keyword">int</span>[] nums) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nums.length; i++)&#123;</div><div class="line">            List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">            DFS(nums, i, result);</div><div class="line">        &#125;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;(stats);</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> DFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[485 Max Consecutive Ones]]></title>
      <url>http://wf94.github.io/2017/03/12/485-Max-Consecutive-Ones/</url>
      <content type="html"><![CDATA[<p>Given a binary array, find the maximum number of consecutive 1s in this array.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Input: [1,1,0,1,1,1]</div><div class="line">Output: 3</div><div class="line">Explanation: The first two digits or the last three digits are consecutive 1s.</div><div class="line">    The maximum number of consecutive 1s is 3.</div></pre></td></tr></table></figure>
<p><strong>Note:</strong> </p>
<ul>
<li>The input array will only contain <code>0</code> and <code>1</code>.</li>
<li>The length of input array is a positive integer and will not exceed 10,000</li>
</ul>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>维护并统计1出现的最大次数即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        res = []</div><div class="line">        count = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</div><div class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>):</div><div class="line">                count += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                res.append(count)</div><div class="line">                count = <span class="number">0</span></div><div class="line">        res.append(count)</div><div class="line">        <span class="keyword">return</span> max(res)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[482 License Key Formatting]]></title>
      <url>http://wf94.github.io/2017/03/11/482-License-Key-Formatting/</url>
      <content type="html"><![CDATA[<p>Now you are given a string S, which represents a software license key which we would like to format. The string S is composed of alphanumerical characters and dashes. The dashes split the alphanumerical characters within the string into groups. (i.e. if there are M dashes, the string is split into M+1 groups). The dashes in the given string are possibly misplaced.</p>
<p>We want each group of characters to be of length K (except for possibly the first group, which could be shorter, but still must contain at least one character). To satisfy this requirement, we will reinsert dashes. Additionally, all the lower case letters in the string must be converted to upper case.</p>
<p>So, you are given a non-empty string S, representing a license key to format, and an integer K. And you need to return the license key formatted according to the description above.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: S = &quot;2-4A0r7-4k&quot;, K = 4</div><div class="line"></div><div class="line">Output: &quot;24A0-R74K&quot;</div><div class="line"></div><div class="line">Explanation: The string S has been split into two parts, each part has 4 characters.</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: S = &quot;2-4A0r7-4k&quot;, K = 3</div><div class="line"></div><div class="line">Output: &quot;24-A0R-74K&quot;</div><div class="line"></div><div class="line">Explanation: The string S has been split into three parts, each part has 3 characters except the first part as it could be shorter as said above.</div></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li>The length of string S will not exceed 12,000, and K is a positive integer.</li>
<li>String S consists only of alphanumerical characters (a-z and/or A-Z and/or 0-9) and dashes(-).</li>
<li>String S is non-empty.</li>
</ol>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用额外的空间，将string的‘-’字符给去掉，并存在一个list里面。</p>
<p>然后根据K的值的大小重建字符串即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">licenseKeyFormatting</span><span class="params">(self, S, K)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type S: str</div><div class="line">        :type K: int</div><div class="line">        :rtype: str</div><div class="line">        """</div><div class="line">        tmp = []</div><div class="line">        count = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> S[::<span class="number">-1</span>]:</div><div class="line">             </div><div class="line">            <span class="keyword">if</span> (i != <span class="string">"-"</span>):</div><div class="line">                tmp.append(i.upper())</div><div class="line">                count += <span class="number">1</span></div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (count == K):</div><div class="line">                tmp.append(<span class="string">"-"</span>)</div><div class="line">                count = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span>(tmp):       </div><div class="line">            <span class="keyword">if</span> (tmp[<span class="number">-1</span>] == <span class="string">"-"</span>):</div><div class="line">                <span class="keyword">del</span>(tmp[<span class="number">-1</span>])</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>.join(tmp[::<span class="number">-1</span>])</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[481 Magical String]]></title>
      <url>http://wf94.github.io/2017/03/10/481-Magical-String/</url>
      <content type="html"><![CDATA[<p>A magical string <strong>S</strong> consists of only ‘1’ and ‘2’ and obeys the following rules: </p>
<p>The string <strong>S</strong> is magical because concatenating the number of contiguous occurrences of characters ‘1’ and ‘2’ generates the string <strong>S</strong> itself. </p>
<p>The first few elements of string <strong>S</strong> is the following: <strong>S</strong> = “1221121221221121122……” </p>
<p>If we group the consecutive ‘1’s and ‘2’s in <strong>S</strong>, it will be: </p>
<p>1   22  11  2  1  22  1  22  11  2  11  22 …… </p>
<p>and the occurrences of ‘1’s or ‘2’s in each group are: </p>
<p>1   2       2    1   1    2     1    2     2    1    2    2 …… </p>
<p>You can see that the occurrence sequence above is the <strong>S</strong> itself.  </p>
<p>Given an integer N as input, return the number of ‘1’s in the first N number in the magical string <strong>S</strong>. </p>
<p><strong>Note:</strong> N will not exceed 100,000. </p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: 6</div><div class="line">Output: 3</div><div class="line">Explanation: The first 6 elements of magical string S is &quot;12211&quot; and it contains three 1&apos;s, so return 3.</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>根据题意，利用一个初始的种子数组，生成所需要的长度为n的magic数组。<br>然后再利用简单的统计技巧，将所有范围内的元素加起来。其和与元素个数的差值就是2的个数；1的个数也很容易得出。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">magicalString</span><span class="params">(self, n)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type n: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        seed = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>]</div><div class="line">        cur = <span class="number">2</span></div><div class="line">        <span class="keyword">while</span>( len(seed) &lt; n ):</div><div class="line">            <span class="keyword">if</span> (seed[cur] == <span class="number">2</span>):</div><div class="line">                <span class="keyword">if</span> (seed[<span class="number">-1</span>] == <span class="number">2</span>):</div><div class="line">                    seed.append(<span class="number">1</span>)</div><div class="line">                    seed.append(<span class="number">1</span>)</div><div class="line">                <span class="keyword">elif</span> (seed[<span class="number">-1</span>] == <span class="number">1</span>):</div><div class="line">                    seed.append(<span class="number">2</span>)</div><div class="line">                    seed.append(<span class="number">2</span>)</div><div class="line">            <span class="keyword">elif</span> (seed[cur] == <span class="number">1</span>):</div><div class="line">                <span class="keyword">if</span> (seed[<span class="number">-1</span>] == <span class="number">2</span>):</div><div class="line">                    seed.append(<span class="number">1</span>)</div><div class="line">                <span class="keyword">elif</span> (seed[<span class="number">-1</span>] == <span class="number">1</span>):</div><div class="line">                    seed.append(<span class="number">2</span>)</div><div class="line">            cur += <span class="number">1</span></div><div class="line">        </div><div class="line">        ans = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> seed[:n]:</div><div class="line">            ans += i</div><div class="line">        <span class="keyword">return</span> (<span class="number">2</span> * n - ans)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Climbing Stairs：分治法初探]]></title>
      <url>http://wf94.github.io/2017/03/09/Climbing-Stairs-Divide-and-Conquer/</url>
      <content type="html"><![CDATA[<p>在算法书里，我们总能看得到一道经典的题目。</p>
<blockquote>
<p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。 </p>
</blockquote>
<p>我们可以利用分治法来解决这一题。首先需要找到上台阶子问题的分割方法，再递归地求解子问题，最后把所有子问题的结果合并。</p>
<p>很容易看出，只有1级台阶的时候，只有1种跳法。2级台阶有2种跳法，3级台阶有3种跳法。如果有4级台阶，有5种跳法。</p>
<p>怎么求呢？我们可以把求解4级台阶，分解成求解两个2级台阶的子问题。这样一来，我们可以算出2×2种不同的跳法【1-2-3-4，12-3-4，1-2-34，12-34】。需要注意的是，分解成两个子问题之后，还会有跨越这两个子问题的情况。在本题中，跨越子问题的情况只可能是从前一个子问题，到下一个子问题，走过了两级台阶。在4级台阶中，这种情况是【1-23-4】</p>
<p>所以我们在合并所有子问题的时候，将上述两种情况合并起来就可以了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jumpFloor</span><span class="params">(self, number)</span>:</span></div><div class="line">        <span class="comment"># write code here</span></div><div class="line">        <span class="keyword">return</span> self.helper(number)</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, number)</span>:</span></div><div class="line">        <span class="keyword">if</span> (number &lt;= <span class="number">3</span>):</div><div class="line">            <span class="keyword">return</span> number</div><div class="line">       	<span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> (number % <span class="number">2</span> == <span class="number">0</span>):</div><div class="line">                <span class="comment"># 台阶个数为偶数，恰好能等分成两个子问题</span></div><div class="line">                <span class="comment"># 子问题内的跳法个数 + 跨越子问题的跳法个数</span></div><div class="line">            	<span class="keyword">return</span> self.helper(number / <span class="number">2</span>) * self.helper(number / <span class="number">2</span>) + self.helper(number / <span class="number">2</span> - <span class="number">1</span>) * self.helper(number / <span class="number">2</span> <span class="number">-1</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="comment"># 台阶个数为奇数，分割子问题的时候尽量均分</span></div><div class="line">                <span class="comment"># 子问题内的跳法个数 + 跨越子问题的跳法个数</span></div><div class="line">                <span class="keyword">return</span> self.helper(number / <span class="number">2</span>) * self.helper(number - number / <span class="number">2</span>) + self.helper(number / <span class="number">2</span> - <span class="number">1</span>) * self.helper(number - number / <span class="number">2</span> <span class="number">-1</span>)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Tech </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Divide and Conquer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[477 Total Hamming Distance]]></title>
      <url>http://wf94.github.io/2017/03/09/477-Total-Hamming-Distance/</url>
      <content type="html"><![CDATA[<p>The <a href="https://en.wikipedia.org/wiki/Hamming_distance" target="_blank" rel="external">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.</p>
<p>Now your job is to find the total Hamming distance between all pairs of the given numbers. </p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Input: 4, 14, 2</div><div class="line"></div><div class="line">Output: 6</div><div class="line"></div><div class="line">Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just</div><div class="line">showing the four bits relevant in this case). So the answer will be:</div><div class="line">HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.</div></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li>Elements of the given array are in the range of <code>0</code> to <code>10^9</code> </li>
<li>Length of the array will not exceed <code>10^4</code>. </li>
</ol>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>经过一番思考之后，可以发现如下规律。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0100</div><div class="line">1110</div><div class="line">0010</div><div class="line">0010</div></pre></td></tr></table></figure>
<p>竖着看，每一列都是一个bit的汉明距离，和1的个数有关。</p>
<p>如果没有1，这四个数在这一位的汉明距离就是0。</p>
<p>如果有一个1，汉明距离就是3，2个1，汉明距离就是4，3个1，汉明距离还是3，全是1，汉明距离就是0</p>
<p>可以总结，每一位的汉明距离就是（1的个数）×（总数-1的个数）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">totalHammingDistance</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        stats = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">36</span>):</div><div class="line">            stats.append(<span class="number">0</span>)</div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> nums:</div><div class="line">            count = <span class="number">0</span></div><div class="line">            <span class="keyword">while</span> k:</div><div class="line">                <span class="keyword">if</span> (k &amp; <span class="number">1</span>):</div><div class="line">                    stats[count] += <span class="number">1</span></div><div class="line">                k = k &gt;&gt; <span class="number">1</span></div><div class="line">                count += <span class="number">1</span></div><div class="line">        ans = <span class="number">0</span></div><div class="line">        length = len(nums)</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> stats:</div><div class="line">            ans += j * (length - j)</div><div class="line">            </div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[241 Different Ways to Add Parentheses：分治法初探]]></title>
      <url>http://wf94.github.io/2017/03/09/241-Different-Ways-to-Add-Parentheses/</url>
      <content type="html"><![CDATA[<p>Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are <code>+</code>, <code>-</code> and <code>*</code>.</p>
<p>Example 1</p>
<p>Input: <code>&quot;2-1-1&quot;</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">((2-1)-1) = 0</div><div class="line">(2-(1-1)) = 2</div></pre></td></tr></table></figure>
<p>Output: <code>[0, 2]</code></p>
<p>Example 2</p>
<p>Input: <code>&quot;2*3-4*5&quot;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(2*(3-(4*5))) = -34</div><div class="line">((2*3)-(4*5)) = -14</div><div class="line">((2*(3-4))*5) = -10</div><div class="line">(2*((3-4)*5)) = -10</div><div class="line">(((2*3)-4)*5) = 10</div></pre></td></tr></table></figure>
<p>Output: <code>[-34, -14, -10, -10, 10]</code></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题如果先把所有的情况的算式用字符串的方式存储起来，再分别用中缀表达式转后缀表达式，会显得非常复杂。这也不是题意所要求的。</p>
<p>我们需要采用分治法来解决此问题。</p>
<blockquote>
<p>分治法适用于什么样的情况呢？分治法所能解决的问题一般具有以下几个特征：    </p>
<ol>
<li><p>该问题的规模缩小到一定的程度就可以容易地解决    </p>
</li>
<li><p>该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质。    </p>
</li>
<li><p>利用该问题分解出的子问题的解可以合并为该问题的解；    </p>
</li>
<li><p>该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子子问题。</p>
</li>
</ol>
<p>第一条特征是绝大多数问题都可以满足的，因为问题的计算复杂性一般是随着问题规模的增加而增加；</p>
<p><strong>第二条特征是应用分治法的前提</strong>，它也是大多数问题可以满足的，此特征反映了递归思想的应用；</p>
<p><strong>第三条特征是关键，能否利用分治法完全取决于问题是否具有第三条特征</strong>，如果<strong>具备了第一条和第二条特征，而不具备第三条特征，则可以考虑用贪心法或动态规划法</strong>。</p>
<p><strong>第四条特征涉及到分治法的效率</strong>，如果各子问题是不独立的则分治法要做许多不必要的工作，重复地解公共的子问题，此时虽然可用分治法，但<strong>一般用动态规划法较好</strong>。</p>
</blockquote>
<p>满足了以上条件，我们来遵循分治法的步骤分析这个问题。</p>
<p>首先，我们需要将原问题分解成为规模比较小的子问题；之后，我们需要递归地将子问题进行求解；最后，我们把子问题的解合并为原问题的解。这也就是分治法的三个步骤。</p>
<p>具体而言， <code>&quot;2*3-4*5&quot;</code>可以分解为以下三个子问题：2 / 345; 23 / 45; 234 / 5。我们在划分的时候，数字长度如果为n，我们就需要划分n-1次。每一次划分之间的结果相互独立，也满足了前文所述的分治法第四条特征。</p>
<p>解决子问题，就需要采取递归的方式。最后，将所求的答案输出到数组里即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diffWaysToCompute</span><span class="params">(self, input)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type input: str</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        s = [<span class="string">"+"</span>,<span class="string">"-"</span>,<span class="string">"*"</span>]</div><div class="line">        digits = []</div><div class="line">        symbols = []</div><div class="line">        self.ans = []</div><div class="line">        tmp = <span class="string">''</span></div><div class="line">        <span class="comment"># 注意算式中数字和符号的划分</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> input:</div><div class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> s:</div><div class="line">                symbols.append(i)</div><div class="line">                digits.append(int(tmp))</div><div class="line">                tmp = <span class="string">''</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                tmp += i</div><div class="line">        digits.append(int(tmp))</div><div class="line">                </div><div class="line">        self.length = len(digits)</div><div class="line">        <span class="keyword">return</span> self.subproblem(digits, symbols)</div><div class="line"></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subproblem</span><span class="params">(self, digits, symbols)</span>:</span></div><div class="line">        n = len(digits)</div><div class="line">        <span class="comment"># 最后求得的结果用数组保存。</span></div><div class="line">        <span class="comment"># 因为当 n == 3 时，已经出现两个结果，返回值需放在数组当中</span></div><div class="line">        result = []</div><div class="line">        <span class="comment"># 解决最简单的子问题 n == 1</span></div><div class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>):</div><div class="line">            <span class="keyword">return</span> [digits[<span class="number">0</span>]]</div><div class="line">        <span class="comment"># 在这个地方，有三个if语句的判断，可以将其放在一个helper函数里，会比较简洁。</span></div><div class="line">        <span class="comment"># n == 2 时的结果</span></div><div class="line">        <span class="keyword">elif</span> (n == <span class="number">2</span>):</div><div class="line">            <span class="keyword">if</span> (symbols[<span class="number">0</span>] == <span class="string">'+'</span>):</div><div class="line">                result = [digits[<span class="number">0</span>] + digits[<span class="number">1</span>]]</div><div class="line">            <span class="keyword">elif</span> (symbols[<span class="number">0</span>] == <span class="string">'-'</span>):</div><div class="line">                result = [digits[<span class="number">0</span>] - digits[<span class="number">1</span>]]</div><div class="line">            <span class="keyword">elif</span> (symbols[<span class="number">0</span>] == <span class="string">'*'</span>):</div><div class="line">                result = [digits[<span class="number">0</span>] * digits[<span class="number">1</span>]]</div><div class="line">            <span class="keyword">return</span> result</div><div class="line">        <span class="comment"># n &gt; 2</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>, n):</div><div class="line">                <span class="keyword">if</span> (symbols[k<span class="number">-1</span>] == <span class="string">"+"</span>):</div><div class="line">                    <span class="comment"># 由于函数返回值是一个数组，我们将结果全部遍历</span></div><div class="line">                    <span class="comment"># 进行操作之后，得到新的一组结果</span></div><div class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> self.subproblem(digits[:k], symbols[:k<span class="number">-1</span>]):</div><div class="line">                        <span class="keyword">for</span> j <span class="keyword">in</span> self.subproblem(digits[k:], symbols[k:]):</div><div class="line">                            result.append(i + j)</div><div class="line">                <span class="keyword">elif</span> (symbols[k<span class="number">-1</span>] == <span class="string">"-"</span>):</div><div class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> self.subproblem(digits[:k], symbols[:k<span class="number">-1</span>]):</div><div class="line">                        <span class="keyword">for</span> j <span class="keyword">in</span> self.subproblem(digits[k:], symbols[k:]):</div><div class="line">                            result.append(i - j)</div><div class="line">                <span class="keyword">elif</span> (symbols[k<span class="number">-1</span>] == <span class="string">"*"</span>):</div><div class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> self.subproblem(digits[:k], symbols[:k<span class="number">-1</span>]):</div><div class="line">                        <span class="keyword">for</span> j <span class="keyword">in</span> self.subproblem(digits[k:], symbols[k:]):</div><div class="line">                            result.append(i * j)</div><div class="line">                    </div><div class="line">            <span class="keyword">return</span> result</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Divide and Conquer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[476 Number Complement]]></title>
      <url>http://wf94.github.io/2017/03/08/476-Number-Complement/</url>
      <content type="html"><![CDATA[<p>Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.</p>
<p><strong>Note:</strong></p>
<ol>
<li>The given integer is guaranteed to fit within the range of a 32-bit signed integer.</li>
<li>You could assume no leading zero bit in the integer’s binary representation.</li>
</ol>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: 5</div><div class="line">Output: 2</div><div class="line">Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: 1</div><div class="line">Output: 0</div><div class="line">Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>题目要求我们找到一个数的补码，我们首先要知道这个数是几位的二进制数；接下来要给这个二进制数加上一个掩码（Mask）以保证得到的二进制数在给定的位数范围内。一个数的补码就是这个数的取反+1，因此很容易得到结果。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findComplement</span><span class="params">(self, num)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type num: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            digit = int(math.log(num,<span class="number">2</span>)) + <span class="number">1</span></div><div class="line">            mask = <span class="number">2</span> ** digit - <span class="number">1</span></div><div class="line">            comp = (-num<span class="number">-1</span>) &amp; mask</div><div class="line">            <span class="keyword">return</span> comp</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[475 Heaters]]></title>
      <url>http://wf94.github.io/2017/03/07/475-Heaters/</url>
      <content type="html"><![CDATA[<p>Winter is coming! Your first job during the contest is to design a standard heater with fixed warm radius to warm all the houses.</p>
<p>Now, you are given positions of houses and heaters on a horizontal line, find out minimum radius of heaters so that all houses could be covered by those heaters.</p>
<p>So, your input will be the positions of houses and heaters seperately, and your expected output will be the minimum radius standard of heaters.</p>
<p><strong>Note:</strong></p>
<ol>
<li>Numbers of houses and heaters you are given are non-negative and will not exceed 25000.</li>
<li>Positions of houses and heaters you are given are non-negative and will not exceed 10^9.</li>
<li>As long as a house is in the heaters’ warm radius range, it can be warmed.</li>
<li>All the heaters follow your radius standard and the warm radius will the same.</li>
</ol>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: [1,2,3],[2]</div><div class="line">Output: 1</div><div class="line">Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: [1,2,3,4],[1,4]</div><div class="line">Output: 1</div><div class="line">Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们如果利用暴力搜索的方法，会发现最终的结果是超时的。即便是用哈希表把访问过的差值储存起来也收效甚微。因为算法开销的大头已经是O(mn)了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findRadius</span><span class="params">(self, houses, heaters)</span>:</span></div><div class="line">        length = len(houses)</div><div class="line">        visited = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> heaters:</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> houses:</div><div class="line">                <span class="keyword">if</span> (visited.has_key(j)):</div><div class="line">                    <span class="keyword">if</span> (abs(i-j) &lt; visited[j]):</div><div class="line">                        visited[j] = abs(i-j)</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    visited[j] = abs(i-j)</div><div class="line">        </div><div class="line">        p = visited.values()</div><div class="line">        radius = max(p)</div><div class="line">        <span class="keyword">return</span> radius</div></pre></td></tr></table></figure>
<p>首先把heater和houses都进行排序。在heater头尾加上边界，并将houses作为标杆来进行迭代。</p>
<p>我们找到元素左右两边的heater，从而找到离这个元素最近的heater，并算出半径。</p>
<p>维护一个最小的半径，即可得到最后的结果。我们可以将复杂度从O(mn) 降低到 O(m+n)。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findRadius</span><span class="params">(self, houses, heaters)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type houses: List[int]</div><div class="line">        :type heaters: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        lenhou = len(houses)</div><div class="line">        lenhea = len(heaters)</div><div class="line">        houses.sort()</div><div class="line">        heaters.sort()</div><div class="line">        heaters = [-(<span class="number">10</span> ** <span class="number">12</span>)] + heaters + [<span class="number">10</span> ** <span class="number">12</span>]</div><div class="line">        </div><div class="line">        radius = <span class="number">0</span></div><div class="line">        lpos = <span class="number">0</span></div><div class="line">        rpos = <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> houses:</div><div class="line">            <span class="keyword">while</span> (rpos &lt;= lenhea):</div><div class="line">                <span class="keyword">if</span> (i &gt; heaters[rpos<span class="number">-1</span>] <span class="keyword">and</span> i &lt;= heaters[rpos]):</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    rpos += <span class="number">1</span></div><div class="line">            <span class="keyword">while</span> (lpos &lt; lenhea):</div><div class="line">                <span class="keyword">if</span> (i &lt; heaters[lpos+<span class="number">1</span>] <span class="keyword">and</span> i &gt;= heaters[lpos]):</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    lpos += <span class="number">1</span></div><div class="line">                </div><div class="line">            right = heaters[rpos]</div><div class="line">            left = heaters[lpos]</div><div class="line">                </div><div class="line">            tmp = min(right - i, i - left)</div><div class="line">            <span class="keyword">if</span> (tmp &gt; radius):</div><div class="line">                radius = tmp</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> radius</div></pre></td></tr></table></figure>
<p>对于这个题目还有一种更加普适的解法，详见这篇讨论。</p>
<p><a href="https://discuss.leetcode.com/topic/71813/more-challenging-problem-if-only-number-of-heaters-is-given-solution-and-details-comments-appreciated/3" target="_blank" rel="external">https://discuss.leetcode.com/topic/71813/more-challenging-problem-if-only-number-of-heaters-is-given-solution-and-details-comments-appreciated/3</a></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[463 Island Perimeter]]></title>
      <url>http://wf94.github.io/2017/03/06/463-Island-Perimeter/</url>
      <content type="html"><![CDATA[<p>You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water. Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn’t have “lakes” (water inside that isn’t connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don’t exceed 100. Determine the perimeter of the island.</p>
<p><strong>Example:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[[0,1,0,0],</div><div class="line"> [1,1,1,0],</div><div class="line"> [0,1,0,0],</div><div class="line"> [1,1,0,0]]</div><div class="line"></div><div class="line">Answer: 16</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>题目的意思是需要我们找到矩阵当中组成“岛屿”的周长。不难看出，岛屿的周长与岛屿的面积、岛屿孤立的格数有关。可以通过 result = island <em> 4 - neighbour </em> 2 来计算最终结果。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">islandPerimeter</span><span class="params">(self, grid)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type grid: List[List[int]]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        count = <span class="number">0</span></div><div class="line">        col = len(grid)</div><div class="line">        row = len(grid[<span class="number">0</span>])</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(col):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(row):</div><div class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>):</div><div class="line">                    <span class="comment">#如果这个点是岛屿的一部分</span></div><div class="line">                    <span class="comment">#对岛屿的周长情况进行判断</span></div><div class="line">                    <span class="keyword">if</span> (i == <span class="number">0</span>):</div><div class="line">                        count = count + <span class="number">1</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        <span class="comment">#如果这个点左边不再是岛屿</span></div><div class="line">                        <span class="keyword">if</span>(grid[i<span class="number">-1</span>][j] == <span class="number">0</span>):</div><div class="line">                            count = count + <span class="number">1</span></div><div class="line">                            </div><div class="line">                    <span class="keyword">if</span> (i == (col<span class="number">-1</span>)):</div><div class="line">                        count = count + <span class="number">1</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        <span class="comment">#如果这个点右边不再是岛屿</span></div><div class="line">                        <span class="keyword">if</span>(grid[i+<span class="number">1</span>][j] == <span class="number">0</span>):</div><div class="line">                            count = count + <span class="number">1</span></div><div class="line">                            </div><div class="line">                    <span class="keyword">if</span> (j == <span class="number">0</span>):</div><div class="line">                        count = count + <span class="number">1</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        <span class="keyword">if</span>(grid[i][j<span class="number">-1</span>] == <span class="number">0</span>):</div><div class="line">                            count = count + <span class="number">1</span></div><div class="line">                            </div><div class="line">                    <span class="keyword">if</span> (j == (row<span class="number">-1</span>)):</div><div class="line">                        count = count + <span class="number">1</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        <span class="keyword">if</span>(grid[i][j+<span class="number">1</span>] == <span class="number">0</span>):</div><div class="line">                            count = count + <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> count</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[462 Minimum Moves to Equal Array Elements II]]></title>
      <url>http://wf94.github.io/2017/03/06/462-Minimum-Moves-to-Equal-Array-Elements-II/</url>
      <content type="html"><![CDATA[<p>Given a <strong>non-empty</strong> integer array, find the minimum number of moves required to make all array elements equal, where a move is incrementing a selected element by 1 or decrementing a selected element by 1.</p>
<p>You may assume the array’s length is at most 10,000.</p>
<p><strong>Example:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">[1,2,3]</div><div class="line"></div><div class="line">Output:</div><div class="line">2</div><div class="line"></div><div class="line">Explanation:</div><div class="line">Only two moves are needed (remember each move increments or decrements one element):</div><div class="line"></div><div class="line">[1,2,3]  =&gt;  [2,2,3]  =&gt;  [2,2,2]</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>Note that the explanation below is a leetcode discussion solution, my solution is actually figured out by finding out specific pattern in the question.</p>
<p>Imagine the nums are sorted, and the final value is k, we start find k from the first element.</p>
<p>If we increase k, the elements &lt;= k will need move one step more, and the elements &gt; k will need to move one step less.</p>
<p>If there are more elements &gt; k than elements &lt;= k, we should increase k to minimize the moves.</p>
<p>So we just increase k, until k reach the median of of the nums array. By then, the number of elements &lt;= k equals to that of elements &gt; k. (There is a slight different when the number of array is odd, but it’s similar).</p>
<p>If we keep increasing k after k reach the median of the array, more numbers &gt;k than &lt;= k, and more moves needed, so we should stop.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minMoves2</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        nums.sort()</div><div class="line">        length = len(nums)</div><div class="line">        res  = <span class="number">0</span></div><div class="line">        mid = length / <span class="number">2</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</div><div class="line">            res += abs(nums[mid] - i)</div><div class="line">        <span class="keyword">return</span> res</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[216 Combination Sum III]]></title>
      <url>http://wf94.github.io/2017/03/06/216-Combination-Sum-III/</url>
      <content type="html"><![CDATA[<p>Find all possible combinations of <strong>k</strong> numbers that add up to a number <strong>n</strong>, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.</p>
<p><strong>Example 1:</strong></p>
<p>Input:  <strong>k</strong> = 3,  <strong>n</strong> = 7</p>
<p>Output: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[1,2,4]]</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<p>Input:  <strong>k</strong> = 3,  <strong>n</strong> = 9</p>
<p>Output: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[1,2,6], [1,3,5], [2,3,4]]</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>题目需要我们找到利用k个不重复数字相加，得到数字n的所有组合。</p>
<p>首先想到暴力搜索，思考一下，k取1-9之间，最多会有多少种情况？答案是k取4时，C(9, 4) = 126种。k取其它数值，情况数只会比126要少。</p>
<p>现在的关键问题就是给定k，我们需要知道从1-9中取k个数的所有组合，再根据题意筛选所需的组合即可。</p>
<p>此时我们还是可以利用回溯的方法，</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> copy</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum3</span><span class="params">(self, k, n)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type k: int</div><div class="line">        :type n: int</div><div class="line">        :rtype: List[List[int]]</div><div class="line">        """</div><div class="line">        self.digits = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</div><div class="line">        self.combs = []</div><div class="line">        self.len = <span class="number">9</span></div><div class="line">        result = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</div><div class="line">            result.append(<span class="number">0</span>)</div><div class="line">        self.comb(k, n, <span class="number">0</span>, <span class="number">0</span>, result)</div><div class="line">        <span class="keyword">return</span> self.combs</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">comb</span><span class="params">(self, k, n, curnum, curlen, result)</span>:</span></div><div class="line">        <span class="keyword">if</span> (curlen &gt;= k):</div><div class="line">            ans = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> result:</div><div class="line">                ans += i</div><div class="line">            <span class="keyword">if</span> (ans == n):</div><div class="line">                tmp = copy.copy(result)</div><div class="line">                self.combs.append(tmp)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> self.digits[curnum:]:</div><div class="line">                result[curlen] = i</div><div class="line">                self.comb(k, n, i, curlen + <span class="number">1</span>, result)</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>Python- itertools中组合数的实现：<br><a href="https://docs.python.org/2/library/itertools.html" target="_blank" rel="external">https://docs.python.org/2/library/itertools.html</a><br>组合问题的求解：<br><a href="http://wuchong.me/blog/2014/07/28/permutation-and-combination-realize/" target="_blank" rel="external">http://wuchong.me/blog/2014/07/28/permutation-and-combination-realize/</a><br>组合问题的求解：<br><a href="http://blog.csdn.net/zmazon/article/details/8315418" target="_blank" rel="external">http://blog.csdn.net/zmazon/article/details/8315418</a><br>LeetCode 77题 - Combination 解法大全：<br><a href="http://www.cnblogs.com/TenosDoIt/p/3461555.html" target="_blank" rel="external">http://www.cnblogs.com/TenosDoIt/p/3461555.html</a><br>排列组合算法：<br><a href="http://www.cnblogs.com/TenosDoIt/p/3695472.html" target="_blank" rel="external">http://www.cnblogs.com/TenosDoIt/p/3695472.html</a></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Array </tag>
            
            <tag> Backtracking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[022 Generate Parentheses]]></title>
      <url>http://wf94.github.io/2017/03/06/022-Generate-Parentheses/</url>
      <content type="html"><![CDATA[<p>Given <em>n</em> pairs of parentheses, write a function to generate all combinations of well-formed parentheses. </p>
<p>For example, given <em>n</em> = 3, a solution set is: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &quot;((()))&quot;,</div><div class="line">  &quot;(()())&quot;,</div><div class="line">  &quot;(())()&quot;,</div><div class="line">  &quot;()(())&quot;,</div><div class="line">  &quot;()()()&quot;</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>求取组合数，或是要求取给定条件的所有情况，可以利用回溯+递归的方法来解决。</p>
<p>在往下寻找每一种情况并回溯的时候，会由于条件所限，去除许多不必要的分支。所以算法实际的复杂度会比纯暴力搜索的方法降低许多。</p>
<ul>
<li>解释一下递归函数<code>trial(self, cur, tmp, tmpsum, trues, falses, n)</code>当中各个变量的含义：</li>
</ul>
<p><code>cur</code>: 当前需要加入临时数组的变量【 “(“ 或 “)” 】【True 或 False】</p>
<p><code>tmp</code>: 一个临时数组，存储递归到当前深度True/False的所有值。</p>
<p><code>tmpsum</code>: 递归当前深度数组的和 (True + True = 2， False + False = 0)【其实可以把这个变量删去，只用统计Trues和falses的值就好】</p>
<p><code>trues</code> / <code>falses</code>: 左括号和右括号的个数</p>
<ul>
<li>关键判断语句：</li>
</ul>
<p><code>if (tmpsum * 2 &lt; trues + falses):</code></p>
<p>或是</p>
<p><code>if (trues &lt; falses)</code></p>
<p>如果访问到当前元素，左括号的数目比右括号要少，即可判定为非法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> copy</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateParenthesis</span><span class="params">(self, n)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type n: int</div><div class="line">        :rtype: List[str]</div><div class="line">        """</div><div class="line">        <span class="comment"># True for '('</span></div><div class="line">        <span class="comment"># False for ')'</span></div><div class="line">        self.res = []</div><div class="line">        tmpsum = <span class="number">0</span></div><div class="line">        self.trial(<span class="keyword">True</span>, [], tmpsum, <span class="number">1</span>, <span class="number">0</span>, n)</div><div class="line">        <span class="keyword">return</span> self.res</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trial</span><span class="params">(self, cur, tmp, tmpsum, trues, falses, n)</span>:</span></div><div class="line">        tmp.append(cur)</div><div class="line">        tmpsum += cur</div><div class="line">        <span class="keyword">if</span> (tmpsum * <span class="number">2</span> &lt; trues + falses):</div><div class="line">            tmp = []</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">elif</span> (trues == n <span class="keyword">and</span> falses == n):</div><div class="line">            ans = []</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> tmp:</div><div class="line">                <span class="keyword">if</span> (i):</div><div class="line">                    ans.append(<span class="string">"("</span>)</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    ans.append(<span class="string">")"</span>)</div><div class="line">            self.res.append(<span class="string">""</span>.join(ans))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> (trues &lt; n):</div><div class="line">                cpy = copy.copy(tmp)</div><div class="line">                self.trial(<span class="keyword">True</span>, cpy, tmpsum, trues+<span class="number">1</span>, falses, n)</div><div class="line">            <span class="keyword">if</span> (falses &lt; n):</div><div class="line">                cpy = copy.copy(tmp)</div><div class="line">                self.trial(<span class="keyword">False</span>, cpy, tmpsum, trues, falses+<span class="number">1</span>, n)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> String </tag>
            
            <tag> Medium </tag>
            
            <tag> Backtracking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[012 Integer to Roman]]></title>
      <url>http://wf94.github.io/2017/03/06/012-Integer-to-Roman/</url>
      <content type="html"><![CDATA[<p>Given an integer, convert it to a roman numeral. </p>
<p>Input is guaranteed to be within the range from 1 to 3999.</p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这一题需要我们把一个1-3999的整数，转换成罗马数字。</p>
<p>注意罗马数字的组成规则即可。1000是M，900是CM，500是D，400是CD。跨位不受影响。</p>
<p>举例：</p>
<p>1999是 MCMXCIX –&gt; M/CM/XC/IX/</p>
<p>1876是 MDCCCLXXVI –&gt; M/DCCC/LXX/VI/</p>
<p>罗马数字简直反人类，活该外国小朋友学不好数学哈哈哈哈哈</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span><span class="params">(self, num)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type num: int</div><div class="line">        :rtype: str</div><div class="line">        """</div><div class="line">        basics = [<span class="string">"I"</span>,<span class="string">"II"</span>,<span class="string">"III"</span>,<span class="string">"IV"</span>,<span class="string">"V"</span>,<span class="string">"VI"</span>,<span class="string">"VII"</span>,<span class="string">"VIII"</span>,<span class="string">"IX"</span>]</div><div class="line">        res = <span class="string">""</span></div><div class="line">        m = num / <span class="number">1000</span></div><div class="line">        <span class="keyword">if</span> (m &gt; <span class="number">0</span>):</div><div class="line">            num = num - <span class="number">1000</span> * m</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</div><div class="line">                res += <span class="string">"M"</span></div><div class="line">            </div><div class="line">        <span class="keyword">if</span> (num &gt;= <span class="number">900</span>):</div><div class="line">            res += <span class="string">"CM"</span></div><div class="line">            num = num - <span class="number">900</span></div><div class="line">        <span class="keyword">elif</span> (num &lt; <span class="number">900</span> <span class="keyword">and</span> num &gt;= <span class="number">500</span>):</div><div class="line">            res += <span class="string">"D"</span></div><div class="line">            num = num - <span class="number">500</span></div><div class="line">        <span class="keyword">elif</span> (num &gt;= <span class="number">400</span> <span class="keyword">and</span> num &lt; <span class="number">500</span>):</div><div class="line">            res += <span class="string">"CD"</span></div><div class="line">            num = num - <span class="number">400</span></div><div class="line">        </div><div class="line">        c = num / <span class="number">100</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> ( c &gt; <span class="number">0</span> ):</div><div class="line">            num = num - <span class="number">100</span> * c</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(c):</div><div class="line">                res += <span class="string">"C"</span></div><div class="line">                </div><div class="line">        <span class="keyword">if</span> (num &gt;= <span class="number">90</span>):</div><div class="line">            res += <span class="string">"XC"</span></div><div class="line">            num = num - <span class="number">90</span></div><div class="line">        <span class="keyword">elif</span> (num &lt; <span class="number">90</span> <span class="keyword">and</span> num &gt;= <span class="number">50</span>):</div><div class="line">            res += <span class="string">"L"</span></div><div class="line">            num = num - <span class="number">50</span></div><div class="line">        <span class="keyword">elif</span> (num &gt;= <span class="number">40</span> <span class="keyword">and</span> num &lt; <span class="number">50</span>):</div><div class="line">            res += <span class="string">"XL"</span></div><div class="line">            num = num - <span class="number">40</span></div><div class="line">        </div><div class="line">        x = num / <span class="number">10</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> ( x &gt; <span class="number">0</span> ):</div><div class="line">            num = num - <span class="number">10</span> * x</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(x):</div><div class="line">                res += <span class="string">"X"</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (num &gt; <span class="number">0</span>):</div><div class="line">            res += basics[num<span class="number">-1</span>]</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> String </tag>
            
            <tag> Medium </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[461 Hamming Distance]]></title>
      <url>http://wf94.github.io/2017/03/05/461-Hamming-Distance/</url>
      <content type="html"><![CDATA[<p>The <a href="https://en.wikipedia.org/wiki/Hamming_distance" target="_blank" rel="external">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.</p>
<p>Given two integers <code>x</code> and <code>y</code>, calculate the Hamming distance.</p>
<p><strong>Note:</strong><br> 0 ≤ <code>x</code>, <code>y</code> &lt; 231. </p>
<p><strong>Example:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Input: x = 1, y = 4</div><div class="line"></div><div class="line">Output: 2</div><div class="line"></div><div class="line">Explanation:</div><div class="line">1   (0 0 0 1)</div><div class="line">4   (0 1 0 0)</div><div class="line">       ↑   ↑</div><div class="line"></div><div class="line">The above arrows point to positions where the corresponding bits are different.</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题是非常简单的。把两个数按位异或，统计结果中bit当中1的个数即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hammingDistance</span><span class="params">(self, x, y)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type x: int</div><div class="line">        :type y: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        result = x^y</div><div class="line">        i = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span>(result):</div><div class="line">            <span class="keyword">if</span> (result % <span class="number">2</span> == <span class="number">1</span>):</div><div class="line">                i = i + <span class="number">1</span></div><div class="line">            result = result / <span class="number">2</span></div><div class="line">        <span class="keyword">return</span> i</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[459 Repeated Substring Pattern]]></title>
      <url>http://wf94.github.io/2017/03/05/459-Repeated-Substring-Pattern/</url>
      <content type="html"><![CDATA[<p>Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.  You may assume the given string consists of lowercase English letters only and its length  will not exceed 10000.  </p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: &quot;abab&quot;</div><div class="line"></div><div class="line">Output: True</div><div class="line"></div><div class="line">Explanation: It&apos;s the substring &quot;ab&quot; twice.</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: &quot;aba&quot;</div><div class="line"></div><div class="line">Output: False</div></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: &quot;abcabcabcabc&quot;</div><div class="line"></div><div class="line">Output: True</div><div class="line"></div><div class="line">Explanation: It&apos;s the substring &quot;abc&quot; four times. (And the substring &quot;abcabc&quot; twice.)</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>需要注意，不能利用string里面元素出现的个数来进行判断。比如说对于“abba”这样的情况，统计元素出现个数是不恰当的。</p>
<p>还是采用最直接的方法，首先判断子数组的长度能不能被整体数组的长度整除；接下来判断这个子数组是否符合题意，由此得到结果。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeatedSubstringPattern</span><span class="params">(self, str)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type str: str</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        length = len(str)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,length+<span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> (length % i == <span class="number">0</span>):</div><div class="line">                iter = length / i</div><div class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,iter):</div><div class="line">                    <span class="keyword">if</span> (str[<span class="number">0</span>:i] != str[(i*j):(i*(j+<span class="number">1</span>))]):</div><div class="line">                        <span class="keyword">break</span></div><div class="line">                    <span class="keyword">if</span> (j == iter<span class="number">-1</span>):</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> String </tag>
            
            <tag> Easy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[455 Assign Cookies]]></title>
      <url>http://wf94.github.io/2017/03/04/455-Assign-Cookies/</url>
      <content type="html"><![CDATA[<p>Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor gi, which is the minimum size of a cookie that the child will be content with; and each cookie j has a size sj. If sj &gt;= gi, we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number. </p>
<p><strong>Note:</strong><br> You may assume the greed factor is always positive.<br> You cannot assign more than one cookie to one child. </p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Input: [1,2,3], [1,1]</div><div class="line"></div><div class="line">Output: 1</div><div class="line"></div><div class="line">Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. </div><div class="line">And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.</div><div class="line">You need to output 1.</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Input: [1,2], [1,2,3]</div><div class="line"></div><div class="line">Output: 2</div><div class="line"></div><div class="line">Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. </div><div class="line">You have 3 cookies and their sizes are big enough to gratify all of the children, </div><div class="line">You need to output 2.</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>将饼干数组和小朋友数组都进行一次排序。两个指针分别指向饼干和小朋友里面的元素。如果当前饼干可以满足当前的小朋友，指针分别向后移动一位。通过这样的方法，我们可以得到最终的结果。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findContentChildren</span><span class="params">(self, g, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type g: List[int]</div><div class="line">        :type s: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        g.sort()</div><div class="line">        s.sort()</div><div class="line">        glen = len(g)</div><div class="line">        res = <span class="number">0</span></div><div class="line">        i = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> s:</div><div class="line">            <span class="keyword">if</span> (i == glen):</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">if</span> (k &gt;= g[i]):</div><div class="line">                res = res + <span class="number">1</span></div><div class="line">                i = i + <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> res</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Greedy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[454 4Sum II]]></title>
      <url>http://wf94.github.io/2017/03/03/454-4Sum-II/</url>
      <content type="html"><![CDATA[<p>Given four lists A, B, C, D of integer values, compute how many tuples <code>(i, j, k, l)</code> there are such that <code>A[i] + B[j] + C[k] + D[l]</code> is zero.</p>
<p>To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.</p>
<p><strong>Example:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">A = [ 1, 2]</div><div class="line">B = [-2,-1]</div><div class="line">C = [-1, 2]</div><div class="line">D = [ 0, 2]</div><div class="line"></div><div class="line">Output:</div><div class="line">2</div><div class="line"></div><div class="line">Explanation:</div><div class="line">The two tuples are:</div><div class="line">1. (0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0</div><div class="line">2. (1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>由于结果不能重复，我们就以空间换时间，经历多层哈希表得到最终的结果。</p>
<p>把数组A、B、C、D里面的数字出现频率统计一番，接下来把A+B，C+D当中出现过的数字也进行统计。最后遍历统计后的AB, CD两个哈希表，得到结果。</p>
<p>时间复杂度由naive的O(n^4) 降低到最好情况为O(1), 平均下来应也有O(n^2)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fourSumCount</span><span class="params">(self, A, B, C, D)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type A: List[int]</div><div class="line">        :type B: List[int]</div><div class="line">        :type C: List[int]</div><div class="line">        :type D: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        countA = &#123;&#125;</div><div class="line">        countB = &#123;&#125;</div><div class="line">        countC = &#123;&#125;</div><div class="line">        countD = &#123;&#125;</div><div class="line">        ans = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> A:</div><div class="line">            <span class="keyword">if</span> (countA.has_key(i)):</div><div class="line">                countA[i] += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                countA[i] = <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> B:</div><div class="line">            <span class="keyword">if</span> (countB.has_key(i)):</div><div class="line">                countB[i] += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                countB[i] = <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> C:</div><div class="line">            <span class="keyword">if</span> (countC.has_key(i)):</div><div class="line">                countC[i] += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                countC[i] = <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> D:</div><div class="line">            <span class="keyword">if</span> (countD.has_key(i)):</div><div class="line">                countD[i] += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                countD[i] = <span class="number">1</span></div><div class="line">        </div><div class="line">        countAB = &#123;&#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> countA.keys():</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> countB.keys():</div><div class="line">                <span class="keyword">if</span> (countAB.has_key(i+j)):</div><div class="line">                    countAB[i+j] += countA[i] * countB[j]</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    countAB[i+j] = countA[i] * countB[j]</div><div class="line"></div><div class="line">        countCD = &#123;&#125;</div><div class="line">                </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> countC.keys():</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> countD.keys():</div><div class="line">                <span class="keyword">if</span> (countCD.has_key(i+j)):</div><div class="line">                    countCD[i+j] += countC[i] * countD[j]</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    countCD[i+j] = countC[i] * countD[j]</div><div class="line">                    </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> countAB.keys():</div><div class="line">            <span class="keyword">if</span> countCD.has_key(-i):</div><div class="line">                ans += countAB[i] * countCD[-i]</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
<p>实际上直接这样就可以AC了……<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fourSumCount</span><span class="params">(self, A, B, C, D)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type A: List[int]</div><div class="line">        :type B: List[int]</div><div class="line">        :type C: List[int]</div><div class="line">        :type D: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line"></div><div class="line">        ans = <span class="number">0</span></div><div class="line"></div><div class="line">        </div><div class="line">        countAB = &#123;&#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> A:</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> B:</div><div class="line">                <span class="keyword">if</span> (countAB.has_key(i+j)):</div><div class="line">                    countAB[i+j] += <span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    countAB[i+j] = <span class="number">1</span></div><div class="line"></div><div class="line">        countCD = &#123;&#125;</div><div class="line">                </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> C:</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> D:</div><div class="line">                <span class="keyword">if</span> (countCD.has_key(i+j)):</div><div class="line">                    countCD[i+j] += <span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    countCD[i+j] = <span class="number">1</span></div><div class="line">                    </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> countAB.keys():</div><div class="line">            <span class="keyword">if</span> countCD.has_key(-i):</div><div class="line">                ans += countAB[i] * countCD[-i]</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Hash Table </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[453 Minimum Moves to Equal Array Elements]]></title>
      <url>http://wf94.github.io/2017/03/02/453-Minimum-Moves-to-Equal-Array-Elements/</url>
      <content type="html"><![CDATA[<p>Given a <strong>non-empty</strong> integer array of size <em>n</em>, find the minimum number of moves required to make all array elements equal, where a move is incrementing <em>n</em> - 1 elements by 1.</p>
<p><strong>Example:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">[1,2,3]</div><div class="line"></div><div class="line">Output:</div><div class="line">3</div><div class="line"></div><div class="line">Explanation:</div><div class="line">Only three moves are needed (remember each move increments two elements):</div><div class="line"></div><div class="line">[1,2,3]  =&gt;  [2,3,3]  =&gt;  [3,4,3]  =&gt;  [4,4,4]</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>将问题简化成最简单的两种元素的情况。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minMoves</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        <span class="comment">#Decrease the problem into only two elements.</span></div><div class="line">        <span class="comment">#Find the required steps are (maxelement-minelement)</span></div><div class="line">        <span class="comment">#Then add up to three elements, add up and make the minimum element</span></div><div class="line">        <span class="comment">#equal to the maximum element, then the problem decrease to the 2-element problem</span></div><div class="line">        nums.sort()</div><div class="line">        length = len(nums)</div><div class="line">        result = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</div><div class="line">            result += nums[i] - nums[<span class="number">0</span>]</div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
            <tag> Easy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[452 Minimum Number of Arrows to Burst Balloons]]></title>
      <url>http://wf94.github.io/2017/03/01/452-Minimum-Number-of-Arrows-to-Burst-Balloons/</url>
      <content type="html"><![CDATA[<p>There are a number of spherical balloons spread in two-dimensional space. For each balloon, provided input is the start and end coordinates of the horizontal diameter. Since it’s horizontal, y-coordinates don’t matter and hence the x-coordinates of start and end of the diameter suffice. Start is always smaller than end. There will be at most 104 balloons.</p>
<p>An arrow can be shot up exactly vertically from different points along the x-axis. A balloon with xstart and xend bursts by an arrow shot at x if xstart ≤ x ≤ xend. There is no limit to the number of arrows that can be shot. An arrow once shot keeps travelling up infinitely. The problem is to find the minimum number of arrows that must be shot to burst all balloons. </p>
<p><strong>Example:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">[[10,16], [2,8], [1,6], [7,12]]</div><div class="line"></div><div class="line">Output:</div><div class="line">2</div><div class="line"></div><div class="line">Explanation:</div><div class="line">One way is to shoot one arrow for example at x = 6 (bursting the balloons [2,8] and [1,6]) and another arrow at x = 11 (bursting the other two balloons).</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>将气球排序，维护一个指向当前气球最小结束值的指针。当一个气球的起始值大于该最小结束值，将该气球置为当前气球。然后将之前的气球戳爆！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMinArrowShots</span><span class="params">(self, points)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type points: List[List[int]]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        points.sort()</div><div class="line">        low = <span class="number">0</span></div><div class="line">        high = <span class="number">0</span></div><div class="line">        count = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> (points):</div><div class="line">            low = points[<span class="number">0</span>][<span class="number">0</span>]</div><div class="line">            high = points[<span class="number">0</span>][<span class="number">1</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> point <span class="keyword">in</span> points:</div><div class="line">            <span class="keyword">if</span> (point[<span class="number">0</span>] &gt; high):</div><div class="line">                count += <span class="number">1</span></div><div class="line">                low = point[<span class="number">0</span>]</div><div class="line">                high = point[<span class="number">1</span>]</div><div class="line">            </div><div class="line">            <span class="keyword">elif</span> (point[<span class="number">1</span>] &lt; high <span class="keyword">and</span> point[<span class="number">0</span>] &gt; low):</div><div class="line">                high = point[<span class="number">1</span>]</div><div class="line">        <span class="keyword">return</span> count+<span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>参考资料和测试用例：</p>
<p>[[3,9],[7,12],[3,8],[6,8],[9,10],[2,9],[0,9],[3,9],[0,6],[2,8]]<br>[[9,12],[1,10],[4,11],[8,12],[3,9],[6,9],[6,7]]<br><a href="https://discuss.leetcode.com/topic/72901/a-concise-template-for-overlapping-interval-problem" target="_blank" rel="external">https://discuss.leetcode.com/topic/72901/a-concise-template-for-overlapping-interval-problem</a></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Greedy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[451 Sort Characters By Frequency]]></title>
      <url>http://wf94.github.io/2017/02/28/451-Sort-Characters-By-Frequency/</url>
      <content type="html"><![CDATA[<p>Given a string, sort it in decreasing order based on the frequency of characters.</p>
<p><strong>Example 1:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">&quot;tree&quot;</div><div class="line"></div><div class="line">Output:</div><div class="line">&quot;eert&quot;</div><div class="line"></div><div class="line">Explanation:</div><div class="line">&apos;e&apos; appears twice while &apos;r&apos; and &apos;t&apos; both appear once.</div><div class="line">So &apos;e&apos; must appear before both &apos;r&apos; and &apos;t&apos;. Therefore &quot;eetr&quot; is also a valid answer.</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">&quot;cccaaa&quot;</div><div class="line"></div><div class="line">Output:</div><div class="line">&quot;cccaaa&quot;</div><div class="line"></div><div class="line">Explanation:</div><div class="line">Both &apos;c&apos; and &apos;a&apos; appear three times, so &quot;aaaccc&quot; is also a valid answer.</div><div class="line">Note that &quot;cacaca&quot; is incorrect, as the same characters must be together.</div></pre></td></tr></table></figure>
<p><strong>Example 3:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">&quot;Aabb&quot;</div><div class="line"></div><div class="line">Output:</div><div class="line">&quot;bbAa&quot;</div><div class="line"></div><div class="line">Explanation:</div><div class="line">&quot;bbaA&quot; is also a valid answer, but &quot;Aabb&quot; is incorrect.</div><div class="line">Note that &apos;A&apos; and &apos;a&apos; are treated as two different characters.</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>思路其实比较明确，可以利用哈希表对字母出现的次数进行统计。然后对于统计的结果进行排序即可。</p>
<p>也可以利用桶排序（基数排序）进行排序，效果同样不错。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">frequencySort</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :rtype: str</div><div class="line">        """</div><div class="line">        m = &#123;&#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</div><div class="line">            <span class="keyword">if</span> (m.has_key(i)):</div><div class="line">                m[i] += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                m[i] = <span class="number">1</span></div><div class="line">        </div><div class="line">        a = sorted(m, key=m.get, reverse = <span class="keyword">True</span>)</div><div class="line">        b = sorted(m.values(), reverse = <span class="keyword">True</span>)</div><div class="line">        </div><div class="line">        result = []</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i, enum <span class="keyword">in</span> enumerate(a):</div><div class="line">            count = b[i]</div><div class="line">            <span class="keyword">while</span>(count):</div><div class="line">                result.append(enum)</div><div class="line">                count -= <span class="number">1</span></div><div class="line">            </div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(result)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Hash Table </tag>
            
            <tag> Heap </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用Docker配置基础Caffe环境]]></title>
      <url>http://wf94.github.io/2017/02/28/Playing-with-Docker-Caffe/</url>
      <content type="html"><![CDATA[<p><del>闲来无事【划掉！！！】</del>，我听闻Caffe在配置起来超级麻烦，又是编译有问题，又是依赖解决不了，十分棘手。我马上联想起了方便轻量的Docker。为何不利用Docker在自己的笔记本电脑上搭建Caffe来玩玩呢？</p>
<a id="more"></a>
<ul>
<li><p><strong>第一步，配置Docker For Windows</strong></p>
<p>首先我们需要配置好属于自己的轻量级虚拟化环境！</p>
<p>在Docker官网上下载属于自己系统的版本，<a href="https://www.docker.com/products/overview" target="_blank" rel="external">https://www.docker.com/products/overview</a></p>
<p>我的系统是Windows 10 Professional，Docker For Windows正好适合我。如果是Windows 10之前的版本，需要下载Docker Toolbox来安装Docker环境。</p>
<p>在这里插一句嘴说一下Docker Toolbox，它里面集成了一个叫<a href="https://www.docker.com/products/docker-kitematic" target="_blank" rel="external">Kitematic</a>的图形化管理界面，界面很友好。如果不想用命令行来操作Docker，可以用这个玩意儿来管理，效果是一样的。</p>
<p>下载并安装好Docker后，如果你的Hyper-V功能没有开启，Docker会自动帮你开启，并立即重启电脑。Docker For Windows利用了Hyper-V来承载Docker Engine，如果Docker遇到了卡死等重大问题，<del>可以把Hyper-V和下面的镜像卸载重装【大误】</del>……可以在Hyper-V管理器上查看MobyLinuxVM的状态，来确定问题的来源。</p>
<p>个人感觉Docker For Windows不是很稳定，有时候确实需要重启Docker/Hyper-V来解决一部分问题。</p>
</li>
<li><p><strong>第二步，安装Caffe的Docker镜像</strong></p>
<p>根据官方给出的教程，<a href="https://github.com/BVLC/caffe/tree/master/docker" target="_blank" rel="external">https://github.com/BVLC/caffe/tree/master/docker</a></p>
<p>执行以下命令就可以下载并安装对应版本的Docker镜像啦。</p>
<p>CPU 版本可以利用以下命令安装:</p>
<p><code>docker run -ti bvlc/caffe:cpu caffe --version</code></p>
<p>GPU 版本需要CUDA 8.0和相应驱动的支持，还需要配置好<a href="https://github.com/NVIDIA/nvidia-docker" target="_blank" rel="external">nvidia-docker</a></p>
<p><code>nvidia-docker run -ti bvlc/caffe:gpu caffe --version</code></p>
<p>忽略libdc1394的相关错误即可。</p>
<p>我安装的是CPU版本，下载镜像和安装比较快，大概需要20分钟左右。下载的时候网络一定要稳定，不然下到一半会卡死，再也走不动。</p>
</li>
<li><p><strong>第三步，熟悉Docker的相关命令</strong></p>
<p>查看（所有的）镜像：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker ps</div><div class="line">docker ps -a</div></pre></td></tr></table></figure>
<p>创建一个基于bash命令行的，新的Caffe容器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -ti bvlc/caffe:cpu</div></pre></td></tr></table></figure>
<p>创建一个ipython命令行的，新的Caffe容器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -ti bvlc/caffe:cpu ipython</div></pre></td></tr></table></figure>
<p>启动一个已有的容器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker start [CONTAINER ID/CONTAINER NAME]</div></pre></td></tr></table></figure>
<p>进入一个正在运行中的容器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker attach [CONTAINER ID/CONTAINER NAME]</div></pre></td></tr></table></figure>
<p>删除一个容器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rm [CONTAINER ID/CONTAINER NAME]</div></pre></td></tr></table></figure>
<p>重命名一个容器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rename [CONTAINER NAME] [NEWNAME]</div></pre></td></tr></table></figure>
<p>我们应当先利用<code>docker run</code>命令创建一个自己喜欢的Caffe容器，创建好了之后，我们就已经直接来到这个容器内部了。Caffe在这个时候已经配置好了。</p>
<p>可以在Python命令行当中导入Caffe包，以验证环境配置的有效性。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import caffe</div></pre></td></tr></table></figure>
</li>
<li><p><strong>第四步，测试一个简单的LeNet网络</strong></p>
<p>参考官方文档，来测试一下这个环境是不是真的配置好了。</p>
<p><a href="http://caffe.berkeleyvision.org/gathered/examples/mnist.html" target="_blank" rel="external">http://caffe.berkeleyvision.org/gathered/examples/mnist.html</a></p>
<p>首先运行以下命令，从网上把mnist的相关训练数据和测试数据下载下来，然后将数据格式进行转换。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd $CAFFE_ROOT</div><div class="line">./data/mnist/get_mnist.sh</div><div class="line">./examples/mnist/create_mnist.sh</div></pre></td></tr></table></figure>
<p>容器里面应该是有<code>wget</code>命令的，如果没有，可以用<code>apt-get</code>命令自行解决一下shell脚本的依赖。</p>
<p>卷积神经网络的具体实现，都已经写好了放在示例文件夹当中了。具体路径是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$CAFFE_ROOT/examples/mnist/*.prototxt</div></pre></td></tr></table></figure>
<p>如果只用CPU来跑的话，需要修改<code>lenet_solver.prototxt</code>，将<code>solver_mode</code>从<code>GPU</code>改成<code>CPU</code>。当然，在文件里还可以修改迭代次数等参数，在此按下不表。</p>
<p>当然啦，想要修改文件，得先下载vim……因为我们这个轻量级的容器肯定是不会预装vim的【好理直气壮】</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get update</div><div class="line">apt-get install vim</div></pre></td></tr></table></figure>
<p>最后跑一下脚本，卷积神经网络的识别结果就出来啦！迭代10000次，最后的准确率达到了0.991</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd $CAFFE_ROOT</div><div class="line">./examples/mnist/train_lenet.sh</div></pre></td></tr></table></figure>
</li>
</ul>
<p>好玩不！我觉得挺好玩的！然后就这样玩了两个下午……上课的视频还没看，实习的简历还没投，让我去面壁思过一下【捂脸】</p>
]]></content>
      
        <categories>
            
            <category> Tech </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[449 Serialize and Deserialize BST]]></title>
      <url>http://wf94.github.io/2017/02/27/449-Serialize-and-Deserialize-BST/</url>
      <content type="html"><![CDATA[<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. </p>
<p>Design an algorithm to serialize and deserialize a <strong>binary search tree</strong>. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>
<p><strong>The encoded string should be as compact as possible.</strong> </p>
<p><strong>Note:</strong> Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless. </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用先序遍历和中序遍历来重建树。因为BST自带中序遍历，所以我们只需要生成一个先序遍历的字符串，传给下一个函数即可。</p>
<p>先根序遍历是先访问根，再递归访问左右子节点。所以先根序遍历的第一项一定是根节点。我们又可以知道BST的中根序遍历的情况，于是我们就知道了中根序遍历当中，根节点左边的部分是左子树，右边的部分是右子树，就又可以递归地重建树结构了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for a binary tree node.</span></div><div class="line"><span class="comment"># class TreeNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.left = None</span></div><div class="line"><span class="comment">#         self.right = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Codec</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize</span><span class="params">(self, root)</span>:</span></div><div class="line">        <span class="string">"""Encodes a tree to a single string.</span></div><div class="line">        </div><div class="line">        :type root: TreeNode</div><div class="line">        :rtype: str</div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> <span class="string">" "</span>.join(str(i) <span class="keyword">for</span> i <span class="keyword">in</span> self.preorder(root))</div><div class="line">        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize</span><span class="params">(self, data)</span>:</span></div><div class="line">        <span class="string">"""Decodes your encoded data to tree.</span></div><div class="line">        </div><div class="line">        :type data: str</div><div class="line">        :rtype: TreeNode</div><div class="line">        """</div><div class="line">        prenodes = []</div><div class="line">        <span class="keyword">if</span> (data):</div><div class="line">            prenodes = map(int, data.split())</div><div class="line">        innodes = sorted(prenodes)</div><div class="line">        self.length = len(prenodes)</div><div class="line">        <span class="keyword">return</span> self.reconstruct(prenodes, innodes)</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorder</span><span class="params">(self, root)</span>:</span></div><div class="line">        res = []</div><div class="line">        <span class="keyword">if</span> (root):</div><div class="line">            res.append(root.val)</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> self.preorder(root.left):</div><div class="line">                res.append(i)</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> self.preorder(root.right):</div><div class="line">                res.append(i)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reconstruct</span><span class="params">(self, prenodes, innodes)</span>:</span></div><div class="line">        <span class="comment">#print prenodes, innodes, </span></div><div class="line">        <span class="keyword">if</span> (prenodes):</div><div class="line">            root = prenodes[<span class="number">0</span>]</div><div class="line">            div = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> i, node <span class="keyword">in</span> enumerate(innodes):</div><div class="line">                <span class="keyword">if</span> (root == node):</div><div class="line">                    div = i</div><div class="line">            <span class="comment">#print div</span></div><div class="line">            cur = TreeNode(root)</div><div class="line">            cur.left = self.reconstruct(prenodes[<span class="number">1</span>:div+<span class="number">1</span>], innodes[:div])</div><div class="line">            cur.right = self.reconstruct(prenodes[div+<span class="number">1</span>:], innodes[div+<span class="number">1</span>:])</div><div class="line">            </div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            cur = <span class="keyword">None</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> cur</div><div class="line">        </div><div class="line"></div><div class="line"><span class="comment"># Your Codec object will be instantiated and called as such:</span></div><div class="line"><span class="comment"># codec = Codec()</span></div><div class="line"><span class="comment"># codec.deserialize(codec.serialize(root))</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[448 Find All Numbers Disappeared in an Array]]></title>
      <url>http://wf94.github.io/2017/02/26/448-Find-All-Numbers-Disappeared-in-an-Array/</url>
      <content type="html"><![CDATA[<p>Given an array of integers where 1 ≤ a[i] ≤ <em>n</em> (<em>n</em> = size of array), some elements appear twice and others appear once.</p>
<p>Find all the elements of [1, <em>n</em>] inclusive that do not appear in this array.</p>
<p>Could you do it without extra space and in O(<em>n</em>) runtime? You may assume the returned list does not count as extra space.</p>
<p><strong>Example:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">[4,3,2,7,8,2,3,1]</div><div class="line"></div><div class="line">Output:</div><div class="line">[5,6]</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用Python的set来解决问题。<br>实际上可以利用标记的方法来解决：<br>步骤：<br>[4,3,2,2] -&gt; [4,3,2,-2]<br>[4,3,2,-2] -&gt; [4,3,-2,-2]<br>[4,3,-2,-2] -&gt; [4,-3,-2,-2]<br>此时标记完成，只有第一个元素没有被标记成为负数。<br>再找非负的元素，就是对应的没出现的元素了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findDisappearedNumbers</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        numset = set(nums)</div><div class="line">        length = len(nums)</div><div class="line">        result = []</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,length+<span class="number">1</span>):</div><div class="line">            result.append(i)</div><div class="line">        </div><div class="line">        resultset = set(result)</div><div class="line">        final = resultset - numset</div><div class="line">        result = list(final)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[447 Number of Boomerangs]]></title>
      <url>http://wf94.github.io/2017/02/25/447-Number-of-Boomerangs/</url>
      <content type="html"><![CDATA[<p>Given <em>n</em> points in the plane that are all pairwise distinct, a “boomerang” is a tuple of points <code>(i, j, k)</code> such that the distance between <code>i</code> and <code>j</code> equals the distance between <code>i</code> and <code>k</code> (<strong>the order of the tuple matters</strong>).</p>
<p>Find the number of boomerangs. You may assume that <em>n</em> will be at most <strong>500</strong> and coordinates of points are all in the range <strong>[-10000, 10000]</strong> (inclusive).</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">[[0,0],[1,0],[2,0]]</div><div class="line"></div><div class="line">Output:</div><div class="line">2</div><div class="line"></div><div class="line">Explanation:</div><div class="line">The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们求解最简单的欧氏距离，进行n^2次的遍历，将各个点之间的距离存到哈希表当中。如果哈希表的距离统计值超过2，就需要进行计算，得出最终的结果。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numberOfBoomerangs</span><span class="params">(self, points)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type points: List[List[int]]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        length = len(points)</div><div class="line">        res = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            distlist = []</div><div class="line">            stats = &#123;&#125;</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(length):</div><div class="line">                <span class="keyword">if</span> (i != j):</div><div class="line">                    dist = (points[i][<span class="number">0</span>] - points[j][<span class="number">0</span>]) * (points[i][<span class="number">0</span>] - points[j][<span class="number">0</span>]) + (points[i][<span class="number">1</span>] - points[j][<span class="number">1</span>]) * (points[i][<span class="number">1</span>] - points[j][<span class="number">1</span>])</div><div class="line">                    distlist.append(dist)</div><div class="line">            <span class="comment"># Program optimization: Do not use the 'count' function,</span></div><div class="line">            <span class="comment"># Using Hashtable is much better, since the cost for "count" function is o(n).</span></div><div class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> distlist:</div><div class="line">                <span class="keyword">if</span> k <span class="keyword">in</span> stats:</div><div class="line">                    stats[k] += <span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    stats[k] = <span class="number">1</span></div><div class="line">            <span class="comment"># Count the final number of boomerangs</span></div><div class="line">            <span class="comment"># The number forms an arithmetic sequence.</span></div><div class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> stats.values():</div><div class="line">                <span class="keyword">if</span> (m == <span class="number">2</span>):</div><div class="line">                    res += m</div><div class="line">                <span class="keyword">elif</span> (m &gt; <span class="number">2</span>):</div><div class="line">                    res += (m * (m<span class="number">-1</span>))</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    res = res</div><div class="line">        <span class="keyword">return</span> res</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[445 Add Two Numbers II]]></title>
      <url>http://wf94.github.io/2017/02/24/445-Add-Two-Numbers-II/</url>
      <content type="html"><![CDATA[<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>
<p><strong>Follow up:</strong><br> What if you cannot modify the input lists? In other words, reversing the lists is not allowed. </p>
<p><strong>Example:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: (7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</div><div class="line">Output: 7 -&gt; 8 -&gt; 0 -&gt; 7</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题目可以采用简单的链表操作来搞定。题目说要求不能反转链表，这样无形中就会增加我们算法的复杂度。</p>
<p>我们采用竖式加法运算操作，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  7 2 4 3</div><div class="line">+   5 6 4</div><div class="line">= 7 8 0 7</div></pre></td></tr></table></figure></p>
<p>我们首先可以遍历一遍得到链表的长度。再进行O(n^2)的操作，多次遍历单链表，从个位开始，从后往前进行加法运算。注意进位即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for singly-linked list.</span></div><div class="line"><span class="comment"># class ListNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.next = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1, l2)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type l1: ListNode</div><div class="line">        :type l2: ListNode</div><div class="line">        :rtype: ListNode</div><div class="line">        """</div><div class="line">        length1 = <span class="number">0</span></div><div class="line">        length2 = <span class="number">0</span></div><div class="line">        l1cur = l1</div><div class="line">        l2cur = l2</div><div class="line">        <span class="keyword">while</span>(l1cur.next):</div><div class="line">            length1 += <span class="number">1</span></div><div class="line">            l1cur = l1cur.next</div><div class="line">        <span class="keyword">while</span>(l2cur.next):</div><div class="line">            length2 += <span class="number">1</span></div><div class="line">            l2cur = l2cur.next</div><div class="line">        </div><div class="line">        res = []</div><div class="line">        carry = <span class="number">0</span></div><div class="line">        l1val = l1cur.val</div><div class="line">        l2val = l2cur.val</div><div class="line">        <span class="keyword">while</span>(length1 &gt;= <span class="number">0</span> <span class="keyword">or</span> length2 &gt;= <span class="number">0</span>):</div><div class="line">            tmpsum = l1val + l2val + carry</div><div class="line">            <span class="keyword">if</span> tmpsum &gt;= <span class="number">10</span>:</div><div class="line">                tmpsum = tmpsum - <span class="number">10</span></div><div class="line">                carry = <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                carry = <span class="number">0</span></div><div class="line">            cur = ListNode(tmpsum)</div><div class="line">            res.append(cur)</div><div class="line">            </div><div class="line">            l1cur = l1</div><div class="line">            l2cur = l2</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> length1 &gt; <span class="number">0</span>:</div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(length1<span class="number">-1</span>):</div><div class="line">                    l1cur = l1cur.next</div><div class="line">                l1val = l1cur.val</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                l1val = <span class="number">0</span></div><div class="line">            </div><div class="line">            <span class="keyword">if</span> length2 &gt; <span class="number">0</span>:</div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(length2<span class="number">-1</span>):</div><div class="line">                    l2cur = l2cur.next</div><div class="line">                l2val = l2cur.val</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                l2val = <span class="number">0</span></div><div class="line">                </div><div class="line">            length1 -= <span class="number">1</span></div><div class="line">            length2 -= <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (carry):</div><div class="line">            cur = ListNode(carry)</div><div class="line">            res.append(cur)</div><div class="line">        </div><div class="line">        length = len(res)</div><div class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">elif</span> (length == <span class="number">1</span>):</div><div class="line">            <span class="keyword">return</span> res[<span class="number">0</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            head = res[<span class="number">-1</span>]</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(length<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>):</div><div class="line">                res[i].next = res[i<span class="number">-1</span>]</div><div class="line">            <span class="keyword">return</span> head</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[442 Find All Duplicates in an Array]]></title>
      <url>http://wf94.github.io/2017/02/23/442-Find-All-Duplicates-in-an-Array/</url>
      <content type="html"><![CDATA[<p>Given an array of integers, 1 ≤ a[i] ≤ <em>n</em> (<em>n</em> = size of array), some elements appear <strong>twice</strong> and others appear <strong>once</strong>.</p>
<p>Find all the elements that appear <strong>twice</strong> in this array.</p>
<p>Could you do it without extra space and in O(<em>n</em>) runtime?</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">[4,3,2,7,8,2,3,1]</div><div class="line"></div><div class="line">Output:</div><div class="line">[2,3]</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>Simple when using hashtable…..But not so easy when it comes to no extra space.</p>
<p>A very useful hint: When using python+hashtable to do word count, using Collection() function comes quite handy. The function can directly return a hashtable(python dict) with word statistics.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findDuplicates</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        resultdict = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</div><div class="line">            <span class="keyword">if</span> resultdict.has_key(i):</div><div class="line">                resultdict[i] += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                resultdict[i] = <span class="number">1</span></div><div class="line">        </div><div class="line">        ans = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> resultdict:</div><div class="line">            <span class="keyword">if</span> (resultdict[i] == <span class="number">2</span>):</div><div class="line">                ans.append(i)</div><div class="line">                </div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
<p>Hint: Take advantage of condition “1 ≤ a[i] ≤ n”<br><a href="https://discuss.leetcode.com/topic/64979/python-o-n-time-o-1-space" target="_blank" rel="external">https://discuss.leetcode.com/topic/64979/python-o-n-time-o-1-space</a></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[441 Arranging Coins]]></title>
      <url>http://wf94.github.io/2017/02/23/441-Arranging-Coins/</url>
      <content type="html"><![CDATA[<p>You have a total of <em>n</em> coins that you want to form in a staircase shape, where every <em>k</em>-th row must have exactly <em>k</em> coins.</p>
<p>Given <em>n</em>, find the total number of <strong>full</strong> staircase rows that can be formed.</p>
<p><em>n</em> is a non-negative integer and fits within the range of a 32-bit signed integer.</p>
<p><strong>Example 1:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">n = 5</div><div class="line"></div><div class="line">The coins can form the following rows:</div><div class="line">¤</div><div class="line">¤ ¤</div><div class="line">¤ ¤</div><div class="line"></div><div class="line">Because the 3rd row is incomplete, we return 2.</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">n = 8</div><div class="line"></div><div class="line">The coins can form the following rows:</div><div class="line">¤</div><div class="line">¤ ¤</div><div class="line">¤ ¤ ¤</div><div class="line">¤ ¤</div><div class="line"></div><div class="line">Because the 4th row is incomplete, we return 3.</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>思路很简单，利用一个简单的while循环得到可以符合要求的行数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">arrangeCoins</span><span class="params">(self, n)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type n: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            i = <span class="number">0</span></div><div class="line">            count = <span class="number">0</span></div><div class="line">            <span class="keyword">while</span> (n &gt; <span class="number">0</span>):</div><div class="line">                i += <span class="number">1</span></div><div class="line">                count += <span class="number">1</span></div><div class="line">                <span class="keyword">if</span> (n-i &lt;= i):</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                n -= i</div><div class="line">                </div><div class="line">            <span class="keyword">return</span> count</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
            <tag> Easy </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[438 Find All Anagrams in a String]]></title>
      <url>http://wf94.github.io/2017/02/22/438-Find-All-Anagrams-in-a-String/</url>
      <content type="html"><![CDATA[<p>Given a string <strong>s</strong> and a <strong>non-empty</strong> string <strong>p</strong>, find all the start indices of <strong>p</strong>‘s anagrams in <strong>s</strong>.</p>
<p>Strings consists of lowercase English letters only and the length of both strings <strong>s</strong> and <strong>p</strong> will not be larger than 20,100.</p>
<p>The order of output does not matter.</p>
<p><strong>Example 1:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">s: &quot;cbaebabacd&quot; p: &quot;abc&quot;</div><div class="line"></div><div class="line">Output:</div><div class="line">[0, 6]</div><div class="line"></div><div class="line">Explanation:</div><div class="line">The substring with start index = 0 is &quot;cba&quot;, which is an anagram of &quot;abc&quot;.</div><div class="line">The substring with start index = 6 is &quot;bac&quot;, which is an anagram of &quot;abc&quot;.</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">s: &quot;abab&quot; p: &quot;ab&quot;</div><div class="line"></div><div class="line">Output:</div><div class="line">[0, 1, 2]</div><div class="line"></div><div class="line">Explanation:</div><div class="line">The substring with start index = 0 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.</div><div class="line">The substring with start index = 1 is &quot;ba&quot;, which is an anagram of &quot;ab&quot;.</div><div class="line">The substring with start index = 2 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>思路很简单，利用两个哈希表/26元素的数组，记录下s, p字母的统计数目，从而可以得出结果。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findAnagrams</span><span class="params">(self, s, p)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :type p: str</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        res = []</div><div class="line">        pdict = &#123;&#125;</div><div class="line">        plen = len(p)</div><div class="line">        slen = len(s)</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(plen &lt;= slen):</div><div class="line">        </div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(plen):</div><div class="line">                <span class="keyword">if</span> (pdict.has_key(p[i])):</div><div class="line">                    pdict[p[i]] += <span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    pdict[p[i]] = <span class="number">1</span></div><div class="line">                    </div><div class="line">            <span class="comment">#print pdict</span></div><div class="line">            sdict = &#123;&#125;</div><div class="line">            </div><div class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> range(plen):</div><div class="line">                <span class="keyword">if</span> (sdict.has_key(s[n])):</div><div class="line">                    sdict[s[n]] += <span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    sdict[s[n]] = <span class="number">1</span></div><div class="line">                    </div><div class="line">            <span class="keyword">print</span> sdict</div><div class="line">            </div><div class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> range(slen-plen+<span class="number">1</span>):</div><div class="line">                flag = <span class="number">1</span></div><div class="line">                <span class="comment"># 注意！在这个地方，"==","!="都是可以判断两个dict是否相等的操作符</span></div><div class="line">                <span class="comment"># 如果遍历字典，反而会使时间复杂度大大提升，从而得到TLE，得不偿失。</span></div><div class="line">                <span class="keyword">if</span> (sdict != pdict):</div><div class="line">                    flag = <span class="number">0</span></div><div class="line">                <span class="keyword">if</span> (flag):</div><div class="line">                    res.append(m)</div><div class="line">                <span class="keyword">if</span>(m == slen-plen):</div><div class="line">                    <span class="keyword">break</span>      </div><div class="line">                <span class="keyword">if</span> (sdict.has_key(s[m]) <span class="keyword">and</span> sdict[s[m]] != <span class="number">1</span>):</div><div class="line">                    sdict[s[m]] -= <span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="keyword">del</span> sdict[s[m]]                </div><div class="line">                <span class="keyword">if</span> (sdict.has_key(s[m+plen])):</div><div class="line">                    sdict[s[m+plen]] += <span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    sdict[s[m+plen]] = <span class="number">1</span></div><div class="line">                    </div><div class="line">        <span class="keyword">return</span> res</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[437 Path Sum III]]></title>
      <url>http://wf94.github.io/2017/02/21/437-Path-Sum-III/</url>
      <content type="html"><![CDATA[<p>You are given a binary tree in which each node contains an integer value.</p>
<p>Find the number of paths that sum to a given value.</p>
<p>The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).</p>
<p>The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000. </p>
<p><strong>Example:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8</div><div class="line"></div><div class="line">      10</div><div class="line">     /  \</div><div class="line">    5   -3</div><div class="line">   / \    \</div><div class="line">  3   2   11</div><div class="line"> / \   \</div><div class="line">3  -2   1</div><div class="line"></div><div class="line">Return 3. The paths that sum to 8 are:</div><div class="line"></div><div class="line">1.  5 -&gt; 3</div><div class="line">2.  5 -&gt; 2 -&gt; 1</div><div class="line">3. -3 -&gt; 11</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>也还是利用深度优先遍历来进行操作。注意，所要求的和不一定需要从根开始。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for a binary tree node.</span></div><div class="line"><span class="comment"># class TreeNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.left = None</span></div><div class="line"><span class="comment">#         self.right = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pathSum</span><span class="params">(self, root, sum)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type root: TreeNode</div><div class="line">        :type sum: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        res = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> (root):</div><div class="line">            res += self.search(root, sum)</div><div class="line">            <span class="keyword">if</span> (root.left):</div><div class="line">                res += self.pathSum(root.left, sum)</div><div class="line">            <span class="keyword">if</span> (root.right):</div><div class="line">                res += self.pathSum(root.right, sum)</div><div class="line">        <span class="keyword">return</span> res</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, node, sum)</span>:</span></div><div class="line">        res = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> (node):</div><div class="line">            <span class="keyword">if</span> (sum == node.val):</div><div class="line">                res += <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> (node.left):</div><div class="line">                res += self.search(node.left, sum-node.val)</div><div class="line">            <span class="keyword">if</span> (node.right):</div><div class="line">                res += self.search(node.right, sum-node.val)</div><div class="line">        <span class="keyword">return</span> res</div></pre></td></tr></table></figure>
<p>Reference: <a href="http://xiadong.info/2016/11/leetcode-437-path-sum-iii/" target="_blank" rel="external">http://xiadong.info/2016/11/leetcode-437-path-sum-iii/</a></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CNN与脑部肿瘤分割资料收集]]></title>
      <url>http://wf94.github.io/2017/02/20/CNN-Brain-Tumor-Segmentation/</url>
      <content type="html"><![CDATA[<p>斯坦福大学卷积神经网络教程：</p>
<p><a href="http://ufldl.stanford.edu/tutorial/supervised/ConvolutionalNeuralNetwork/" target="_blank" rel="external">http://ufldl.stanford.edu/tutorial/supervised/ConvolutionalNeuralNetwork/</a></p>
<p><a href="http://ufldl.stanford.edu/wiki/index.php/UFLDL_Tutorial" target="_blank" rel="external">http://ufldl.stanford.edu/wiki/index.php/UFLDL_Tutorial</a></p>
<p><a href="http://ufldl.stanford.edu/tutorial/supervised/FeatureExtractionUsingConvolution/" target="_blank" rel="external">http://ufldl.stanford.edu/tutorial/supervised/FeatureExtractionUsingConvolution/</a></p>
<p>CNN笔记：通俗理解神经网络：</p>
<p><a href="http://blog.csdn.net/v_july_v/article/details/51812459" target="_blank" rel="external">http://blog.csdn.net/v_july_v/article/details/51812459</a></p>
<p>生物医学图像中的深度学习【资料】：</p>
<p><a href="https://madlymissyou.github.io/2016/10/09/deep-learning-for-neuroimage" target="_blank" rel="external">https://madlymissyou.github.io/2016/10/09/deep-learning-for-neuroimage</a></p>
<p>机器学习算法系列：浅析Logistic Regression</p>
<p><a href="https://chenrudan.github.io/blog/2016/01/09/logisticregression.html" target="_blank" rel="external">https://chenrudan.github.io/blog/2016/01/09/logisticregression.html</a></p>
]]></content>
      
        <categories>
            
            <category> Tech </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[436 Find Right Interval]]></title>
      <url>http://wf94.github.io/2017/02/20/436-Find-Right-Interval/</url>
      <content type="html"><![CDATA[<p>Given a set of intervals, for each of the interval i, check if there exists an interval j whose start point is bigger than or equal to the end point of the interval i, which can be called that j is on the “right” of i. </p>
<p>For any interval i, you need to store the minimum interval j’s index, which means that the interval j has the minimum start point to build the “right” relationship for interval i. If the interval j doesn’t exist, store -1 for the interval i. Finally, you need output the stored value of each interval as an array. </p>
<p><strong>Note:</strong></p>
<ol>
<li>You may assume the interval’s end point is always bigger than its start point.</li>
<li>You may assume none of these intervals have the same start point.</li>
</ol>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: [ [1,2] ]</div><div class="line"></div><div class="line">Output: [-1]</div><div class="line"></div><div class="line">Explanation: There is only one interval in the collection, so it outputs -1.</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Input: [ [3,4], [2,3], [1,2] ]</div><div class="line"></div><div class="line">Output: [-1, 0, 1]</div><div class="line"></div><div class="line">Explanation: There is no satisfied &quot;right&quot; interval for [3,4].</div><div class="line">For [2,3], the interval [3,4] has minimum-&quot;right&quot; start point;</div><div class="line">For [1,2], the interval [2,3] has minimum-&quot;right&quot; start point.</div></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Input: [ [1,4], [2,3], [3,4] ]</div><div class="line"></div><div class="line">Output: [-1, 2, -1]</div><div class="line"></div><div class="line">Explanation: There is no satisfied &quot;right&quot; interval for [1,4] and [3,4].</div><div class="line">For [2,3], the interval [3,4] has minimum-&quot;right&quot; start point.</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用哈希表存储临时的访问数据并不能防止TLE。这种方法不好使。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findRightInterval</span><span class="params">(self, intervals)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type intervals: List[Interval]</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        stats = &#123;&#125;</div><div class="line">        length = len(intervals)</div><div class="line">        ans = [<span class="number">-1</span>] * length</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            cur = intervals[i].end</div><div class="line">            <span class="keyword">if</span> (stats.has_key(cur)):</div><div class="line">                ans[i] = stats[cur]</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                target = float(<span class="string">'inf'</span>)</div><div class="line">                pos = <span class="number">-1</span></div><div class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(length):</div><div class="line">                    <span class="keyword">if</span> (cur &lt;= intervals[j].start):</div><div class="line">                        <span class="keyword">if</span> (target &gt;= intervals[j].start):</div><div class="line">                            target = intervals[j].start</div><div class="line">                            pos = j</div><div class="line">                ans[i] = pos</div><div class="line">                stats[cur] = pos</div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
<p>还是利用二分法的查找来解决问题。思路其实很简单，把所有的intervals.start作为一个数组，intervals.end作为一个数组。对start数组排序，根据end数组来找和start数组里面最接近的数字。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for an interval.</span></div><div class="line"><span class="comment"># class Interval(object):</span></div><div class="line"><span class="comment">#     def __init__(self, s=0, e=0):</span></div><div class="line"><span class="comment">#         self.start = s</span></div><div class="line"><span class="comment">#         self.end = e</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findRightInterval</span><span class="params">(self, intervals)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type intervals: List[Interval]</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        stats = &#123;&#125;</div><div class="line">        find = &#123;&#125;</div><div class="line">        length = len(intervals)</div><div class="line">        ans = [<span class="number">-1</span>] * length</div><div class="line">        </div><div class="line">        starts = []</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            find[intervals[i].start] = i</div><div class="line">            starts.append(intervals[i].start)</div><div class="line">        </div><div class="line">        starts.sort()</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            cur = intervals[i].end</div><div class="line">            <span class="keyword">if</span> (stats.has_key(cur)):</div><div class="line">                ans[i] = stats[cur]</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                low = <span class="number">0</span></div><div class="line">                high = length - <span class="number">1</span></div><div class="line">                mid = <span class="number">-1</span></div><div class="line">                useMid = <span class="keyword">False</span></div><div class="line">                <span class="keyword">if</span> (cur &lt;= starts[<span class="number">-1</span>]):</div><div class="line">                    <span class="keyword">while</span> (low + <span class="number">1</span> &lt; high):</div><div class="line">                        mid = ( low + high ) / <span class="number">2</span></div><div class="line">                        <span class="keyword">if</span> (starts[mid] &lt; cur):</div><div class="line">                            low = mid</div><div class="line">                        <span class="keyword">elif</span>(starts[mid] &gt; cur):</div><div class="line">                            high = mid</div><div class="line">                        <span class="keyword">else</span>:</div><div class="line">                            useMid = <span class="keyword">True</span></div><div class="line">                            <span class="keyword">break</span></div><div class="line">                    <span class="keyword">if</span>(useMid):</div><div class="line">                        stats[cur] = find[starts[mid]]</div><div class="line">                        ans[i] = find[starts[mid]]</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        lowcur = starts[low] - cur</div><div class="line">                        <span class="keyword">if</span> (lowcur &gt; <span class="number">0</span>):</div><div class="line">                            stats[cur] = find[starts[low]]</div><div class="line">                            ans[i] = find[starts[low]]</div><div class="line">                        <span class="keyword">else</span>:</div><div class="line">                            stats[cur] = find[starts[high]]</div><div class="line">                            ans[i] = find[starts[high]]</div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[435 Non-overlapping Intervals]]></title>
      <url>http://wf94.github.io/2017/02/19/435-Non-overlapping-Intervals/</url>
      <content type="html"><![CDATA[<p>Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping. </p>
<p><strong>Note:</strong></p>
<ol>
<li>You may assume the interval’s end point is always bigger than its start point.</li>
<li>Intervals like [1,2] and [2,3] have borders “touching” but they don’t overlap each other.</li>
</ol>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: [ [1,2], [2,3], [3,4], [1,3] ]</div><div class="line"></div><div class="line">Output: 1</div><div class="line"></div><div class="line">Explanation: [1,3] can be removed and the rest of intervals are non-overlapping.</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: [ [1,2], [1,2], [1,2] ]</div><div class="line"></div><div class="line">Output: 2</div><div class="line"></div><div class="line">Explanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.</div></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: [ [1,2], [2,3] ]</div><div class="line"></div><div class="line">Output: 0</div><div class="line"></div><div class="line">Explanation: You don&apos;t need to remove any of the intervals since they&apos;re already non-overlapping.</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们在使用C++ STL中的sort()函数时，如果vector中的元素是普通的int或者string，不需要额外撰写排序函数。sort()函数会自动将vector从小到大进行排列。如果vector里面的元素是自定义的struct/class，我们就需要重载排序函数。<br>利用贪心算法，将排序后的结果依次找寻局部最优即可。我们要注意在寻找的过程中，其中的一个边界条件。我们需要保证找到的元素，其范围是相对最小的。如[-100,-87], [-100, –32]……[-87, -20], [-86, -1], [-85, -72]……，很明显，当我们从[-100,-87]跳转到[-87, -20]时，我们取到的[-87, -20]是局部最优。但是当访问到[-85, -72]时，我们应该舍弃[-87, -20]，将最优元素计为[-85, -72]。因为其所涉及的范围比[-87, -20]小。</p>
<p>因此有</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( (intervals[i+<span class="number">1</span>].start - tmpstart) + (intervals[i+<span class="number">1</span>].end - intervals[i+<span class="number">1</span>].start) &lt; region )</div></pre></td></tr></table></figure>
<p>这个条件判断。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for an interval.</div><div class="line"> * struct Interval &#123;</div><div class="line"> *     int start;</div><div class="line"> *     int end;</div><div class="line"> *     Interval() : start(0), end(0) &#123;&#125;</div><div class="line"> *     Interval(int s, int e) : start(s), end(e) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">bool</span> <span class="title">less_start</span><span class="params">(<span class="keyword">const</span> Interval &amp;m1, <span class="keyword">const</span> Interval &amp;m2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(m1.start != m2.start) <span class="keyword">return</span> m1.start &lt; m2.start;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> m1.end &lt; m2.end;</div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(<span class="built_in">vector</span>&lt;Interval&gt;&amp; intervals)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> size = intervals.size();</div><div class="line">        <span class="keyword">int</span> tmpstart = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> tmpend = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> region = <span class="number">0</span>;</div><div class="line">        sort(intervals.begin(), intervals.end(), less_start);</div><div class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span>)&#123;</div><div class="line">            tmpend = intervals[<span class="number">0</span>].end;</div><div class="line">            tmpstart = intervals[<span class="number">0</span>].start;</div><div class="line">            region = tmpend - tmpstart;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> </div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; intervals.size() - <span class="number">1</span>; i++)&#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (intervals[i].start == intervals[i+<span class="number">1</span>].start)</div><div class="line">                count++;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(intervals[i+<span class="number">1</span>].start &lt; tmpend)&#123;</div><div class="line">                    <span class="keyword">if</span> ( (intervals[i+<span class="number">1</span>].start - tmpstart) + (intervals[i+<span class="number">1</span>].end - intervals[i+<span class="number">1</span>].start) &lt; region )&#123;</div><div class="line">                        tmpend = intervals[i+<span class="number">1</span>].end;</div><div class="line">                        tmpstart = intervals[i+<span class="number">1</span>].start;</div><div class="line">                        region = tmpend - tmpstart;</div><div class="line">                    &#125;</div><div class="line">                    count++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    tmpend = intervals[i+<span class="number">1</span>].end;</div><div class="line">                    tmpstart = intervals[i+<span class="number">1</span>].start;</div><div class="line">                    region = tmpend - tmpstart;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Greedy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[424 Longest Repeating Character Replacement]]></title>
      <url>http://wf94.github.io/2017/02/18/424-Longest-Repeating-Character-Replacement/</url>
      <content type="html"><![CDATA[<p>Given a string that consists of only uppercase English letters, you can replace any letter in the string with another letter at most <em>k</em> times. Find the length of a longest substring containing all repeating letters you can get after performing the above operations.</p>
<p><strong>Note:</strong><br> Both the string’s length and <em>k</em> will not exceed 104. </p>
<p><strong>Example 1:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">s = &quot;ABAB&quot;, k = 2</div><div class="line"></div><div class="line">Output:</div><div class="line">4</div><div class="line"></div><div class="line">Explanation:</div><div class="line">Replace the two &apos;A&apos;s with two &apos;B&apos;s or vice versa.</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">s = &quot;AABABBA&quot;, k = 1</div><div class="line"></div><div class="line">Output:</div><div class="line">4</div><div class="line"></div><div class="line">Explanation:</div><div class="line">Replace the one &apos;A&apos; in the middle with &apos;B&apos; and form &quot;AABBBBA&quot;.</div><div class="line">The substring &quot;BBBB&quot; has the longest repeating letters, which is 4.</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>用暴力解法方法会有TLE。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">characterReplacement</span><span class="params">(self, s, k)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :type k: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        length = len(s)</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> length):</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        prev = <span class="string">""</span></div><div class="line">        ans = <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            <span class="keyword">if</span> (prev != s[i]):</div><div class="line">                prev = s[i]</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            count = <span class="number">1</span></div><div class="line">            attempt = k</div><div class="line">            j = i + <span class="number">1</span></div><div class="line">            <span class="keyword">while</span>(j &lt; length):</div><div class="line">                <span class="keyword">if</span> (prev == s[j]):</div><div class="line">                    count += <span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="keyword">if</span> (attempt):</div><div class="line">                        count += <span class="number">1</span></div><div class="line">                        attempt -= <span class="number">1</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        <span class="keyword">break</span></div><div class="line">                j += <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> (attempt):</div><div class="line">                <span class="keyword">if</span> (attempt &lt;= i):</div><div class="line">                    count += attempt</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    count += i</div><div class="line">            <span class="keyword">if</span> count &gt; ans:</div><div class="line">                ans = count</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
<p>用Slide Window的解法。</p>
<p>考虑用一个stats的数组统计Sliding Window内数组各个字母的数目。窗口每滑倒一个新的状态，stats数组的统计量都会更新一次。这个Sliding Window需要从头滑到尾，从而找出最长的可替换子数组。</p>
<p>算法复杂度是O(26*n)。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">characterReplacement</span><span class="params">(self, s, k)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :type k: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        length = len(s)</div><div class="line">        stats = [<span class="number">0</span>] * <span class="number">26</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> length):</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        prev = <span class="string">""</span></div><div class="line">        ans = <span class="number">0</span></div><div class="line">        start = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            ans += <span class="number">1</span></div><div class="line">            cur = s[i]</div><div class="line">            index = ord(cur) - ord(<span class="string">'A'</span>)</div><div class="line">            stats[index] += <span class="number">1</span></div><div class="line">            maximum = max(stats)</div><div class="line">            <span class="keyword">if</span> (ans - maximum &gt; k):</div><div class="line">                stats[ord(s[start]) - ord(<span class="string">'A'</span>)] -= <span class="number">1</span></div><div class="line">                start += <span class="number">1</span></div><div class="line">                ans -= <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[434 Number of Segments in a String]]></title>
      <url>http://wf94.github.io/2017/02/18/434-Number-of-Segments-in-a-String/</url>
      <content type="html"><![CDATA[<p>Count the number of segments in a string, where a segment is defined to be a contiguous sequence of non-space characters.</p>
<p>Please note that the string does not contain any <strong>non-printable</strong> characters.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: &quot;Hello, my name is John&quot;</div><div class="line">Output: 5</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>统计字符串的片段数。片段之间用空格隔开。</p>
<p>注意一开始如果有空格的话，需要去掉一个间隔数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countSegments</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line"></div><div class="line">        length = len(s)</div><div class="line">        count = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(length<span class="number">-1</span>):</div><div class="line">                <span class="keyword">if</span> (s[i] == <span class="string">' '</span> <span class="keyword">and</span> s[i+<span class="number">1</span>] != <span class="string">' '</span>):</div><div class="line">                    count += <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">' '</span>):</div><div class="line">                <span class="keyword">return</span> count</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">return</span> count+<span class="number">1</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> String </tag>
            
            <tag> Easy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[423 Reconstruct Original Digits from English]]></title>
      <url>http://wf94.github.io/2017/02/17/423-Reconstruct-Original-Digits-from-English/</url>
      <content type="html"><![CDATA[<p>Given a <strong>non-empty</strong> string containing an out-of-order English representation of digits <code>0-9</code>, output the digits in ascending order.</p>
<p><strong>Note:</strong></p>
<ol>
<li>Input contains only lowercase English letters.</li>
<li>Input is guaranteed to be valid and can be transformed to its original digits. That means invalid inputs such as “abc” or “zerone” are not permitted.</li>
<li>Input length is less than 50,000.</li>
</ol>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: &quot;owoztneoer&quot;</div><div class="line">Output: &quot;012&quot;</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: &quot;fviefuro&quot;</div><div class="line">Output: &quot;45&quot;</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们只要找到以下关系即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">zero [构成的字串里只要有一个z，就对应一个0, z &lt;-&gt; 0]</div><div class="line">one</div><div class="line">two [w &lt;-&gt; 2]</div><div class="line">three [除了8之外，只有3有&apos;h&apos;]</div><div class="line">four [u &lt;-&gt; 4]</div><div class="line">five [除了4之外，只有5有&apos;f&apos;]</div><div class="line">six [x &lt;-&gt; 6]</div><div class="line">seven [除了5之外，只有7有&apos;v&apos;]</div><div class="line">eight [g &lt;-&gt; 8]</div><div class="line">nine</div></pre></td></tr></table></figure>
<p>剩下的两个数可以同理求出。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">originalDigits</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :rtype: str</div><div class="line">        """</div><div class="line">        stats = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</div><div class="line">            <span class="keyword">if</span> (stats.has_key(i)):</div><div class="line">                stats[i] += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                stats[i] = <span class="number">1</span></div><div class="line">        </div><div class="line">        res = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">            res.append(<span class="number">0</span>)</div><div class="line">            </div><div class="line">        res[<span class="number">0</span>] = self.getdictnum(stats, <span class="string">"z"</span>)</div><div class="line">        res[<span class="number">2</span>] = self.getdictnum(stats, <span class="string">"w"</span>)</div><div class="line">        res[<span class="number">4</span>] = self.getdictnum(stats, <span class="string">"u"</span>)</div><div class="line">        res[<span class="number">5</span>] = self.getdictnum(stats, <span class="string">"f"</span>) - res[<span class="number">4</span>]</div><div class="line">        res[<span class="number">6</span>] = self.getdictnum(stats, <span class="string">"x"</span>)</div><div class="line">        res[<span class="number">7</span>] = self.getdictnum(stats, <span class="string">"v"</span>) - res[<span class="number">5</span>]</div><div class="line">        res[<span class="number">8</span>] = self.getdictnum(stats, <span class="string">"g"</span>)</div><div class="line">        res[<span class="number">3</span>] = self.getdictnum(stats, <span class="string">"h"</span>) - res[<span class="number">8</span>]</div><div class="line">        res[<span class="number">9</span>] = self.getdictnum(stats, <span class="string">"i"</span>) - res[<span class="number">5</span>] - res[<span class="number">6</span>] - res[<span class="number">8</span>]</div><div class="line">        res[<span class="number">1</span>] = self.getdictnum(stats, <span class="string">"o"</span>) - res[<span class="number">2</span>] - res[<span class="number">0</span>] - res[<span class="number">4</span>]</div><div class="line">        </div><div class="line">        ans = []</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i, enum <span class="keyword">in</span> enumerate(res):</div><div class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> range(enum):</div><div class="line">                ans.append(i)</div><div class="line">                </div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> ans)</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getdictnum</span><span class="params">(self, stats, i)</span>:</span></div><div class="line">        <span class="keyword">if</span> (stats.has_key(i)):</div><div class="line">            <span class="keyword">return</span> stats[i]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[419 Battleship in a Board]]></title>
      <url>http://wf94.github.io/2017/02/16/419-Battleship-in-a-Board/</url>
      <content type="html"><![CDATA[<p>Given an 2D board, count how many battleships are in it. The battleships are represented with <code>&#39;X&#39;</code>s, empty slots are represented with <code>&#39;.&#39;</code>s. You may assume the following rules: </p>
<ul>
<li>You receive a valid board, made of only battleships or empty slots.</li>
<li>Battleships can only be placed horizontally or vertically. In other words, they can only be made of the shape <code>1xN</code> (1 row, N columns) or <code>Nx1</code> (N rows, 1 column), where N can be of any size.</li>
<li>At least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.</li>
</ul>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">X..X</div><div class="line">...X</div><div class="line">...X</div></pre></td></tr></table></figure>
<p><strong>Invalid Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...X</div><div class="line">XXXX</div><div class="line">...X</div></pre></td></tr></table></figure>
<p><strong>Follow up:</strong><br>Could you do it in <strong>one-pass</strong>, using only <strong>O(1) extra memory</strong> and <strong>without modifying</strong> the value of the board?</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>Didn’t work it out at first.</p>
<p>The initial consideration is to construct a visited (array[]). If visited and search downward and rightward, shall be remembered in this array. But the memory is not O(1), but O(n)</p>
<p>So this method comes quite handy and simple. Remember that the Online Judge system doesn’t require the complexity of algoritm to be strictly less than O(n^2), so feel free to try the brute force method at first.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countBattleships</span><span class="params">(self, board)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type board: List[List[str]]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        lenlines = len(board)</div><div class="line">        lencols = len(board[<span class="number">0</span>])</div><div class="line">        count = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(lenlines):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(lencols):</div><div class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">"X"</span>:</div><div class="line">                    preleft = <span class="keyword">False</span></div><div class="line">                    preup = <span class="keyword">False</span></div><div class="line">                    <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span>:</div><div class="line">                        <span class="keyword">if</span> board[i<span class="number">-1</span>][j] == <span class="string">"X"</span>:</div><div class="line">                            preup = <span class="keyword">True</span></div><div class="line">                    <span class="keyword">if</span> j - <span class="number">1</span> &gt;= <span class="number">0</span>:</div><div class="line">                        <span class="keyword">if</span> board[i][j<span class="number">-1</span>] == <span class="string">"X"</span>:</div><div class="line">                            preleft = <span class="keyword">True</span></div><div class="line">                    </div><div class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> (preup <span class="keyword">or</span> preleft):</div><div class="line">                        count += <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> count</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[415 Add Strings]]></title>
      <url>http://wf94.github.io/2017/02/15/415-Add-Strings/</url>
      <content type="html"><![CDATA[<p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as string, return the sum of <code>num1</code> and <code>num2</code>.</p>
<p><strong>Note:</strong> </p>
<ol>
<li>The length of both <code>num1</code> and <code>num2</code> is &lt; 5100.</li>
<li>Both <code>num1</code> and <code>num2</code> contains only digits <code>0-9</code>.</li>
<li>Both <code>num1</code> and <code>num2</code> does not contain any leading zero.</li>
<li>You <strong>must not use any built-in BigInteger library</strong> or <strong>convert the inputs to integer</strong> directly.</li>
</ol>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>题目的思想非常简单，利用数学上的求余方法先把字符串对应位的数码转换成整数，再逐位相加即可。</p>
<p>有几个Python的知识点在注释当中指出，可以注意一下。在Python中使用List的开销还是相对较小的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addStrings</span><span class="params">(self, num1, num2)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type num1: str</div><div class="line">        :type num2: str</div><div class="line">        :rtype: str</div><div class="line">        """</div><div class="line">        len1 = len(num1)</div><div class="line">        len2 = len(num2)</div><div class="line">        result = []</div><div class="line">        total = len1 <span class="keyword">if</span> len1 &gt; len2 <span class="keyword">else</span> len2</div><div class="line">        carry = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,total+<span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> (i &lt;= len1 <span class="keyword">and</span> i &lt;= len2):</div><div class="line">			   <span class="comment">#ord可以将char转换成ascii码</span></div><div class="line">                num = (ord(num1[-i]) - ord(<span class="string">"0"</span>)) + (ord(num2[-i]) - ord(<span class="string">"0"</span>)) + carry</div><div class="line"></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">if</span> (len1 &gt; len2):</div><div class="line">                    num = (ord(num1[-i]) - ord(<span class="string">"0"</span>)) + carry</div><div class="line"></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    num = (ord(num2[-i]) - ord(<span class="string">"0"</span>)) + carry</div><div class="line">										</div><div class="line">						<span class="keyword">if</span> (num &gt; <span class="number">9</span>):</div><div class="line">								num = num - <span class="number">10</span></div><div class="line">								carry = <span class="number">1</span></div><div class="line">						<span class="keyword">else</span>:</div><div class="line">								carry = <span class="number">0</span></div><div class="line">						result.append(num)</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (i == total):</div><div class="line">                <span class="keyword">if</span>(carry):</div><div class="line">                    result.append(carry)</div><div class="line">        result.reverse()</div><div class="line">		<span class="comment">#这个是python里面list转string的方法，要牢记</span></div><div class="line">		<span class="comment">#如果list里面的元素不是integer，用 res = ''.join(result)即可</span></div><div class="line">        res = <span class="string">''</span>.join(str(e) <span class="keyword">for</span> e <span class="keyword">in</span> result)</div><div class="line">        <span class="keyword">return</span> res</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
            <tag> Easy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[414 Third Maximum Number]]></title>
      <url>http://wf94.github.io/2017/02/14/414-Third-Maximum-Number/</url>
      <content type="html"><![CDATA[<p>Given a <strong>non-empty</strong> array of integers, return the <strong>third</strong> maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: [3, 2, 1]</div><div class="line"></div><div class="line">Output: 1</div><div class="line"></div><div class="line">Explanation: The third maximum is 1.</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: [1, 2]</div><div class="line"></div><div class="line">Output: 2</div><div class="line"></div><div class="line">Explanation: The third maximum does not exist, so the maximum (2) is returned instead.</div></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Input: [2, 2, 3, 1]</div><div class="line"></div><div class="line">Output: 1</div><div class="line"></div><div class="line">Explanation: Note that the third maximum here means the third maximum distinct number.</div><div class="line">Both numbers with value 2 are both considered as second maximum.</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>粗暴地进行三次求最大值操作，把第三大的数找出来。这堆代码写得很乱，<a href="https://discuss.leetcode.com/topic/64696/a-python-amusing-solution-which-actually-beats-98" target="_blank" rel="external">详见这个简洁的</a></p>
<p>其实一趟操作完全可以做到。<a href="https://discuss.leetcode.com/topic/63715/java-neat-and-easy-understand-solution-o-n-time-o-1-space" target="_blank" rel="external">详见这个解法</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">thirdMax</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        maxnum = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">            <span class="keyword">while</span> (len(nums)):</div><div class="line">                tmp = max(nums)</div><div class="line">                nums.remove(tmp)</div><div class="line">                <span class="keyword">if</span> (len(nums)):</div><div class="line">                    <span class="keyword">if</span> (max(nums) != tmp):</div><div class="line">                        <span class="keyword">break</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="keyword">break</span></div><div class="line">            </div><div class="line">            maxnum.append(tmp)</div><div class="line">            </div><div class="line">            <span class="keyword">print</span> nums</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> len(nums) <span class="keyword">and</span> i != <span class="number">2</span>):</div><div class="line">                <span class="keyword">return</span> maxnum[<span class="number">0</span>]</div><div class="line">        <span class="keyword">return</span> maxnum[<span class="number">-1</span>]</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[413 Arithmetic Slices]]></title>
      <url>http://wf94.github.io/2017/02/14/413-Arithmetic-Slices/</url>
      <content type="html"><![CDATA[<p>A sequence of number is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.</p>
<p>For example, these are arithmetic sequence:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1, 3, 5, 7, 9</div><div class="line">7, 7, 7, 7</div><div class="line">3, -1, -5, -9</div></pre></td></tr></table></figure>
<p>The following sequence is not arithmetic.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1, 1, 2, 5, 7</div></pre></td></tr></table></figure>
<p>A zero-indexed array A consisting of N numbers is given. A slice of that array is any pair of integers (P, Q) such that 0 &lt;= P &lt; Q &lt; N.</p>
<p>A slice (P, Q) of array A is called arithmetic if the sequence:<br>​    A[P], A[p + 1], …, A[Q - 1], A[Q] is arithmetic. In particular, this means that P + 1 &lt; Q.</p>
<p>The function should return the number of arithmetic slices in the array A. </p>
<p><strong>Example:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">A = [1, 2, 3, 4]</div><div class="line"></div><div class="line">return: 3, for 3 arithmetic slices in A: [1, 2, 3], [2, 3, 4] and [1, 2, 3, 4] itself.</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们首先需要判断这个数组里面有几个连续的arithmetic sequence。Arithmetic sequence的长度与arithmetic slice的数目有一个定量的关系，而且这个关系可利用等差数列的公式来表示【number函数】。由此可以得出结果。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(self, A)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type A: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        length = len(A)</div><div class="line">        <span class="keyword">if</span> (length &lt; <span class="number">3</span>):</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            diff = A[<span class="number">1</span>] - A[<span class="number">0</span>]</div><div class="line">            count = <span class="number">0</span></div><div class="line">            ans = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,length):</div><div class="line">                <span class="keyword">if</span> (A[i] - A[i<span class="number">-1</span>] == diff):</div><div class="line">                    count += <span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    ans += self.number(count)</div><div class="line">                    diff = A[i] - A[i<span class="number">-1</span>]</div><div class="line">                    count = <span class="number">0</span></div><div class="line">                    </div><div class="line">            ans += self.number(count)</div><div class="line">        <span class="keyword">return</span> ans</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">number</span><span class="params">(self, num)</span>:</span></div><div class="line">        res = (num + <span class="number">1</span>) * num / <span class="number">2</span></div><div class="line">        <span class="keyword">return</span> res</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Math </tag>
            
            <tag> Dynamic Programming </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[412 Fizz Buzz]]></title>
      <url>http://wf94.github.io/2017/02/13/412-Fizz-Buzz/</url>
      <content type="html"><![CDATA[<p>Write a program that outputs the string representation of numbers from 1 to <em>n</em>.</p>
<p>But for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”.</p>
<p><strong>Example:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">n = 15,</div><div class="line"></div><div class="line">Return:</div><div class="line">[</div><div class="line">    &quot;1&quot;,</div><div class="line">    &quot;2&quot;,</div><div class="line">    &quot;Fizz&quot;,</div><div class="line">    &quot;4&quot;,</div><div class="line">    &quot;Buzz&quot;,</div><div class="line">    &quot;Fizz&quot;,</div><div class="line">    &quot;7&quot;,</div><div class="line">    &quot;8&quot;,</div><div class="line">    &quot;Fizz&quot;,</div><div class="line">    &quot;Buzz&quot;,</div><div class="line">    &quot;11&quot;,</div><div class="line">    &quot;Fizz&quot;,</div><div class="line">    &quot;13&quot;,</div><div class="line">    &quot;14&quot;,</div><div class="line">    &quot;FizzBuzz&quot;</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>此题比较简单，可能出错的就是，使用某种语言的时候不熟悉语言本身的特性了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fizzBuzz</span><span class="params">(self, n)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type n: int</div><div class="line">        :rtype: List[str]</div><div class="line">        """</div><div class="line">        result = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> ((i % <span class="number">3</span> == <span class="number">0</span>) <span class="keyword">and</span> (i % <span class="number">5</span> != <span class="number">0</span>)):</div><div class="line">                result.append(<span class="string">"Fizz"</span>)</div><div class="line">            <span class="keyword">elif</span> ((i % <span class="number">3</span> != <span class="number">0</span>) <span class="keyword">and</span> (i % <span class="number">5</span> == <span class="number">0</span>)):</div><div class="line">                result.append(<span class="string">"Buzz"</span>)</div><div class="line">            <span class="keyword">elif</span> ((i % <span class="number">3</span> == <span class="number">0</span>) <span class="keyword">and</span> (i % <span class="number">5</span> == <span class="number">0</span>)):</div><div class="line">                result.append(<span class="string">"FizzBuzz"</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                result.append(str(i))</div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[409 Longest Palindrome]]></title>
      <url>http://wf94.github.io/2017/02/13/409-Longest-Palindrome/</url>
      <content type="html"><![CDATA[<p>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.</p>
<p>This is case sensitive, for example <code>&quot;Aa&quot;</code> is not considered a palindrome here.</p>
<p><strong>Note:</strong><br> Assume the length of given string will not exceed 1,010. </p>
<p><strong>Example: </strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">&quot;abccccdd&quot;</div><div class="line"></div><div class="line">Output:</div><div class="line">7</div><div class="line"></div><div class="line">Explanation:</div><div class="line">One longest palindrome that can be built is &quot;dccaccd&quot;, whose length is 7.</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>用哈希表简单统计一下字符的个数，也可以用数组进行统计；当然，如果字符仅限大写或者小写，还可以用一个整数通过位运算来统计。</p>
<p>如果某一种字符的个数是偶数，自然可以是组成回文；如果统计出来的个数是奇数，前偶数个字符可以组成回文，剩下一个被排除在外。如果存在被排除在外的字符，在最后返回长度的时候加上1即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        hash = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</div><div class="line">            <span class="comment"># 可以用has_key()函数代替，效率更高</span></div><div class="line">            <span class="keyword">if</span> (i <span class="keyword">not</span> <span class="keyword">in</span> hash):</div><div class="line">                hash[i] = <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                hash[i] += <span class="number">1</span></div><div class="line">        values = hash.values()</div><div class="line">        result = <span class="number">0</span></div><div class="line">        has1 = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> values:</div><div class="line">            <span class="keyword">if</span> ((j % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">and</span> (j &gt; <span class="number">1</span>)):</div><div class="line">                result += j</div><div class="line">            <span class="keyword">if</span> ((j % <span class="number">2</span> == <span class="number">1</span>) <span class="keyword">and</span> (j &gt; <span class="number">1</span>)):</div><div class="line">                result += (j<span class="number">-1</span>)</div><div class="line">                has1 += <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> (j == <span class="number">1</span>):</div><div class="line">                has1 += <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (has1 &gt; <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> result+<span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> result</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[406 Queue Reconstruction by Height]]></title>
      <url>http://wf94.github.io/2017/02/12/406-Queue-Reconstruction-by-Height/</url>
      <content type="html"><![CDATA[<p>Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers <code>(h, k)</code>, where <code>h</code> is the height of the person and <code>k</code> is the number of people in front of this person who have a height greater than or equal to <code>h</code>. Write an algorithm to reconstruct the queue. </p>
<p><strong>Note:</strong><br> The number of people is less than 1,100. </p>
<p><strong>Example</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]</div><div class="line"></div><div class="line">Output:</div><div class="line">[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>Based on the thought of<br><a href="https://discuss.leetcode.com/topic/60394/easy-concept-with-python-c-java-solution" target="_blank" rel="external">https://discuss.leetcode.com/topic/60394/easy-concept-with-python-c-java-solution</a></p>
<ol>
<li><p><strong>Pick out tallest group of people and sort them</strong> in a subarray (S). Since there’s no other groups of people taller than them, therefore <strong>each guy’s index will be just as same as his k value</strong>.</p>
</li>
<li><p>For 2nd tallest group (and the rest), insert each one of them into (S) by k value. So on and so forth.</p>
</li>
</ol>
<p>E.g.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">input: [[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]</div><div class="line">subarray after step 1: [[7,0], [7,1]]</div><div class="line">subarray after step 2: [[7,0], [6,1], [7,1]]</div></pre></td></tr></table></figure>
<p>However meet a lot of problems during realization of the code.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reconstructQueue</span><span class="params">(self, people)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type people: List[List[int]]</div><div class="line">        :rtype: List[List[int]]</div><div class="line">        """</div><div class="line">        stats = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> person <span class="keyword">in</span> people:</div><div class="line">            <span class="keyword">if</span> (stats.has_key(person[<span class="number">0</span>])):</div><div class="line">                stats[person[<span class="number">0</span>]] += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                stats[person[<span class="number">0</span>]] = <span class="number">1</span></div><div class="line">    </div><div class="line">        <span class="keyword">if</span> (people):</div><div class="line">            people.sort(reverse = <span class="keyword">True</span>)</div><div class="line">            <span class="keyword">print</span> people</div><div class="line">            result = []</div><div class="line"></div><div class="line">            <span class="keyword">for</span> person <span class="keyword">in</span> people:</div><div class="line">                count = stats[person[<span class="number">0</span>]]</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">not</span> result):</div><div class="line">                    result.append(person)</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="keyword">if</span> (person[<span class="number">1</span>]-count+<span class="number">1</span> &gt;= len(result)):</div><div class="line">                        result.append(person)</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">					  <span class="comment">#There is a gap between the right answer and the direct insert method</span></div><div class="line">					  <span class="comment">#The insert index should add a bias of (-count+1) to fill that gap</span></div><div class="line">                        result.insert(person[<span class="number">1</span>]-count+<span class="number">1</span>, person)</div><div class="line">                stats[person[<span class="number">0</span>]] -= <span class="number">1</span>    </div><div class="line">            <span class="keyword">return</span> result</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> []</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Greedy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[405 Convert a Number to Hexadecimal]]></title>
      <url>http://wf94.github.io/2017/02/11/405-Convert-a-Number-to-Hexadecimal/</url>
      <content type="html"><![CDATA[<p>Given an integer, write an algorithm to convert it to hexadecimal. For negative integer, <a href="https://en.wikipedia.org/wiki/Two%27s_complement" target="_blank" rel="external">two’s complement</a> method is used. </p>
<p><strong>Note:</strong> </p>
<ol>
<li>All letters in hexadecimal (<code>a-f</code>) must be in lowercase.</li>
<li>The hexadecimal string must not contain extra leading <code>0</code>s. If the number is zero, it is represented by a single zero character <code>&#39;0&#39;</code>; otherwise, the first character in the hexadecimal string will not be the zero character.</li>
<li>The given number is guaranteed to fit within the range of a 32-bit signed integer.</li>
<li>You <strong>must not use any method provided by the library</strong> which converts/formats the number to hex directly.</li>
</ol>
<p><strong>Example 1:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">26</div><div class="line"></div><div class="line">Output:</div><div class="line">&quot;1a&quot;</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">-1</div><div class="line"></div><div class="line">Output:</div><div class="line">&quot;ffffffff&quot;</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们利用位运算来解决这个问题。所有的数在内存中都是以二进制的方式存储的。二进制转十六进制的方法非常简单，只要每四位二进制数转换成一位十六进制数即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toHex</span><span class="params">(self, num)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type num: int</div><div class="line">        :rtype: str</div><div class="line">        """</div><div class="line">        </div><div class="line">        hexmap = [<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>]</div><div class="line">        reslist = []</div><div class="line">        mask = <span class="number">0xf</span></div><div class="line">        flag = <span class="number">0</span></div><div class="line">        iter = <span class="number">0</span></div><div class="line">        <span class="comment"># 注意小于0的情况</span></div><div class="line">        <span class="keyword">if</span> (num &lt; <span class="number">0</span>):</div><div class="line">            num = num &amp; <span class="number">0x7fffffff</span></div><div class="line">            iter = <span class="number">7</span></div><div class="line">            flag = <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span>(num == <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> <span class="string">'0'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            iter = int(math.log(abs(num), <span class="number">16</span>))</div><div class="line">            </div><div class="line">        reslist.append( hexmap[num &amp; mask] )</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(iter):</div><div class="line">            num = num &gt;&gt; <span class="number">4</span></div><div class="line">            tmp = num &amp; mask</div><div class="line">            <span class="keyword">if</span> (i == iter<span class="number">-1</span> <span class="keyword">and</span> flag == <span class="number">1</span>):</div><div class="line">                tmp += <span class="number">8</span></div><div class="line">            reslist.append( hexmap[tmp] )</div><div class="line"></div><div class="line">        reslist.reverse()</div><div class="line">        res = <span class="string">''</span>.join(reslist)</div><div class="line">        <span class="keyword">return</span> res</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[404 Sum of Left Leaves]]></title>
      <url>http://wf94.github.io/2017/02/10/404-Sum-of-Left-Leaves/</url>
      <content type="html"><![CDATA[<p>Find the sum of all left leaves in a given binary tree.</p>
<a id="more"></a>
<p><strong>Example:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    3</div><div class="line">   / \</div><div class="line">  9  20</div><div class="line">    /  \</div><div class="line">   15   7</div><div class="line"></div><div class="line">There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>简单的递归求解即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for a binary tree node.</span></div><div class="line"><span class="comment"># class TreeNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.left = None</span></div><div class="line"><span class="comment">#         self.right = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumOfLeftLeaves</span><span class="params">(self, root)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type root: TreeNode</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        count = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">None</span>):</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> ((root.left) <span class="keyword">and</span> (root.left.left == <span class="keyword">None</span>) <span class="keyword">and</span> (root.left.right == <span class="keyword">None</span>)):</div><div class="line">            count += root.left.val</div><div class="line">        <span class="keyword">if</span> ( (root.left) <span class="keyword">and</span> ( (root.left.left) <span class="keyword">or</span> (root.left.right) ) ):</div><div class="line">            count += self.sumOfLeftLeaves(root.left)</div><div class="line">        <span class="keyword">if</span> ( (root.right) ):</div><div class="line">            count += self.sumOfLeftLeaves(root.right)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> count</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[401 Binary Watch]]></title>
      <url>http://wf94.github.io/2017/02/09/401-Binary-Watch/</url>
      <content type="html"><![CDATA[<p>A binary watch has 4 LEDs on the top which represent the <strong>hours</strong> (<strong>0-11</strong>), and the 6 LEDs on the bottom represent the <strong>minutes</strong> (<strong>0-59</strong>).</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/8/8b/Binary_clock_samui_moon.jpg" alt="img"> </p>
<p>Each LED represents a zero or one, with the least significant bit on the right.</p>
<p>For example, the above binary watch reads “3:25”.</p>
<p>Given a non-negative integer <em>n</em> which represents the number of LEDs that are currently on, return all possible times the watch could represent.</p>
<p><strong>Example:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: n = 1</div><div class="line">Return: [&quot;1:00&quot;, &quot;2:00&quot;, &quot;4:00&quot;, &quot;8:00&quot;, &quot;0:01&quot;, &quot;0:02&quot;, &quot;0:04&quot;, &quot;0:08&quot;, &quot;0:16&quot;, &quot;0:32&quot;]</div></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li>The order of output does not matter.</li>
<li>The hour must not contain a leading zero, for example “01:00” is not valid, it should be “1:00”.</li>
<li>The minute must be consist of two digits and may contain a leading zero, for example “10:2” is not valid, it should be “10:02”.</li>
</ul>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一开始是懵的……没做出来。</p>
<p>先尝试最直白的思路，做位运算。</p>
<p>当num=1的时候，做一个循环，把左移1位至10位的结果都放到结果的list里面，之后再对结果的list进行格式转换就好。一共10位，高四位是小时数，低六位是分钟数。num=2的时候，做两个循环以此类推。但是不知道如何利用nums来控制循环的层数，于是卡在这个思路里面没有做出来。 </p>
<p>但是后来才发现，上面的思路就是排列组合当中的组合数。所以看到了有些答案用了itertools里面combinations的方法。也是极好的。实际上，之前卡住的时候还不会用递归求解组合数，也可以在这里利用递归的方法求组合数。</p>
<p>最好的一种方法是反推法。把所有的12×60种时间全部遍历一遍。在遍历的过程中，如果bits的个数为nums，就把它记录在结果列表里面。 穷举法就不多说了，很暴力，但是也很有效。</p>
<p>贴一个后来写的代码，利用的是穷举法，暴力求解。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readBinaryWatch</span><span class="params">(self, num)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type num: int</div><div class="line">        :rtype: List[str]</div><div class="line">        """</div><div class="line">        res = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">12</span>):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">60</span>):</div><div class="line">                <span class="keyword">if</span> (self.numofbin(i) + self.numofbin(j) == num):</div><div class="line">                    hour = str(i)</div><div class="line">                    minute = str(j)</div><div class="line">                    <span class="keyword">if</span> (j &lt; <span class="number">10</span>):</div><div class="line">                        minute = <span class="string">"0"</span> + minute</div><div class="line">                    res.append(hour+<span class="string">":"</span>+minute)</div><div class="line">        <span class="keyword">return</span> res</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numofbin</span><span class="params">(self, num)</span>:</span></div><div class="line">        count = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> (num):</div><div class="line">            count += num % <span class="number">2</span></div><div class="line">            num = num / <span class="number">2</span></div><div class="line">        <span class="keyword">return</span> count</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Backtracking </tag>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[400 Nth Digit]]></title>
      <url>http://wf94.github.io/2017/02/08/400-Nth-Digit/</url>
      <content type="html"><![CDATA[<p>Find the <em>n</em>th digit of the infinite integer sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, … </p>
<p><strong>Note:</strong><br><em>n</em> is positive and will fit within the range of a 32-bit signed integer (<em>n</em> &lt; 231). </p>
<p><strong>Example 1:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">3</div><div class="line"></div><div class="line">Output:</div><div class="line">3</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">11</div><div class="line"></div><div class="line">Output:</div><div class="line">0</div><div class="line"></div><div class="line">Explanation:</div><div class="line">The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用纯粹的数学方法解决这个问题。</p>
<p>可以从个位一直往上推算，得到一个最大的数字数目之和，将输入数字与该和相减，得到余项。</p>
<p>我们还能得到最大数字所拥有的位数，根据题意推出公式，求解即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findNthDigit</span><span class="params">(self, n)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type n: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        exp = <span class="number">0</span></div><div class="line">        after = n</div><div class="line">        <span class="keyword">while</span> (after &gt; <span class="number">0</span>):</div><div class="line">            n = after</div><div class="line">            after = after - <span class="number">9</span> * <span class="number">10</span> ** exp * (exp + <span class="number">1</span>)</div><div class="line">            exp += <span class="number">1</span></div><div class="line">        remain = n % exp</div><div class="line">        pos = n / exp</div><div class="line">        <span class="keyword">print</span> n</div><div class="line">        <span class="keyword">if</span> (exp != <span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> (remain == <span class="number">1</span>):</div><div class="line">                res = ( pos / <span class="number">10</span> ** (exp-remain)) % <span class="number">9</span> + <span class="number">1</span></div><div class="line">            <span class="keyword">elif</span> (remain == <span class="number">0</span>):</div><div class="line">                res = ( (pos<span class="number">-1</span>) / <span class="number">10</span> ** remain ) % <span class="number">10</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                res = ( (pos<span class="number">-1</span>) / <span class="number">10</span> ** (exp-remain) ) % <span class="number">10</span></div><div class="line">            <span class="keyword">return</span> res</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> n</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
            <tag> Easy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[396 Rotate Function]]></title>
      <url>http://wf94.github.io/2017/02/07/396-Rotate-Function/</url>
      <content type="html"><![CDATA[<p>Given an array of integers <code>A</code> and let <em>n</em> to be its length. </p>
<p>Assume <code>Bk</code> to be an array obtained by rotating the array <code>A</code> <em>k</em> positions clock-wise, we define a “rotation function” <code>F</code> on <code>A</code> as follow: </p>
<p><code>F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1]</code>.</p>
<p>Calculate the maximum value of <code>F(0), F(1), ..., F(n-1)</code>.  </p>
<p><strong>Note:</strong><br><em>n</em> is guaranteed to be less than 105. </p>
<p><strong>Example:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">A = [4, 3, 2, 6]</div><div class="line"></div><div class="line">F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25</div><div class="line">F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16</div><div class="line">F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23</div><div class="line">F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26</div><div class="line"></div><div class="line">So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用最简单的方法会超时。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxRotateFunction</span><span class="params">(self, A)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type A: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        length  = len(A)</div><div class="line">        res = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            tmp = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(length):</div><div class="line">                tmp += j * A[j-i]</div><div class="line">            res.append(tmp)</div><div class="line">        <span class="keyword">if</span> (len(res)):</div><div class="line">            <span class="keyword">return</span> max(res)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<p>把函数变换一下。得到一个关系式，如：</p>
<p>F(1) = F(0) + A数组的和 - (元素个数 * 最后一个元素)</p>
<p>F(2) = F(1) + A数组的和 - (元素个数 * 倒数第二个元素)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxRotateFunction</span><span class="params">(self, A)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type A: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        length  = len(A)</div><div class="line">        <span class="keyword">if</span> (length):</div><div class="line">            suma = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> A:</div><div class="line">                suma += i</div><div class="line">            res = []</div><div class="line">            cur = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">                cur += A[i] * i</div><div class="line">            res.append(cur)</div><div class="line">            </div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(length<span class="number">-1</span>):</div><div class="line">                prev = res[<span class="number">-1</span>]</div><div class="line">                cur = prev + suma - (A[-i<span class="number">-1</span>] * length)</div><div class="line">                res.append(cur)</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> max(res)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[378 Kth Smallest Element in a Sorted Matrix]]></title>
      <url>http://wf94.github.io/2017/02/06/378-Kth-Smallest-Element-in-a-Sorted-Matrix/</url>
      <content type="html"><![CDATA[<p>Given a <em>n</em> x <em>n</em> matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.</p>
<p>Note that it is the kth smallest element in the sorted order, not the kth distinct element. </p>
<p><strong>Example:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">matrix = [</div><div class="line">   [ 1,  5,  9],</div><div class="line">   [10, 11, 13],</div><div class="line">   [12, 13, 15]</div><div class="line">],</div><div class="line">k = 8,</div><div class="line"></div><div class="line">return 13.</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>采用了一个最暴力的方法，把每一行的元素全部添加到一个一维数组里，然后排一下序。结果幸运地没有超时。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kthSmallest</span><span class="params">(self, matrix, k)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type matrix: List[List[int]]</div><div class="line">        :type k: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        stride = []</div><div class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> matrix:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> m:</div><div class="line">                stride.append(i)</div><div class="line">        stride.sort()</div><div class="line">        <span class="keyword">return</span> stride[k<span class="number">-1</span>]</div></pre></td></tr></table></figure>
<p>这道题用二分法更加省时间。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">kthSmallest</span><span class="params">(self, matrix, k)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type matrix: List[List[int]]</div><div class="line">    :type k: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    high = matrix[<span class="number">-1</span>][<span class="number">-1</span>]</div><div class="line">    low = matrix[<span class="number">0</span>][<span class="number">0</span>]</div><div class="line">    mid = <span class="number">0</span></div><div class="line">    <span class="keyword">if</span> (high == low):</div><div class="line">        mid = high</div><div class="line">    count = <span class="number">0</span></div><div class="line">    <span class="comment"># 注意要取不等号，而不是小于号；</span></div><div class="line">    <span class="keyword">while</span>( mid != low <span class="keyword">or</span> low != high ):</div><div class="line">        </div><div class="line">        mid = ( high + low ) / <span class="number">2</span></div><div class="line">        <span class="comment"># 统计小于等于k的元素个数</span></div><div class="line">        <span class="keyword">for</span> numbers <span class="keyword">in</span> matrix:</div><div class="line">            <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</div><div class="line">                <span class="keyword">if</span> (num &lt;= mid):</div><div class="line">                    count += <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (count &gt;= k):</div><div class="line">            high = mid</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># 在这个地方需要把低界+1，因为需要有一个Bias</span></div><div class="line">            low = mid + <span class="number">1</span></div><div class="line">        count = <span class="number">0</span></div><div class="line">    <span class="keyword">return</span> mid</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Binary Search </tag>
            
            <tag> Heap </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[374 Guess Number Higher or Lower]]></title>
      <url>http://wf94.github.io/2017/02/05/374-Guess-Number-Higher-or-Lower/</url>
      <content type="html"><![CDATA[<p>We are playing the Guess Game. The game is as follows:</p>
<p>I pick a number from <strong>1</strong> to <strong>n</strong>. You have to guess which number I picked.</p>
<p>Every time you guess wrong, I’ll tell you whether the number is higher or lower.</p>
<p>You call a pre-defined API <code>guess(int num)</code> which returns 3 possible results (<code>-1</code>, <code>1</code>, or <code>0</code>):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-1 : My number is lower</div><div class="line"> 1 : My number is higher</div><div class="line"> 0 : Congrats! You got it!</div></pre></td></tr></table></figure>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">n = 10, I pick 6.</div><div class="line">Return 6.</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用二分法进行搜索。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># The guess API is already defined for you.</span></div><div class="line"><span class="comment"># @param num, your guess</span></div><div class="line"><span class="comment"># @return -1 if my number is lower, 1 if my number is higher, otherwise return 0</span></div><div class="line"><span class="comment"># def guess(num):</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">guessNumber</span><span class="params">(self, n)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type n: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        high = n</div><div class="line">        low = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> (low &lt;= high):</div><div class="line">            mid = low + (high - low) / <span class="number">2</span></div><div class="line">            <span class="keyword">if</span> (guess(mid) == <span class="number">-1</span>):</div><div class="line">                high = mid - <span class="number">1</span></div><div class="line">            <span class="keyword">elif</span> (guess(mid) == <span class="number">1</span>):</div><div class="line">                low = mid + <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        <span class="keyword">return</span> (high + low)/<span class="number">2</span></div></pre></td></tr></table></figure>
<p>参考资料：</p>
<p>Jon Bentley：90%程序员无法正确实现二分查找算法<br><a href="https://www.cnblogs.com/ider/archive/2012/04/01/binary_search.html" target="_blank" rel="external">https://www.cnblogs.com/ider/archive/2012/04/01/binary_search.html</a><br><a href="http://hedengcheng.com/?p=595" target="_blank" rel="external">http://hedengcheng.com/?p=595</a><br><a href="https://research.googleblog.com/2006/06/extra-extra-read-all-about-it-nearly.html" target="_blank" rel="external">https://research.googleblog.com/2006/06/extra-extra-read-all-about-it-nearly.html</a></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[367 Valid Perfect Square]]></title>
      <url>http://wf94.github.io/2017/02/05/367-Valid-Perfect-Square/</url>
      <content type="html"><![CDATA[<p>Given a positive integer <em>num</em>, write a function which returns True if <em>num</em> is a perfect square else False.</p>
<p><strong>Note:</strong> <strong>Do not</strong> use any built-in library function such as <code>sqrt</code>. </p>
<p><strong>Example 1:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: 16</div><div class="line">Returns: True</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: 14</div><div class="line">Returns: False</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>判断一个数是否为完全平方数。如果利用2~num的数对num进行求余，算法复杂度是O(n)，其实很有可能会超时。要防止超时，使用二分法进行搜索，会显得比较省时。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPerfectSquare</span><span class="params">(self, num)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type num: int</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        high = num</div><div class="line">        low = <span class="number">0</span></div><div class="line">        mid = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> (mid != ( high + low ) / <span class="number">2</span>) :</div><div class="line">            mid = ( high + low ) / <span class="number">2</span></div><div class="line">            <span class="keyword">if</span> mid * mid &gt; num:</div><div class="line">                high = mid  + <span class="number">1</span></div><div class="line">            <span class="keyword">elif</span> mid * mid == num:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                low = mid</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[350 Intersection of Two Arrays II]]></title>
      <url>http://wf94.github.io/2017/02/04/350-Intersection-of-Two-Arrays-II/</url>
      <content type="html"><![CDATA[<p>Given two arrays, write a function to compute their intersection. </p>
<p><strong>Example:</strong><br> Given <em>nums1</em> = <code>[1, 2, 2, 1]</code>, <em>nums2</em> = <code>[2, 2]</code>, return <code>[2, 2]</code>. </p>
<p><strong>Note:</strong></p>
<ul>
<li>Each element in the result should appear as many times as it shows in both arrays.</li>
<li>The result can be in any order.</li>
</ul>
<p><strong>Follow up:</strong></p>
<ul>
<li>What if the given array is already sorted? How would you optimize your algorithm?</li>
<li>What if <em>nums1</em>‘s size is small compared to <em>nums2</em>‘s size? Which algorithm is better?</li>
<li>What if elements of <em>nums2</em> are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li>
</ul>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先对两个list进行排序，从nums1来开始看，对nums2来进行寻找。</p>
<p>如果找到相同的元素，就把元素记录到结果list当中。因为list是已经排好序了的，所以如果nums2此时的元素比nums1要大，说明nums1的迭代还没有到能够对应nums2位置的部分。反之亦然。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intersect</span><span class="params">(self, nums1, nums2)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums1: List[int]</div><div class="line">        :type nums2: List[int]</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        result = []</div><div class="line">        pos = <span class="number">0</span></div><div class="line">        len1 = len(nums1)</div><div class="line">        len2 = len(nums2)</div><div class="line">        <span class="keyword">if</span> ((<span class="keyword">not</span> len1) <span class="keyword">or</span> (<span class="keyword">not</span> len2)):</div><div class="line">            <span class="keyword">return</span> result</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            nums1.sort()</div><div class="line">            nums2.sort()</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> nums1:</div><div class="line">                <span class="keyword">if</span> (pos == len2):</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="keyword">while</span>(pos &lt; len2):</div><div class="line">                    <span class="keyword">if</span> (i == nums2[pos]):</div><div class="line">                        pos += <span class="number">1</span></div><div class="line">                        result.append(i)</div><div class="line">                        <span class="keyword">break</span></div><div class="line">                    <span class="keyword">elif</span> (i &gt; nums2[pos]):</div><div class="line">                        pos += <span class="number">1</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        <span class="keyword">break</span></div><div class="line">            <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<p>其实还可以用哈希表来做这道题，比双指针更加简单明了。</p>
<p><a href="https://discuss.leetcode.com/topic/45893/c-hash-table-solution-and-sort-two-pointers-solution-with-time-and-space-complexity" target="_blank" rel="external">https://discuss.leetcode.com/topic/45893/c-hash-table-solution-and-sort-two-pointers-solution-with-time-and-space-complexity</a></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Two Pointers </tag>
            
            <tag> Hash Table </tag>
            
            <tag> Binary Search </tag>
            
            <tag> Sort </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[345 Reverse Vowels of a String]]></title>
      <url>http://wf94.github.io/2017/02/03/345-Reverse-Vowels-of-a-String/</url>
      <content type="html"><![CDATA[<p>Write a function that takes a string as input and reverse only the vowels of a string.</p>
<p><strong>Example 1:</strong><br> Given s = “hello”, return “holle”. </p>
<p><strong>Example 2:</strong><br> Given s = “leetcode”, return “leotcede”. </p>
<p><strong>Note:</strong><br> The vowels does not include the letter “y”. </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>题目要求我们将一个字符串其中的元音翻转位置。</p>
<p>可以利用双指针的方式，两头的指针分别访问到一个元音，调换一下两个元音之间的位置。</p>
<p>也可以利用哈希表来进行操作，我们需要记住元音在字符串的相应位置，之后再利用哈希表生成元音对应位置的数组，交换顺序即可。下面的代码就是基于哈希表的。</p>
<p>注意python当中反向遍历可以直接利用切片的方法来进行。如<code>list[::-1]</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseVowels</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :rtype: str</div><div class="line">        """</div><div class="line">        vlist = [<span class="string">'a'</span>,<span class="string">'e'</span>,<span class="string">'i'</span>,<span class="string">'o'</span>,<span class="string">'u'</span>,<span class="string">'A'</span>,<span class="string">'E'</span>,<span class="string">'I'</span>,<span class="string">'O'</span>,<span class="string">'U'</span>]</div><div class="line">        vmap = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> pos, i <span class="keyword">in</span> enumerate(s):</div><div class="line">            <span class="keyword">if</span> ( i <span class="keyword">in</span> vlist ):</div><div class="line">                vmap[pos] = str(i)</div><div class="line">        index = vmap.keys()</div><div class="line">        length = len(index)</div><div class="line">        index.sort()</div><div class="line">        </div><div class="line">        value = []</div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> index:</div><div class="line">            value.append(vmap[k])</div><div class="line">        slist = list(s)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            slist[index[i]] = value[length-i<span class="number">-1</span>]</div><div class="line">        s = <span class="string">''</span>.join(slist)</div><div class="line">        <span class="keyword">return</span> s</div></pre></td></tr></table></figure>
<p>参考资料：</p>
<p><a href="http://www.cnblogs.com/linyawen/archive/2012/03/15/2398292.html" target="_blank" rel="external">http://www.cnblogs.com/linyawen/archive/2012/03/15/2398292.html</a></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> String </tag>
            
            <tag> Easy </tag>
            
            <tag> Two Pointers </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[342 Power of Four]]></title>
      <url>http://wf94.github.io/2017/02/02/342-Power-of-Four/</url>
      <content type="html"><![CDATA[<p>Given an integer (signed 32 bits), write a function to check whether it is a power of 4. </p>
<p><strong>Example:</strong><br> Given num = 16, return true. Given num = 5, return false. </p>
<p><strong>Follow up</strong>: Could you solve it without loops/recursion? </p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>可以通过循环或者递归的方法求出。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPowerOfFour</span><span class="params">(self, num)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type num: int</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> (num &lt;= <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">while</span> (num &gt; <span class="number">1</span>):</div><div class="line">                <span class="keyword">if</span> (num % <span class="number">4</span> != <span class="number">0</span>):</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">                num = num / <span class="number">4</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>也可以利用位运算的方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">4: 100</div><div class="line">3: 011</div><div class="line">4 &amp; 3 = 0</div><div class="line"></div><div class="line">16: 10000</div><div class="line">15: 01111</div><div class="line">16 &amp; 15 = 0</div></pre></td></tr></table></figure>
<p>得到一个判断条件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">( (num<span class="number">-1</span>) &amp; num) == <span class="number">0</span> <span class="keyword">and</span> (num<span class="number">-1</span>) % <span class="number">3</span> == <span class="number">0</span></div></pre></td></tr></table></figure>
<p>如果满足这个判断条件，就是四的乘方了。</p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[326 Power of Three]]></title>
      <url>http://wf94.github.io/2017/02/02/326-Power-of-Three/</url>
      <content type="html"><![CDATA[<p>Given an integer, write a function to determine if it is a power of three. </p>
<p><strong>Follow up:</strong><br>​    Could you do it without using any loop / recursion? </p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>如果单纯利用循环，其实还是很好做的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPowerOfThree</span><span class="params">(self, n)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type n: int</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">while</span> (n &gt; <span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> (n % <span class="number">3</span> != <span class="number">0</span>):</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">            n = n / <span class="number">3</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>但是不利用循环的方法实在是想不出来……就看看这篇参考资料吧：</p>
<p><a href="https://discuss.leetcode.com/topic/33536/a-summary-of-all-solutions-new-method-included-at-15-30pm-jan-8th" target="_blank" rel="external">https://discuss.leetcode.com/topic/33536/a-summary-of-all-solutions-new-method-included-at-15-30pm-jan-8th</a></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
            <tag> Easy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[318 Maximum Product of Word Lengths]]></title>
      <url>http://wf94.github.io/2017/02/01/318-Maximum-Product-of-Word-Lengths/</url>
      <content type="html"><![CDATA[<p>Given a string array <code>words</code>, find the maximum value of <code>length(word[i]) * length(word[j])</code> where the two words do not share common letters.    You may assume that each word will contain only lower case letters.    If no such two words exist, return 0. </p>
<p><strong>Example 1:</strong></p>
<p>​    Given <code>[&quot;abcw&quot;, &quot;baz&quot;, &quot;foo&quot;, &quot;bar&quot;, &quot;xtfn&quot;, &quot;abcdef&quot;]</code><br>​    Return <code>16</code><br>​    The two words can be <code>&quot;abcw&quot;, &quot;xtfn&quot;</code>. </p>
<p><strong>Example 2:</strong></p>
<p>​    Given <code>[&quot;a&quot;, &quot;ab&quot;, &quot;abc&quot;, &quot;d&quot;, &quot;cd&quot;, &quot;bcd&quot;, &quot;abcd&quot;]</code><br>​    Return <code>4</code><br>​    The two words can be <code>&quot;ab&quot;, &quot;cd&quot;</code>. </p>
<p><strong>Example 3:</strong></p>
<p>​    Given <code>[&quot;a&quot;, &quot;aa&quot;, &quot;aaa&quot;, &quot;aaaa&quot;]</code><br>​    Return <code>0</code><br>​    No such pair of words. </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们需要找出字符串数组中，两个没有重复字符的字符串，并且它们的乘积要最大。</p>
<p>我们当然需要统计数组中每一个字符串，字母出现的次数。但是用什么方法来统计呢？如果用哈希表，空间复杂度可能会有点高，毕竟我们只有确定的26个字母。我选择利用<code>alphabet[26]</code>，来存储字母次数的统计量。</p>
<p>其实还有更有技巧的方法，可以把字母统计量用位操作的方式存储在整数当中。利用移位运算给整数的相应位数赋上相应的值即可。</p>
<p>接下来，我们将数组里的数的对应长度，两两相乘；如果不满足题意，就不考虑这个乘积。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> copy</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProduct</span><span class="params">(self, words)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type words: List[str]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        stats = []</div><div class="line">        alphabet = []</div><div class="line">        lens = []</div><div class="line">        length = len(words)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</div><div class="line">            alphabet.append(<span class="number">0</span>)</div><div class="line">            </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            tmp = copy.copy(alphabet)</div><div class="line">            stats.append(tmp)</div><div class="line">            </div><div class="line">        <span class="keyword">for</span> i, word <span class="keyword">in</span> enumerate(words):</div><div class="line">            <span class="keyword">for</span> s <span class="keyword">in</span> word:</div><div class="line">                stats[i][ord(s)-ord(<span class="string">"a"</span>)] += <span class="number">1</span></div><div class="line">            lens.append(len(word))</div><div class="line">        </div><div class="line">        product = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,length):</div><div class="line">                duplicate = <span class="keyword">False</span></div><div class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">26</span>):</div><div class="line">                    <span class="keyword">if</span> (stats[i][k] <span class="keyword">and</span> stats[j][k]):</div><div class="line">                        duplicate = <span class="keyword">True</span></div><div class="line">                        <span class="keyword">break</span></div><div class="line">                </div><div class="line">                <span class="keyword">if</span> (duplicate):</div><div class="line">                    <span class="keyword">continue</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    tmpproduct = lens[i] * lens[j]</div><div class="line">                    <span class="keyword">if</span> (tmpproduct &gt; product):</div><div class="line">                        product = tmpproduct</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> product</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[303 Range Sum Query - Immutable]]></title>
      <url>http://wf94.github.io/2017/01/31/303-Range-Sum-Query-Immutable/</url>
      <content type="html"><![CDATA[<p>Given an integer array <em>nums</em>, find the sum of the elements between indices <em>i</em> and <em>j</em> (<em>i</em> ≤ <em>j</em>), inclusive.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Given nums = [-2, 0, 3, -5, 2, -1]</div><div class="line"></div><div class="line">sumRange(0, 2) -&gt; 1</div><div class="line">sumRange(2, 5) -&gt; -1</div><div class="line">sumRange(0, 5) -&gt; -3</div></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li><p>You may assume that the array does not change.</p>
</li>
<li><p>There are many calls to <em>sumRange</em> function.</p>
</li>
</ol>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一开始觉得用用暴力算法没啥问题，但是发现超时了。原因是在测试的时候，会多次调用<code>sumRange</code>函数，如果调用n次，数组长度为m，最坏的情况当然是达到了O(n*m)。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        """</div><div class="line">        self.n = nums</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumRange</span><span class="params">(self, i, j)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type i: int</div><div class="line">        :type j: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        res = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(i,j+<span class="number">1</span>):</div><div class="line">            res += self.n[k]</div><div class="line">        <span class="keyword">return</span> res</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Your NumArray object will be instantiated and called as such:</span></div><div class="line"><span class="comment"># obj = NumArray(nums)</span></div><div class="line"><span class="comment"># param_1 = obj.sumRange(i,j)</span></div></pre></td></tr></table></figure>
<p>所以我们考虑利用动态规划来降低复杂度。实际上也是一种典型的空间换时间的方法。</p>
<p>另外声明一个数组<code>n</code>。遍历原数组，将当前元素前，所有元素的和，放进数组<code>n</code>对应的位置当中。</p>
<p>这样在每次调用<code>sumRange</code>的时候，复杂度都是O(1)，超时的问题也就解决了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        """</div><div class="line">        self.n = []</div><div class="line">        res = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</div><div class="line">            res += i</div><div class="line">            self.n.append(res)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumRange</span><span class="params">(self, i, j)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type i: int</div><div class="line">        :type j: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        left = <span class="number">0</span></div><div class="line">        right = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>):</div><div class="line">            left = self.n[i<span class="number">-1</span>]</div><div class="line">        right = self.n[j]</div><div class="line">        <span class="keyword">return</span> right - left</div><div class="line"></div><div class="line"><span class="comment"># Your NumArray object will be instantiated and called as such:</span></div><div class="line"><span class="comment"># obj = NumArray(nums)</span></div><div class="line"><span class="comment"># param_1 = obj.sumRange(i,j)</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Dynamic Programming </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[299 Bulls and Cows]]></title>
      <url>http://wf94.github.io/2017/01/30/299-Bulls-and-Cows/</url>
      <content type="html"><![CDATA[<p>You are playing the following <a href="https://en.wikipedia.org/wiki/Bulls_and_Cows" target="_blank" rel="external">Bulls and Cows</a> game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called “bulls”) and how many digits match the secret number but locate in the wrong position (called “cows”). Your friend will use successive guesses and hints to eventually derive the secret number.</p>
<p>For example: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Secret number:  &quot;1807&quot;</div><div class="line">Friend&apos;s guess: &quot;7810&quot;</div></pre></td></tr></table></figure>
<p>Hint: <code>1</code> bull and <code>3</code> cows. (The bull is <code>8</code>, the cows are <code>0</code>, <code>1</code> and <code>7</code>.) </p>
<p>Write a function to return a hint according to the secret number and friend’s guess, use <code>A</code> to indicate the bulls and <code>B</code> to indicate the cows. In the above example, your function should return <code>&quot;1A3B&quot;</code>. </p>
<p>Please note that both secret number and friend’s guess may contain duplicate digits, for example: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Secret number:  &quot;1123&quot;</div><div class="line">Friend&apos;s guess: &quot;0111&quot;</div></pre></td></tr></table></figure>
<p>In this case, the 1st <code>1</code> in friend’s guess is a bull, the 2nd or 3rd <code>1</code> is a cow, and your function should return <code>&quot;1A1B&quot;</code>. </p>
<p>You may assume that the secret number and your friend’s guess only contain digits, and their lengths are always equal.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这是一个猜数字的游戏。如果一个人猜到了该数字，且数字的位数和数字都正确，便称作“Bull”，如果位数不正确，但是数字正确，称作”Cow“。</p>
<p>理解了题意之后，我们可以考虑利用哈希表的方法来解决这道题。根据题意统计Bull和Cow的个数即可。注意，已经是Bull的数，就不再是Cow了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getHint</span><span class="params">(self, secret, guess)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type secret: str</div><div class="line">        :type guess: str</div><div class="line">        :rtype: str</div><div class="line">        """</div><div class="line">        length = len(secret)</div><div class="line">        bull = <span class="number">0</span></div><div class="line">        cow = <span class="number">0</span></div><div class="line">        sdict = &#123;&#125;</div><div class="line">        gdict = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            <span class="keyword">if</span> (secret[i] == guess[i]):</div><div class="line">                bull += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">if</span> (sdict.has_key(secret[i])):</div><div class="line">                    sdict[secret[i]] += <span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    sdict[secret[i]] = <span class="number">1</span></div><div class="line">                    </div><div class="line">                <span class="keyword">if</span> (gdict.has_key(guess[i])):</div><div class="line">                    gdict[guess[i]] += <span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    gdict[guess[i]] = <span class="number">1</span></div><div class="line">        </div><div class="line">        skeylist = sdict.keys()</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> skeylist:</div><div class="line">            <span class="keyword">if</span> (gdict.has_key(j)):</div><div class="line">                cow += min(sdict[j], gdict[j])</div><div class="line">                </div><div class="line">        <span class="keyword">return</span> str(bull) + <span class="string">'A'</span> + str(cow) + <span class="string">'B'</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[290 Word Pattern]]></title>
      <url>http://wf94.github.io/2017/01/29/290-Word-Pattern/</url>
      <content type="html"><![CDATA[<p>Given a <code>pattern</code> and a string <code>str</code>, find if <code>str</code> follows the same pattern.</p>
<p> Here <strong>follow</strong> means a full match, such that there is a bijection between a letter in <code>pattern</code> and a <strong>non-empty</strong> word in <code>str</code>.</p>
<p><strong>Examples:</strong></p>
<ol>
<li>pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog cat cat dog&quot;</code> should return true.</li>
<li>pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog cat cat fish&quot;</code> should return false.</li>
<li>pattern = <code>&quot;aaaa&quot;</code>, str = <code>&quot;dog cat cat dog&quot;</code> should return false.</li>
<li>pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog dog dog dog&quot;</code> should return false.</li>
</ol>
<p><strong>Notes:</strong><br> You may assume <code>pattern</code> contains only lowercase letters, and <code>str</code> contains lowercase letters separated by a single space. </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>通过将<code>pattern</code>和<code>string</code>放入哈希表中，分别比较可以得出结果。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wordPattern</span><span class="params">(self, pattern, str)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type pattern: str</div><div class="line">        :type str: str</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        tmp = <span class="string">''</span></div><div class="line">        words = []</div><div class="line">        m = &#123;&#125;</div><div class="line">        <span class="comment"># 可以利用str.split内置函数，</span></div><div class="line">        <span class="comment"># 实现和下面代码一样的分割字符串取单词功能。</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> str:</div><div class="line">            <span class="keyword">if</span> (i == <span class="string">' '</span> <span class="keyword">and</span> tmp != <span class="string">''</span>):</div><div class="line">                words.append(tmp)</div><div class="line">                tmp = <span class="string">''</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                tmp += i</div><div class="line">        words.append(tmp)</div><div class="line">        <span class="comment">###### #### #### #### #### ######</span></div><div class="line">        length = len(pattern)</div><div class="line">        lengthstr = len(words)</div><div class="line">        <span class="keyword">if</span> (length != lengthstr):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment">### #### #### #### ##### #####</span></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">                <span class="keyword">if</span> (m.has_key(words[i])):</div><div class="line">                    <span class="keyword">if</span> ( m[words[i]] != pattern[i] ):</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    m[words[i]] = pattern[i]</div><div class="line">                    </div><div class="line">            m = &#123;&#125;</div><div class="line">            </div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">                <span class="keyword">if</span> (m.has_key(pattern[i])):</div><div class="line">                    <span class="keyword">if</span> ( m[pattern[i]] != words[i] ):</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    m[pattern[i]] = words[i]</div><div class="line">        <span class="comment"># 判断Map是否相等，可以直接使用 == 符号，而不需要用上面复杂的推导</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[278 First Bad Version]]></title>
      <url>http://wf94.github.io/2017/01/28/278-First-Bad-Version/</url>
      <content type="html"><![CDATA[<p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.  </p>
<p>Suppose you have <code>n</code> versions <code>[1, 2, ..., n]</code> and you want to find out the first bad one, which causes all the following ones to be bad. </p>
<p>You are given an API <code>bool isBadVersion(version)</code> which will return whether <code>version</code> is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API. </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><code>bool isBadVersion(version)</code>这个函数已经以API的形式给出。我们利用二分法搜索即可得到结果。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># The isBadVersion API is already defined for you.</span></div><div class="line"><span class="comment"># @param version, an integer</span></div><div class="line"><span class="comment"># @return a bool</span></div><div class="line"><span class="comment"># def isBadVersion(version):</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">firstBadVersion</span><span class="params">(self, n)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type n: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        low = <span class="number">0</span></div><div class="line">        high = n</div><div class="line">        mid = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> <span class="number">0</span> &lt;= mid &lt;= n:</div><div class="line">            mid = low + (high - low) / <span class="number">2</span></div><div class="line">            <span class="keyword">if</span> isBadVersion(mid):</div><div class="line">                <span class="keyword">if</span> mid == <span class="number">0</span>:</div><div class="line">                    <span class="keyword">return</span> <span class="number">0</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="keyword">if</span> isBadVersion(mid<span class="number">-1</span>):</div><div class="line">                        high = mid</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        <span class="keyword">return</span> mid</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                low = mid + <span class="number">1</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[268 Missing Number]]></title>
      <url>http://wf94.github.io/2017/01/27/268-Missing-Number/</url>
      <content type="html"><![CDATA[<p>Given an array containing <em>n</em> distinct numbers taken from <code>0, 1, 2, ..., n</code>, find the one that is missing from the array. </p>
<p>For example,<br> Given <em>nums</em> = <code>[0, 1, 3]</code> return <code>2</code>. </p>
<p><strong>Note</strong>:<br> Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity? </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>找到连续数组当中缺失的那个数。</p>
<p>要想实现O(1)的空间复杂度，可以利用等差数列公式，将数组的和与等差数列的和进行比较即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">missingNumber</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        add = <span class="number">0</span></div><div class="line">        length = len(nums)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</div><div class="line">            add += i</div><div class="line">        </div><div class="line">        should = ( (<span class="number">1</span> + length) * length ) / <span class="number">2</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> should - add</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
            <tag> Easy </tag>
            
            <tag> Array </tag>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[257 Binary Tree Paths]]></title>
      <url>http://wf94.github.io/2017/01/26/257-Binary-Tree-Paths/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, return all root-to-leaf paths. </p>
<p>For example, given the following binary tree: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   1</div><div class="line"> /   \</div><div class="line">2     3</div><div class="line"> \</div><div class="line">  5</div></pre></td></tr></table></figure>
<p>All root-to-leaf paths are: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用深度优先遍历，可以得到树从根节点到叶子节点的所有路径。递归直到访问到叶子节点，此时向结果数组加入一个路径的字符串。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for a binary tree node.</span></div><div class="line"><span class="comment"># class TreeNode:</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.left = None</span></div><div class="line"><span class="comment">#         self.right = None</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="comment"># @param &#123;TreeNode&#125; root</span></div><div class="line">    <span class="comment"># @return &#123;string[]&#125;</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">binaryTreePaths</span><span class="params">(self, root)</span>:</span></div><div class="line">        self.res = []</div><div class="line">        <span class="keyword">if</span> (root):</div><div class="line">            self.DFS(root, <span class="string">''</span>)</div><div class="line">            <span class="keyword">return</span> self.res</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> self.res</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DFS</span><span class="params">(self, root, string)</span>:</span></div><div class="line">        <span class="keyword">if</span> (root):</div><div class="line">            val = root.val</div><div class="line">            string += str(val)</div><div class="line">            <span class="keyword">if</span> (root.left <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">and</span> root.right <span class="keyword">is</span> <span class="keyword">None</span>):</div><div class="line">                self.res.append(string)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                string += <span class="string">'-&gt;'</span> </div><div class="line">                self.DFS(root.left, string)</div><div class="line">                self.DFS(root.right, string)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Tree </tag>
            
            <tag> DFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[238 Product of Array Except Self]]></title>
      <url>http://wf94.github.io/2017/01/25/238-Product-of-Array-Except-Self/</url>
      <content type="html"><![CDATA[<p>Given an array of <em>n</em> integers where <em>n</em> &gt; 1, <code>nums</code>, return an array <code>output</code> such that <code>output[i]</code> is equal to the product of all the elements of <code>nums</code> except <code>nums[i]</code>.</p>
<p>Solve it <strong>without division</strong> and in O(<em>n</em>).</p>
<p>For example, given <code>[1,2,3,4]</code>, return <code>[24,12,8,6]</code>. </p>
<p><strong>Follow up:</strong><br> Could you solve it with constant space complexity? (Note: The output array <strong>does not</strong> count as extra space for the purpose of space complexity analysis.)</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>题目要我们求出数组除了当前元素以外的所有数的乘积，不能使用除法，并使用O(n)的时间复杂度。经过一番……很长时间的考虑，也没想出来。</p>
<p>实际上是一个典型的空间换时间的方法，从左往右记录该元素以左（不含该元素）的累乘结果；再从右向左做一次。最后的结果是两组结果对应的乘积。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">productExceptSelf</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        left = []</div><div class="line">        right = []</div><div class="line">        ans = []</div><div class="line">        product = <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</div><div class="line">            left.append(product)</div><div class="line">            product *= i</div><div class="line">        </div><div class="line">        product = <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums[::<span class="number">-1</span>]:</div><div class="line">            right.append(product)</div><div class="line">            product *= i</div><div class="line">        </div><div class="line">        <span class="keyword">print</span> left</div><div class="line">        <span class="keyword">print</span> right</div><div class="line">        </div><div class="line">        length = len(nums)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            ans.append(left[i] * right[length<span class="number">-1</span>-i])</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[234 Palindrome Linked List]]></title>
      <url>http://wf94.github.io/2017/01/24/234-Palindrome-Linked-List/</url>
      <content type="html"><![CDATA[<p>Given a singly linked list, determine if it is a palindrome.</p>
<p><strong>Follow up:</strong><br> Could you do it in O(n) time and O(1) space?</p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>最简单的方法当然是把链表里面的所有元素放在数组里，然后就可以判断这个链表是不是回文的了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for singly-linked list.</span></div><div class="line"><span class="comment"># class ListNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.next = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, head)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type head: ListNode</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        cur = head</div><div class="line">        res = []</div><div class="line">        <span class="keyword">while</span> (cur):</div><div class="line">            res.append(cur.val)</div><div class="line">            cur = cur.next</div><div class="line">        length = len(res)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            <span class="keyword">if</span> (res[i] != res[-i<span class="number">-1</span>]):</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>其实还可以利用快慢指针，找到链表的中点；与此同时，慢指针将链表前一半进行反转。之后，再逐节点进行比较，判断链表是否为回文。</p>
<p>但是有人指出，反转链表并不能使得空间复杂度为O(1)。具体请参见：</p>
<p><a href="https://discuss.leetcode.com/topic/18533/reversing-a-list-is-not-considered-o-1-space" target="_blank" rel="external">https://discuss.leetcode.com/topic/18533/reversing-a-list-is-not-considered-o-1-space</a></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Two Pointers </tag>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[230 Kth Smallest Element in a BST]]></title>
      <url>http://wf94.github.io/2017/01/24/230-Kth-Smallest-Element-in-a-BST/</url>
      <content type="html"><![CDATA[<p>Given a binary search tree, write a function <code>kthSmallest</code> to find the <strong>k</strong>th smallest element in it.</p>
<p><strong>Note: </strong><br> You may assume k is always valid, 1 ≤ k ≤ BST’s total elements.</p>
<p><strong>Follow up:</strong><br> What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?</p>
<p><strong>Hint:</strong></p>
<ol>
<li><p>Try to utilize the property of a BST.</p>
</li>
<li><p>What if you could modify the BST node’s structure?</p>
</li>
<li><p>The optimal runtime complexity is O(height of BST).</p>
</li>
</ol>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>根据平衡二叉树的性质，对平衡二叉树中序遍历，生成的数组是升序的。</p>
<p>所以利用深度优先遍历，将中序遍历的第k个结果输出即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for a binary tree node.</span></div><div class="line"><span class="comment"># class TreeNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.left = None</span></div><div class="line"><span class="comment">#         self.right = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kthSmallest</span><span class="params">(self, root, k)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type root: TreeNode</div><div class="line">        :type k: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        self.res = []</div><div class="line">        <span class="keyword">if</span> (root):</div><div class="line">            self.search(root, k)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> self.res[<span class="number">-1</span>]</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, cur, k)</span>:</span></div><div class="line">        <span class="keyword">if</span>(cur.left):</div><div class="line">            self.search(cur.left, k)</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (len(self.res) == k):</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.res.append(cur.val)</div><div class="line">            </div><div class="line">        <span class="keyword">if</span>(cur.right):</div><div class="line">            self.search(cur.right, k)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Binary Search </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[225 Implement Stack using Queues]]></title>
      <url>http://wf94.github.io/2017/01/23/225-Implement-Stack-using-Queues/</url>
      <content type="html"><![CDATA[<p>Implement the following operations of a stack using queues. </p>
<ul>
<li>push(x) – Push element x onto stack. </li>
<li>pop() – Removes the element on top of the stack. </li>
<li>top() – Get the top element. </li>
<li>empty() – Return whether the stack is empty. </li>
</ul>
<p>Notes:</p>
<ul>
<li>You must use <em>only</em> standard operations of a queue – which means only <code>push to back</code>, <code>peek/pop from front</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li>
<li>Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.</li>
<li>You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).</li>
</ul>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>题目要求我们利用队列来实现栈的操作。</p>
<p>栈是先入先出，队列是先入后出。队列转栈的关键就是获得队列中的第一个元素——而队列中没有这样的内建函数。在设计的时候，我们可以利用两个队列来实现栈的功能。在实现栈的<code>pop</code>指令时，将第一个队列中除了第一个元素的所有元素都倒到第二个队列里。这样我们就取到了第一个队列中的第一个元素。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Queue</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        initialize your data structure here.</div><div class="line">        """</div><div class="line">        self.q1 = Queue.Queue()</div><div class="line">        self.q2 = Queue.Queue()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type x: int</div><div class="line">        :rtype: nothing</div><div class="line">        """</div><div class="line">        self.q1.put(x)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :rtype: nothing</div><div class="line">        """</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">not</span> self.q1.empty()):</div><div class="line">            tmp = self.q1.get()</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> self.q1.empty()):</div><div class="line">                self.q2.put(tmp)</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(<span class="keyword">not</span> self.q2.empty()):</div><div class="line">            self.q1.put(self.q2.get())</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        tmp = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span>(<span class="keyword">not</span> self.q1.empty()):</div><div class="line">            tmp = self.q1.get()</div><div class="line">            self.q2.put(tmp)</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(<span class="keyword">not</span> self.q2.empty()):</div><div class="line">            self.q1.put(self.q2.get())</div><div class="line">        <span class="keyword">return</span> tmp</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> self.q1.empty()</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Stack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[219 Contains Duplicate II]]></title>
      <url>http://wf94.github.io/2017/01/22/219-Contains-Duplicate-II/</url>
      <content type="html"><![CDATA[<p>Given an array of integers and an integer <em>k</em>, find out whether there are two distinct indices <em>i</em> and <em>j</em> in the array such that <strong>nums[i] = nums[j]</strong> and the <strong>absolute</strong> difference between <em>i</em> and <em>j</em> is at most <em>k</em>. </p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先想到的是用两个指针，只要两个指针指向的值相等，就求出两个指针指向的值之差。但是这样的操作，其实最后的复杂度相对来说会高一些。另外要注意，题目提到，两个相等的数之间差值是“至多”为k，而不是“恰好“为k。</p>
<p>这一部分代码是之前用两个指针的方法，得到了错误的答案。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">length = len(nums)</div><div class="line"><span class="keyword">if</span> (k &gt;= len(nums)):</div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length-k):</div><div class="line">        <span class="keyword">if</span>(nums[i] == nums[i+k]):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<p>需要注意，只要有一组数字满足要求，函数就应该返回真。<br>要想将复杂度降低，需要利用哈希表来进行操作。在遍历数组的时候，同时将数组的数值加入哈希表中，从而可以利用它来求得题意所需的答案。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsNearbyDuplicate</span><span class="params">(self, nums, k)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :type k: int</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        length = len(nums)</div><div class="line">        kmap = &#123;&#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            <span class="keyword">if</span> (kmap.has_key(nums[i])):</div><div class="line">                <span class="keyword">if</span> (i - kmap[nums[i]] &lt;= k):</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    kmap[nums[i]] = i</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                kmap[nums[i]] = i</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Array </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[204 Count Primes]]></title>
      <url>http://wf94.github.io/2017/01/21/204-Count-Primes/</url>
      <content type="html"><![CDATA[<p>Count the number of prime numbers less than a non-negative number, <strong>n</strong>.</p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li><p>Let’s start with a <em>isPrime</em> function. To determine if a number is prime, we need to check if it is not divisible by any number less than <em>n</em>. The runtime complexity of <em>isPrime</em> function would be O(<em>n</em>) and hence counting the total prime numbers up to <em>n</em> would be O(<em>n</em>2). Could we do better?</p>
</li>
<li><p>As we know the number must not be divisible by any number &gt; <em>n</em> / 2, we can immediately cut the total iterations half by dividing only up to <em>n</em> / 2. Could we still do better?</p>
</li>
<li><p>Let’s write down all of 12’s factors:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">2 × 6 = 12</div><div class="line">3 × 4 = 12</div><div class="line">4 × 3 = 12</div><div class="line">6 × 2 = 12</div></pre></td></tr></table></figure>
<p>As you can see, calculations of 4 × 3 and 6 × 2 are not necessary. Therefore, we only need to consider factors up to √<em>n</em> because, if <em>n</em> is divisible by some number <em>p</em>, then <em>n</em> = <em>p</em> × <em>q</em> and since <em>p</em> ≤ <em>q</em>, we could derive that <em>p</em> ≤ √<em>n</em>.</p>
<p>Our total runtime has now improved to O(<em>n</em>1.5), which is slightly better. Is there a faster approach?</p>
</li>
</ol>
<ol>
<li><p>The <a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" target="_blank" rel="external">Sieve of Eratosthenes</a> is one of the most efficient ways to find all prime numbers up to <em>n</em>. But don’t let that name scare you, I promise that the concept is surprisingly simple.</p>
<p><img src="https://leetcode.com/static/images/solutions/Sieve_of_Eratosthenes_animation.gif" alt="img"></p>
<p>Sieve of Eratosthenes: algorithm steps for primes below 121. “<a href="http://commons.wikimedia.org/wiki/File:Sieve_of_Eratosthenes_animation.gif" target="_blank" rel="external">Sieve of Eratosthenes Animation</a>“ by <a href="http://de.wikipedia.org/wiki/Benutzer:SKopp" target="_blank" rel="external">SKopp</a> is licensed under <a href="http://creativecommons.org/licenses/by/2.0/" target="_blank" rel="external">CC BY 2.0</a>. </p>
<p>We start off with a table of <em>n</em> numbers. Let’s look at the first number, 2. We know all multiples of 2 must not be primes, so we mark them off as non-primes. Then we look at the next number, 3. Similarly, all multiples of 3 such as 3 × 2 = 6, 3 × 3 = 9, … must not be primes, so we mark them off as well. Now we look at the next number, 4, which was already marked off. What does this tell you? Should you mark off all multiples of 4 as well?</p>
</li>
<li><p>4 is not a prime because it is divisible by 2, which means all multiples of 4 must also be divisible by 2 and were already marked off. So we can skip 4 immediately and go to the next number, 5. Now, all multiples of 5 such as 5 × 2 = 10, 5 × 3 = 15, 5 × 4 = 20, 5 × 5 = 25, … can be marked off. There is a slight optimization here, we do not need to start from 5 × 2 = 10. Where should we start marking off?</p>
</li>
<li><p>In fact, we can mark off multiples of 5 starting at 5 × 5 = 25, because 5 × 2 = 10 was already marked off by multiple of 2, similarly 5 × 3 = 15 was already marked off by multiple of 3. Therefore, if the current number is <em>p</em>, we can always mark off multiples of <em>p</em> starting at <em>p</em>2, then in increments of <em>p</em>: <em>p</em>2 + <em>p</em>, <em>p</em>2 + 2<em>p</em>, … Now what should be the terminating loop condition?</p>
</li>
<li><p>It is easy to say that the terminating loop condition is <em>p</em> &lt; <em>n</em>, which is certainly correct but not efficient. Do you still remember <em>Hint #3</em>?</p>
</li>
</ol>
<p>这也就是官方给出的思路，所以我先试了一下，给出 <em>p</em> ≤ √<em>n</em>的情况，能不能通过。</p>
<p>O(n^1.5), Time limit exceeded. </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countPrimes</span><span class="params">(self, n)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type n: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        count = <span class="number">0</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n):</div><div class="line">            flag = <span class="number">1</span></div><div class="line">            k = <span class="number">2</span></div><div class="line">            <span class="keyword">while</span> (k * k &lt;= i):</div><div class="line">                <span class="keyword">if</span> (i % k == <span class="number">0</span>):</div><div class="line">                    flag = <span class="number">0</span></div><div class="line">                    <span class="keyword">break</span></div><div class="line">                k += <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> (flag):</div><div class="line">                count += <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> count</div></pre></td></tr></table></figure>
<p>答案显然是不行。</p>
<p>接下来我们试一下图中所给的方法。</p>
<p>要注意，<code>primes</code>数组存储的应当是布尔量而不是普通的整数。如果是普通的整数，会造成<code>memory limit exceed</code>的错误。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countPrimes</span><span class="params">(self, n)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type n: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        count = <span class="number">0</span></div><div class="line">        primes = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n+<span class="number">1</span>):</div><div class="line">            primes.append(<span class="keyword">True</span>)</div><div class="line">        </div><div class="line">        i = <span class="number">2</span></div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (i * i &lt; n):</div><div class="line">            <span class="keyword">if</span> (primes[i] == <span class="keyword">True</span>):</div><div class="line">                k = i</div><div class="line">                <span class="keyword">while</span>(i * k &lt;= n):</div><div class="line">                    <span class="keyword">if</span> (primes[i * k] &gt; <span class="number">0</span>):</div><div class="line">                        primes[i * k] = <span class="keyword">False</span></div><div class="line">                    k += <span class="number">1</span></div><div class="line">            i += <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n):</div><div class="line">            <span class="keyword">if</span> (primes[i] == <span class="keyword">True</span>):</div><div class="line">                count += <span class="number">1</span></div><div class="line">                </div><div class="line">        <span class="keyword">return</span> count</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
            <tag> Easy </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[203 Remove Linked List Elements ]]></title>
      <url>http://wf94.github.io/2017/01/20/203-Remove-Linked-List-Elements/</url>
      <content type="html"><![CDATA[<p>Remove all elements from a linked list of integers that have value <strong>val</strong>.</p>
<p><strong>Example</strong><br><strong>Given:</strong> 1 –&gt; 2 –&gt; 6 –&gt; 3 –&gt; 4 –&gt; 5 –&gt; 6,  <strong>val</strong> = 6<br><strong>Return:</strong> 1 –&gt; 2 –&gt; 3 –&gt; 4 –&gt; 5 </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>简单的链表删除操作。</p>
<p>一定要搞清楚边界条件：如果删除第一个或者最后一个元素会怎么样。然后问题就迎刃而解了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for singly-linked list.</span></div><div class="line"><span class="comment"># class ListNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.next = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElements</span><span class="params">(self, head, val)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type head: ListNode</div><div class="line">        :type val: int</div><div class="line">        :rtype: ListNode</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> (head):</div><div class="line">            cur = head</div><div class="line">            <span class="keyword">while</span> (cur):</div><div class="line">                <span class="keyword">if</span> (cur.val == val):</div><div class="line">                    <span class="keyword">if</span> (cur.next):</div><div class="line">                        head = cur.next</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        head = <span class="keyword">None</span></div><div class="line">                    cur = head</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="keyword">break</span></div><div class="line">            <span class="keyword">if</span> (cur):   </div><div class="line">                <span class="keyword">while</span> (cur.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>):</div><div class="line">                    <span class="keyword">if</span> (cur.next.val == val):</div><div class="line">                        cur.next = cur.next.next</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        cur = cur.next</div><div class="line">                </div><div class="line">        <span class="keyword">return</span> head</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[198 House Robber]]></title>
      <url>http://wf94.github.io/2017/01/19/198-House-Robber/</url>
      <content type="html"><![CDATA[<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.</p>
<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight <strong>without alerting the police</strong>.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题就相当于是给定一个一维数组，不能访问连续的两个元素，还要保证取到的元素之和最大。</p>
<p>我们考虑利用动态规划的方法来做。</p>
<p>首先确定最基本的问题，我们假设街道里的房子放在<code>nums</code>数组里。如果街道里没有房子，或者只有一栋房子，最大值当然是空值或者唯一值。而如果街道里有两栋房子，取收益最大的那栋即可。</p>
<p>现在考虑三栋房子的情况。假设我们已经知道了前两栋房子的最大收益，现在将第三栋房子加入考虑。如果取到了第三栋房子，那么第二栋房子就不能取。所以我们能够得到的最大值，就是<code>nums[1]</code>与<code>nums[3]</code>之和与<code>nums[2]</code>之间的最大值。</p>
<p>如果加入第四栋房子，其实情况也是一样的，我们能够得到的最大值，是<code>nums[2]</code>与<code>nums[1]</code>的最大值，加上<code>nums[4]</code>的值——与<code>nums[3]</code>，也就是第三栋房子的时候取到的最大值之间，所得到的最大值。</p>
<p>这样一来，我们就建立了一个可以一直往下寻找的问题，推出了问题的解决方法。</p>
<p>现在我们需要开一个新的空间来存储我们得到的最大值。直觉上来说，我们就利用一个一维数组，就可以记录这些值。一维数组的每一项，都对应着我们从左到右遍历到该元素之前可以达到的收益最大值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rob</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        median = []</div><div class="line">        length = len(nums)</div><div class="line">        <span class="keyword">if</span> (length &lt;= <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        <span class="keyword">elif</span> (length == <span class="number">1</span>):</div><div class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</div><div class="line">        <span class="keyword">elif</span> (length == <span class="number">2</span>):</div><div class="line">            <span class="keyword">return</span> max(nums[<span class="number">0</span>], nums[<span class="number">1</span>])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            median.append(nums[<span class="number">0</span>])</div><div class="line">            median.append(max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]))</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,length):</div><div class="line">                median.append(max(nums[i] + median[i<span class="number">-2</span>], median[i<span class="number">-1</span>]))</div><div class="line">            <span class="keyword">return</span> median[length<span class="number">-1</span>]</div></pre></td></tr></table></figure>
<p><a href="http://xiadong.info/2016/11/leetcode-198-house-robber/" target="_blank" rel="external">http://xiadong.info/2016/11/leetcode-198-house-robber/</a></p>
<p><a href="http://bookshadow.com/weblog/2015/04/01/leetcode-house-robber/" target="_blank" rel="external">http://bookshadow.com/weblog/2015/04/01/leetcode-house-robber/</a></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Dynamic Programming </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[190 Reverse Bits]]></title>
      <url>http://wf94.github.io/2017/01/18/190-Reverse-Bits/</url>
      <content type="html"><![CDATA[<p>Reverse bits of a given 32 bits unsigned integer.</p>
<p>For example, given input 43261596 (represented in binary as <strong>00000010100101000001111010011100</strong>), return 964176192 (represented in binary as <strong>00111001011110000010100101000000</strong>).</p>
<p><strong>Follow up</strong>:<br> If this function is called many times, how would you optimize it? </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用位操作，将掩码设定为<code>0x80000000</code>，利用左移操作，将每一位由高到低放入list中，再倒转。</p>
<p>在最后生成结果的时候也采用移位的方法，从list中取出每一位，并将结果进行叠加。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="comment"># @param n, an integer</span></div><div class="line">    <span class="comment"># @return an integer</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseBits</span><span class="params">(self, n)</span>:</span></div><div class="line">        res = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</div><div class="line">            tmp = n &amp; <span class="number">0x80000000</span></div><div class="line">            tmp = tmp &gt;&gt; <span class="number">31</span></div><div class="line">            res.append(tmp)</div><div class="line">            n = n &lt;&lt; <span class="number">1</span></div><div class="line">        <span class="keyword">print</span> res</div><div class="line"></div><div class="line">        ans = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</div><div class="line">            ans = ans &lt;&lt; <span class="number">1</span></div><div class="line">            ans += res[<span class="number">31</span> - i]</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[189 Rotate Array]]></title>
      <url>http://wf94.github.io/2017/01/17/189-Rotate-Array/</url>
      <content type="html"><![CDATA[<p>Rotate an array of <em>n</em> elements to the right by <em>k</em> steps.</p>
<p>For example, with <em>n</em> = 7 and <em>k</em> = 3, the array <code>[1,2,3,4,5,6,7]</code> is rotated to <code>[5,6,7,1,2,3,4]</code>. </p>
<p><strong>Note:</strong><br> Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.                                                                                                                                               </p>
<p><strong>Hint:</strong><br> Could you do it in-place with O(1) extra space? </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用Python语言对于list操作的性质，可以得到空间复杂度为O(1)的结果。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self, nums, k)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :type k: int</div><div class="line">        :rtype: void Do not return anything, modify nums in-place instead.</div><div class="line">        """</div><div class="line">        length = len(nums)</div><div class="line">        <span class="keyword">if</span> (k &gt; length):</div><div class="line">            k = k % length</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length - k):</div><div class="line">            nums.append(nums[<span class="number">0</span>])</div><div class="line">            <span class="keyword">del</span> nums[<span class="number">0</span>]</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[168 Excel Sheet Column Title]]></title>
      <url>http://wf94.github.io/2017/01/16/168-Excel-Sheet-Column-Title/</url>
      <content type="html"><![CDATA[<p>Given a positive integer, return its corresponding column title as appear in an Excel sheet.</p>
<p>For example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1 -&gt; A</div><div class="line">2 -&gt; B</div><div class="line">3 -&gt; C</div><div class="line">...</div><div class="line">26 -&gt; Z</div><div class="line">27 -&gt; AA</div><div class="line">28 -&gt; AB</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>归根到底，这道题就是一个进制转换的问题。只不过把传统的10-&gt;2 / 10-&gt;8 / 8-&gt;16 等等，变成了26进制的转化而已。</p>
<p>注意在python当中，<code>ord()</code>函数用来获取一个字符的ASCII码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def convertToTitle(self, n):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type n: int</div><div class="line">        :rtype: str</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        res = &quot;&quot;</div><div class="line">        while (n &gt; 0):</div><div class="line">            if (n % 26 != 0):</div><div class="line">                res = chr(n % 26 + ord(&quot;A&quot;) - 1) + res</div><div class="line">                n = n / 26</div><div class="line">            else:</div><div class="line">                res = &quot;Z&quot; + res</div><div class="line">                n = (n / 26) - 1</div><div class="line">        return res</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
            <tag> Easy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[165 Compare Version Numbers]]></title>
      <url>http://wf94.github.io/2017/01/15/165-Compare-Version-Numbers/</url>
      <content type="html"><![CDATA[<p>Compare two version numbers <em>version1</em> and <em>version2</em>.<br> If <em>version1</em> &gt; <em>version2</em> return 1, if <em>version1</em> &lt; <em>version2</em> return -1, otherwise return 0.</p>
<p>You may assume that the version strings are non-empty and contain only digits and the <code>.</code> character.<br> The <code>.</code> character does not represent a decimal point and is used to separate number sequences.<br> For instance, <code>2.5</code> is not “two and a half” or “half way to version three”, it is the fifth second-level revision of the second first-level revision.</p>
<p>Here is an example of version numbers ordering:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0.1 &lt; 1.1 &lt; 1.2 &lt; 13.37</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>题目其实不难，需要我们去比较版本号。</p>
<p>要注意，版本号和小数不同，可以是诸如<code>major.minor(.build)</code>这样的形式。其中，build号还可以用日期（如<code>1.2.20170101</code>来命名，另外，版本号的排序也有讲究。举例：</p>
<p><code>1.124 &gt; 1.4 &gt; 0.134 &gt; 0.5 &gt; 0.0.2 &gt; 0.0.1</code></p>
<p>弄清楚以上的规律，代码也就好组织了。将所提供的字符串按照规则转换为可以比较的形式即可。在代码中，我利用了list对圆点隔开的每一个数进行存储，从而也可以比较版本号。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compareVersion</span><span class="params">(self, version1, version2)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type version1: str</div><div class="line">        :type version2: str</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        v1 = []</div><div class="line">        v2 = []</div><div class="line">        tmp = <span class="string">""</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> version1:</div><div class="line">            <span class="keyword">if</span> (i == <span class="string">"."</span>):</div><div class="line">                v1.append(int(tmp))</div><div class="line">                tmp = <span class="string">""</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                tmp += i</div><div class="line">        v1.append(int(tmp))</div><div class="line">        tmp = <span class="string">""</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> version2:</div><div class="line">            <span class="keyword">if</span> (j == <span class="string">"."</span>):</div><div class="line">                v2.append(int(tmp))</div><div class="line">                tmp = <span class="string">""</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                tmp += j</div><div class="line">        v2.append(int(tmp))</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (len(v1) <span class="keyword">and</span> v1[<span class="number">-1</span>] == <span class="number">0</span>):</div><div class="line">            <span class="keyword">del</span> v1[<span class="number">-1</span>]</div><div class="line">        <span class="keyword">while</span> (len(v2) <span class="keyword">and</span> v2[<span class="number">-1</span>] == <span class="number">0</span>):</div><div class="line">            <span class="keyword">del</span> v2[<span class="number">-1</span>]</div><div class="line">        </div><div class="line">        len1 = len(v1)</div><div class="line">        len2 = len(v2)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(min(len1,len2)):</div><div class="line">            <span class="keyword">if</span> (v1[i] &gt; v2[i]):</div><div class="line">                <span class="keyword">return</span> <span class="number">1</span></div><div class="line">            <span class="keyword">elif</span> (v1[i] &lt; v2[i]):</div><div class="line">                <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">        <span class="keyword">if</span> (len1 == len2):</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        <span class="keyword">elif</span> (len1 &gt; len2):</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> String </tag>
            
            <tag> Medium </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[160 Intersection of Two Linked Lists]]></title>
      <url>http://wf94.github.io/2017/01/14/160-Intersection-of-Two-Linked-Lists/</url>
      <content type="html"><![CDATA[<p>Write a program to find the node at which the intersection of two singly linked lists begins.</p>
<p>For example, the following two linked lists: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">A:          a1 → a2</div><div class="line">                   ↘</div><div class="line">                     c1 → c2 → c3</div><div class="line">                   ↗            </div><div class="line">B:     b1 → b2 → b3</div></pre></td></tr></table></figure>
<p>begin to intersect at node c1.</p>
<p><strong>Notes:</strong> </p>
<ul>
<li>If the two linked lists have no intersection at all, return <code>null</code>.</li>
<li>The linked lists must retain their original structure after the function returns. </li>
<li>You may assume there are no cycles anywhere in the entire linked structure.</li>
<li>Your code should preferably run in O(n) time and use only O(1) memory.</li>
</ul>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先要明白题意，如果两个链表相交，这两个链表也不会再分离开。</p>
<p>从而可以先求出链表的长度。如果两个链表相交，对齐它们的尾部，总会在其中一个节点，两链表的值相同。</p>
<p>根据此思路，从而求出链表值相同的那个节点，即可以满足题意。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"># Definition for singly-linked list.</div><div class="line"># class ListNode(object):</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.next = None</div><div class="line"></div><div class="line">class Solution(object):</div><div class="line">    def getIntersectionNode(self, headA, headB):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type head1, head1: ListNode</div><div class="line">        :rtype: ListNode</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        curA = headA</div><div class="line">        curB = headB</div><div class="line">        lenA = 0</div><div class="line">        lenB = 0</div><div class="line">        while (curA):</div><div class="line">            curA = curA.next</div><div class="line">            lenA += 1</div><div class="line">        while (curB):</div><div class="line">            curB = curB.next</div><div class="line">            lenB += 1</div><div class="line">            </div><div class="line">        if (curA != curB):</div><div class="line">            return None</div><div class="line">        else:</div><div class="line">            curA = headA</div><div class="line">            curB = headB</div><div class="line">            if (lenA &gt;= lenB):</div><div class="line">                for i in range(lenA-lenB):</div><div class="line">                    curA = curA.next</div><div class="line">            else:</div><div class="line">                for i in range(lenB-lenA):</div><div class="line">                    curB = curB.next</div><div class="line">            while (curA and curB):</div><div class="line">                if (curA == curB):</div><div class="line">                    return curA</div><div class="line">                else:</div><div class="line">                    curA = curA.next</div><div class="line">                    curB = curB.next</div><div class="line">        return None</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[144 Binary Tree Preorder Traversal]]></title>
      <url>http://wf94.github.io/2017/01/13/144-Binary-Tree-Preorder-Traversal/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, return the <em>preorder</em> traversal of its nodes’ values.</p>
<p>For example:<br> Given binary tree <code>{1,#,2,3}</code>,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line"> \</div><div class="line">  2</div><div class="line"> /</div><div class="line">3</div></pre></td></tr></table></figure>
<p>return <code>[1,2,3]</code>. </p>
<p><strong>Note:</strong> Recursive solution is trivial, could you do it iteratively?</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>题目要求我们将树先序遍历，然后输出结果。</p>
<p>我们可以先简单地利用深度优先遍历，递归地得出结果。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for a binary tree node.</span></div><div class="line"><span class="comment"># class TreeNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.left = None</span></div><div class="line"><span class="comment">#         self.right = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type root: TreeNode</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        self.res = []</div><div class="line">        <span class="keyword">if</span> (root):</div><div class="line">            self.helper(root)</div><div class="line">        <span class="keyword">return</span> self.res</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, root)</span>:</span></div><div class="line">        self.res.append(root.val)</div><div class="line">        <span class="keyword">if</span> (root.left):</div><div class="line">            self.helper(root.left)</div><div class="line">        <span class="keyword">if</span> (root.right):</div><div class="line">            self.helper(root.right)</div></pre></td></tr></table></figure>
<p>如果不用递归的方法，可以利用栈来进行树的先序遍历。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type root: TreeNode</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        res = []</div><div class="line">        <span class="keyword">if</span> (root):</div><div class="line">            stack = [root]</div><div class="line">            </div><div class="line">            <span class="keyword">while</span> (stack):</div><div class="line">                cur = stack.pop()</div><div class="line">                res.append(cur.val)</div><div class="line">                <span class="keyword">if</span> (cur.right):</div><div class="line">                    stack.append(cur.right)</div><div class="line">                <span class="keyword">if</span> (cur.left):</div><div class="line">                    stack.append(cur.left)</div><div class="line">        <span class="keyword">return</span> res</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Stack </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[141 Linked List Cycle]]></title>
      <url>http://wf94.github.io/2017/01/13/141-Linked-List-Cycle/</url>
      <content type="html"><![CDATA[<p>Given a linked list, determine if it has a cycle in it. </p>
<p>Follow up:<br> Can you solve it without using extra space? </p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先尝试最直观的方法，将所有的节点都存起来，感觉上是比较麻烦。至少是O(n^2)的复杂度。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def hasCycle(self, head):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type head: ListNode</div><div class="line">        :rtype: bool</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        nodes = []</div><div class="line">        cur = head</div><div class="line">        while (cur):</div><div class="line">            nodes.append(cur)</div><div class="line">            if (cur.next):</div><div class="line">                if (cur.next in nodes):</div><div class="line">                    return True</div><div class="line">            cur = cur.next</div><div class="line">        return False</div></pre></td></tr></table></figure>
<p>利用哈希表对于这些节点进行存储，时间开销就会减少了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def hasCycle(self, head):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type head: ListNode</div><div class="line">        :rtype: bool</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        nodes = &#123;&#125;</div><div class="line">        cur = head</div><div class="line">        while (cur):</div><div class="line">            nodes[cur] = 1</div><div class="line">            if (cur.next):</div><div class="line">                if (nodes.has_key(cur.next)):</div><div class="line">                    return True</div><div class="line">            cur = cur.next</div><div class="line">        return False</div></pre></td></tr></table></figure></p>
<p>另外，利用快慢指针的方法也非常巧妙。快的指针每次前进两步，慢的指针每次前进一步。如果链表里面有一个环，快慢指针一定会相遇。</p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Two Pointers </tag>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[125 Valid Palindrome]]></title>
      <url>http://wf94.github.io/2017/01/12/125-Valid-Palindrome/</url>
      <content type="html"><![CDATA[<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases. </p>
<p>For example,<br><code>&quot;A man, a plan, a canal: Panama&quot;</code> is a palindrome.<br><code>&quot;race a car&quot;</code> is <em>not</em> a palindrome. </p>
<p><strong>Note:</strong><br> Have you consider that the string might be empty? This is a good question to ask during an interview.</p>
<p>For the purpose of this problem, we define empty string as valid palindrome. </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>判断一个字符串是否为回文。注意，空字符串也是回文。</p>
<p>在Python当中，如果对字符串频繁采取+操作，会非常耗时。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        s = s.lower()</div><div class="line">        alphabet = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789"</span></div><div class="line">        res = <span class="string">""</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</div><div class="line">            <span class="keyword">if</span> (i <span class="keyword">in</span> alphabet):</div><div class="line">            	<span class="comment"># 最花时间的操作是在这儿对于字符串的操作</span></div><div class="line">                <span class="comment"># 在python，list.append()的时间复杂度为O(1)，可以考虑转换为list</span></div><div class="line">                res += i</div><div class="line">        </div><div class="line">        length = len(res)</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            <span class="keyword">if</span> (res[i] != res[-(i+<span class="number">1</span>)]):</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>利用接下来的代码，便不会超时。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        s = s.lower()</div><div class="line">        <span class="comment">#alphabet = "abcdefghijklmnopqrstuvwxyz0123456789"</span></div><div class="line">        res = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</div><div class="line">            <span class="keyword">if</span> (ord(<span class="string">"a"</span>) &lt;= ord(i) &lt;= ord(<span class="string">"z"</span>) <span class="keyword">or</span> ord(<span class="string">"0"</span>) &lt;= ord(i) &lt;= ord(<span class="string">"9"</span>)):</div><div class="line">                res.append(i)</div><div class="line">        </div><div class="line">        length = len(res)</div><div class="line">        i = <span class="number">0</span></div><div class="line">        j = length - <span class="number">1</span></div><div class="line">        <span class="keyword">while</span> ( i &lt; j ):</div><div class="line">            <span class="keyword">if</span> (res[i] != res[j]):</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">            i += <span class="number">1</span></div><div class="line">            j -= <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> String </tag>
            
            <tag> Two Pointers </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[119 Pascal's Triangle II]]></title>
      <url>http://wf94.github.io/2017/01/11/119-Pascal-s-Triangle-II/</url>
      <content type="html"><![CDATA[<p>Given an index <em>k</em>, return the <em>k</em>th row of the Pascal’s triangle.</p>
<p>For example, given <em>k</em> = 3,<br> Return <code>[1,3,3,1]</code>. </p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>杨辉三角有许多重要的性质。其中一个，就是它第n行数字代表的含义，恰好是n阶多项式展开的系数之值；推而广之，也就是n的各个组合数的值。因此在这一题中，直接采用求组合数的方法，利用组合数求解的公式即可得到结果。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getRow</span><span class="params">(self, rowIndex)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type rowIndex: int</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        res = [<span class="number">1</span>]</div><div class="line">        <span class="keyword">if</span> (rowIndex &lt;= <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> res</div><div class="line">        <span class="keyword">elif</span> (rowIndex == <span class="number">1</span>):</div><div class="line">            res.append(<span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> res</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, rowIndex):</div><div class="line">                <span class="comment"># 利用了math类当中的factorial函数求阶乘。</span></div><div class="line">                res.append(math.factorial(rowIndex)/math.factorial(i)/math.factorial(rowIndex-i))</div><div class="line">            res.append(<span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> res</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[118 Pascal's Triangle]]></title>
      <url>http://wf94.github.io/2017/01/11/118-Pascal-s-Triangle/</url>
      <content type="html"><![CDATA[<p>Given <em>numRows</em>, generate the first <em>numRows</em> of Pascal’s triangle.</p>
<p>For example, given <em>numRows</em> = 5,<br> Return </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">     [1],</div><div class="line">    [1,1],</div><div class="line">   [1,2,1],</div><div class="line">  [1,3,3,1],</div><div class="line"> [1,4,6,4,1]</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>帕斯卡三角，也就是杨辉三角，有着许多重要的性质。</p>
<p>在本题中，简单地利用该行元素和前一行元素之间的关系，就可以通过迭代的方式求得结果。</p>
<p>在这两行当中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">  [1, 2, 1],</div><div class="line">   \ / \ /</div><div class="line">    |   |</div><div class="line">[1, 3 , 3 ,1],</div></pre></td></tr></table></figure>
<p>最后一行除了最左边的1以外，中间两个元素分别可以通过1+2=3求得。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> copy</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(self, numRows)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type numRows: int</div><div class="line">        :rtype: List[List[int]]</div><div class="line">        """</div><div class="line">        res = []</div><div class="line">        row1 = [<span class="number">1</span>]</div><div class="line">        row2 = [<span class="number">1</span>,<span class="number">1</span>]</div><div class="line">        <span class="keyword">if</span> (numRows &lt;= <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> res</div><div class="line">        <span class="keyword">elif</span> (numRows == <span class="number">1</span>):</div><div class="line">            res.append(row1)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            res.append(row1)</div><div class="line">            res.append(row2)</div><div class="line">            <span class="comment"># 利用浅拷贝来防止list出现混乱</span></div><div class="line">            <span class="comment"># 其实也完全可以不用</span></div><div class="line">            prev = copy.copy(row2)</div><div class="line">            <span class="keyword">while</span>(numRows &gt; <span class="number">2</span>):</div><div class="line">                row = [<span class="number">1</span>]</div><div class="line">                length = len(prev)</div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(len(prev)<span class="number">-1</span>):</div><div class="line">                    row.append(prev[i] + prev[i+<span class="number">1</span>])</div><div class="line">                row.append(<span class="number">1</span>)</div><div class="line">                res.append(row)</div><div class="line">                prev = copy.copy(row)</div><div class="line">                numRows -= <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> res</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[112 Path Sum]]></title>
      <url>http://wf94.github.io/2017/01/10/112-Path-Sum/</url>
      <content type="html"><![CDATA[<p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum. </p>
<p><code>sum = 22</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">      5</div><div class="line">     / \</div><div class="line">    4   8</div><div class="line">   /   / \</div><div class="line">  11  13  4</div><div class="line"> /  \      \</div><div class="line">7    2      1</div></pre></td></tr></table></figure>
<p>return true, as there exist a root-to-leaf path <code>5-&gt;4-&gt;11-&gt;2</code> which sum is 22.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这一题也是利用深度优先遍历(DFS)的递归方法来进行查找。</p>
<p>需要注意的是，只有自根节点到叶子节点的路径才算是一条符合题意的路径，其它情况都不需要额外考虑了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for a binary tree node.</span></div><div class="line"><span class="comment"># class TreeNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.left = None</span></div><div class="line"><span class="comment">#         self.right = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasPathSum</span><span class="params">(self, root, sum)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type root: TreeNode</div><div class="line">        :type sum: int</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> (root):</div><div class="line">            <span class="keyword">return</span> self.DFS(root, sum)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DFS</span><span class="params">(self, root, sum)</span>:</span></div><div class="line">        <span class="keyword">if</span> (root):</div><div class="line">            val = root.val</div><div class="line">            sum -= val</div><div class="line">            <span class="keyword">if</span>(root.left <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">and</span> root.right <span class="keyword">is</span> <span class="keyword">None</span>):</div><div class="line">                <span class="keyword">if</span> (sum == <span class="number">0</span>):</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">return</span> self.DFS(root.left, sum) <span class="keyword">or</span> self.DFS(root.right, sum)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Tree </tag>
            
            <tag> DFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[111 Minimum Depth of Binary Tree]]></title>
      <url>http://wf94.github.io/2017/01/09/111-Minimum-Depth-of-Binary-Tree/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, find its minimum depth.</p>
<p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用深度优先遍历（DFS），采用递归的方法解决这道问题。</p>
<p>在进行递归的时候，将每次递归的结果存储在数组中，根据题意，返回数组的最小值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for a binary tree node.</span></div><div class="line"><span class="comment"># class TreeNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.left = None</span></div><div class="line"><span class="comment">#         self.right = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    res = []</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDepth</span><span class="params">(self, root)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type root: TreeNode</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> (root):</div><div class="line">            self.res = []</div><div class="line">            self.DFS(root, <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> min(self.res)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DFS</span><span class="params">(self, root, depth)</span>:</span></div><div class="line">        <span class="keyword">if</span> (root):</div><div class="line">            <span class="keyword">if</span> (root.left <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">and</span> root.right <span class="keyword">is</span> <span class="keyword">None</span>):</div><div class="line">                self.res.append(depth)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self.DFS(root.left, depth+<span class="number">1</span>)</div><div class="line">                self.DFS(root.right, depth+<span class="number">1</span>)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Tree </tag>
            
            <tag> DFS </tag>
            
            <tag> BFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[107 Binary Tree Level Order Traversal II]]></title>
      <url>http://wf94.github.io/2017/01/08/107-Binary-Tree-Level-Order-Traversal-II/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, return the <em>bottom-up level order</em> traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).</p>
<p>For example:<br> Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  3</div><div class="line"> / \</div><div class="line">9  20</div><div class="line">  /  \</div><div class="line"> 15   7</div></pre></td></tr></table></figure>
<p>return its bottom-up level order traversal as:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [15,7],</div><div class="line">  [9,20],</div><div class="line">  [3]</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>102题也是一道层次遍历的题。在102题中，题目要求是采用自顶向下的输出方式；而这一题采用了自底向上的输出方式。</p>
<p>由于两道题思路相同，都是在队列访问的时候加入空节点用于分割，就不再赘述了。代码后面附上参考链接。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for a binary tree node.</span></div><div class="line"><span class="comment"># class TreeNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.left = None</span></div><div class="line"><span class="comment">#         self.right = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrderBottom</span><span class="params">(self, root)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type root: TreeNode</div><div class="line">        :rtype: List[List[int]]</div><div class="line">        """</div><div class="line">        q = []</div><div class="line">        res = []</div><div class="line">        layer = []</div><div class="line">        <span class="keyword">if</span> (root):</div><div class="line">            q.append(root)</div><div class="line">            q.append(<span class="keyword">None</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> q</div><div class="line">        <span class="keyword">while</span> (len(q) &gt; <span class="number">0</span>):</div><div class="line">            node = q[<span class="number">0</span>]</div><div class="line">            layer.append(q[<span class="number">0</span>])</div><div class="line">            <span class="keyword">del</span> q[<span class="number">0</span>]</div><div class="line">            <span class="keyword">if</span> (node <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>):</div><div class="line">                <span class="keyword">if</span> (node.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>):</div><div class="line">                    q.append(node.left)</div><div class="line">                <span class="keyword">if</span> (node.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>):</div><div class="line">                    q.append(node.right)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                layerval = []</div><div class="line">                <span class="keyword">if</span>(len(q) &gt; <span class="number">0</span>):</div><div class="line">                    q.append(<span class="keyword">None</span>)</div><div class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> layer:</div><div class="line">                        <span class="keyword">if</span> (i):</div><div class="line">                            layerval.append(i.val)</div><div class="line">                    res.append(layerval)</div><div class="line">                    layer = []</div><div class="line">        lastlayer = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> layer:</div><div class="line">            <span class="keyword">if</span> (i):</div><div class="line">                lastlayer.append(i.val)</div><div class="line">        res.append(lastlayer)</div><div class="line">        </div><div class="line">        res.reverse()</div><div class="line">        <span class="keyword">return</span> res</div></pre></td></tr></table></figure>
<p>参考链接：<a href="http://www.cnblogs.com/miloyip/archive/2010/05/12/binary_tree_traversal.html" target="_blank" rel="external">http://www.cnblogs.com/miloyip/archive/2010/05/12/binary_tree_traversal.html</a></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Tree </tag>
            
            <tag> BFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[102 Binary Tree Level Order Traversal]]></title>
      <url>http://wf94.github.io/2017/01/08/102-Binary-Tree-Level-Order-Traversal/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, return the <em>level order</em> traversal of its nodes’ values. (ie, from left to right, level by level).</p>
<p>For example:<br> Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  3</div><div class="line"> / \</div><div class="line">9  20</div><div class="line">  /  \</div><div class="line"> 15   7</div></pre></td></tr></table></figure>
<p>return its level order traversal as:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [3],</div><div class="line">  [9,20],</div><div class="line">  [15,7]</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>二叉树的层次优先遍历，需要涉及广度优先搜索(BFS)。将节点按层次出入队列可以轻松地输出连续的层次优先遍历结果。但是如果需要对每一层分别进行输出，就比较有技巧了。</p>
<p>比较常用的办法是使用空节点来充当层与层之间的分隔符，在python当中用<code>None</code>来表示。当队头访问到空节点后，队尾相应补充一个空节点，是为下一层的分隔符。需要注意的是，队列当中不能够添加额外的空节点，以防分层错乱；如果访问到树的底部，需要注意不要再添加空节点，以防陷入死循环。</p>
<p>python有自带的Queue（队列）类。在这里我利用list实现了一个简单的Queue，也可以实现同样的功能。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for a binary tree node.</span></div><div class="line"><span class="comment"># class TreeNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.left = None</span></div><div class="line"><span class="comment">#         self.right = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type root: TreeNode</div><div class="line">        :rtype: List[List[int]]</div><div class="line">        """</div><div class="line">        q = []</div><div class="line">        level = []</div><div class="line">        res = []</div><div class="line">        <span class="keyword">if</span> (root):</div><div class="line">            q.append(root)</div><div class="line">            q.append(<span class="keyword">None</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> q</div><div class="line">        <span class="keyword">while</span>(len(q) &gt; <span class="number">0</span>):</div><div class="line">            node = q[<span class="number">0</span>]</div><div class="line">            level.append(node)</div><div class="line">            <span class="keyword">del</span> q[<span class="number">0</span>]</div><div class="line">            <span class="keyword">if</span>(node):</div><div class="line">                <span class="keyword">if</span>(node.left):</div><div class="line">                    q.append(node.left)</div><div class="line">                <span class="keyword">if</span>(node.right):</div><div class="line">                    q.append(node.right)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                values = []</div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> level:</div><div class="line">                    <span class="keyword">if</span> (i):</div><div class="line">                        values.append(i.val)</div><div class="line">                res.append(values)</div><div class="line">                level = []</div><div class="line">                <span class="keyword">if</span>(len(q) &gt; <span class="number">0</span>):</div><div class="line">                    q.append(<span class="keyword">None</span>)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> res</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Tree </tag>
            
            <tag> BFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[101 Symmetric Tree]]></title>
      <url>http://wf94.github.io/2017/01/07/101-Symmetric-Tree/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p>
<p>For example, this binary tree <code>[1,2,2,3,4,4,3]</code> is symmetric: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    1</div><div class="line">   / \</div><div class="line">  2   2</div><div class="line"> / \ / \</div><div class="line">3  4 4  3</div></pre></td></tr></table></figure>
<p>But the following <code>[1,2,2,null,3,null,3]</code>  is not:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  1</div><div class="line"> / \</div><div class="line">2   2</div><div class="line"> \   \</div><div class="line"> 3    3</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>和其它的树相关的题目一样，这道题也可以考虑用DFS来进行搜索。在搜索的过程中，递归地判断左右子树是否符合对称条件。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for a binary tree node.</span></div><div class="line"><span class="comment"># class TreeNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.left = None</span></div><div class="line"><span class="comment">#         self.right = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSymmetric</span><span class="params">(self, root)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type root: TreeNode</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> (root):</div><div class="line">            <span class="keyword">return</span> self.Symmetric(root.left, root.right)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Symmetric</span><span class="params">(self, left, right)</span>:</span></div><div class="line">        <span class="keyword">if</span> (left <span class="keyword">and</span> right):</div><div class="line">            <span class="keyword">if</span> (left.val == right.val):</div><div class="line">                <span class="keyword">return</span> self.Symmetric(left.left, right.right) <span class="keyword">and</span> self.Symmetric(left.right, right.left)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">elif</span> (left <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">and</span> right <span class="keyword">is</span> <span class="keyword">None</span>):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Tree </tag>
            
            <tag> DFS </tag>
            
            <tag> BFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[094 Binary Tree Inorder Traversal]]></title>
      <url>http://wf94.github.io/2017/01/07/094-Binary-Tree-Inorder-Traversal/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, return the <em>inorder</em> traversal of its nodes’ values.</p>
<p>For example:<br> Given binary tree <code>[1,null,2,3]</code>,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line"> \</div><div class="line">  2</div><div class="line"> /</div><div class="line">3</div></pre></td></tr></table></figure>
<p>return <code>[1,3,2]</code>. </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>题目要求我们中序遍历一棵树。依照题意，应当先访问左子树，之后访问根，最后访问右子树。</p>
<p>利用递归实现起来很容易，利用深度优先遍历(DFS)即可实现。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for a binary tree node.</span></div><div class="line"><span class="comment"># class TreeNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.left = None</span></div><div class="line"><span class="comment">#         self.right = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type root: TreeNode</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        res = []</div><div class="line">        <span class="keyword">if</span> (root):</div><div class="line">            self.DFS(root,res) </div><div class="line">        <span class="keyword">return</span> res</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DFS</span><span class="params">(self, root, res)</span>:</span></div><div class="line">        <span class="keyword">if</span> (root.left):</div><div class="line">            self.DFS(root.left, res)</div><div class="line">        res.append(root.val)</div><div class="line">        <span class="keyword">if</span> (root.right):</div><div class="line">            self.DFS(root.right, res)</div></pre></td></tr></table></figure>
<p>题目又提出了进一步的要求，需要我们使用迭代的方法来解决问题。</p>
<p>一般来说，深度优先的操作可以转换为栈的操作。我们发现不仅需要用栈，还需要利用一个能存访问过节点的数据结构才行，不然就会无限循环访问左子树，无法跳出。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for a binary tree node.</span></div><div class="line"><span class="comment"># class TreeNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.left = None</span></div><div class="line"><span class="comment">#         self.right = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type root: TreeNode</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        stack = []</div><div class="line">        res = []</div><div class="line">        visit = &#123;&#125;</div><div class="line">        <span class="keyword">if</span> (root):</div><div class="line">            stack.append(root)</div><div class="line">            <span class="keyword">while</span>(len(stack)):</div><div class="line">                <span class="comment"># 在这里要注意加入visited选项，如果访问过该节点，就停止查找。</span></div><div class="line">                <span class="keyword">while</span> (stack[<span class="number">-1</span>].left <span class="keyword">and</span> <span class="keyword">not</span> visit.has_key(stack[<span class="number">-1</span>].left)):</div><div class="line">                    stack.append(stack[<span class="number">-1</span>].left)</div><div class="line">                cur = stack.pop()</div><div class="line">                res.append(cur.val)</div><div class="line">                visit[cur] = <span class="number">0</span></div><div class="line">                <span class="keyword">if</span> (cur.right):</div><div class="line">                    stack.append(cur.right)    </div><div class="line">        <span class="keyword">return</span> res</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Stack </tag>
            
            <tag> Hash Table </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[088 Merge Sorted Array]]></title>
      <url>http://wf94.github.io/2017/01/06/088-Merge-Sorted-Array/</url>
      <content type="html"><![CDATA[<p>Given two sorted integer arrays <em>nums1</em> and <em>nums2</em>, merge <em>nums2</em> into <em>nums1</em> as one sorted array.</p>
<p><strong>Note:</strong><br> You may assume that <em>nums1</em> has enough space (size that is greater or equal to <em>m</em> + <em>n</em>) to hold additional elements from <em>nums2</em>. The number of elements initialized in <em>nums1</em> and <em>nums2</em> are <em>m</em> and <em>n</em> respectively.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这一题要搞清楚题意。利用题意给出的条件在原数组中进行操作即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, nums1, m, nums2, n)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums1: List[int]</div><div class="line">        :type m: int</div><div class="line">        :type nums2: List[int]</div><div class="line">        :type n: int</div><div class="line">        :rtype: void Do not return anything, modify nums1 in-place instead.</div><div class="line">        """</div><div class="line">        i = m - <span class="number">1</span></div><div class="line">        j = n - <span class="number">1</span></div><div class="line">        k = m + n - <span class="number">1</span></div><div class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> <span class="keyword">and</span> j &gt;= <span class="number">0</span>):</div><div class="line">            <span class="keyword">if</span> (nums1[i] &gt; nums2[j]):</div><div class="line">                nums1[k] = nums1[i]</div><div class="line">                k -= <span class="number">1</span></div><div class="line">                i -= <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                nums1[k] = nums2[j]</div><div class="line">                k -= <span class="number">1</span></div><div class="line">                j -= <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span>):</div><div class="line">            nums1[k] = nums2[j]</div><div class="line">            k -= <span class="number">1</span></div><div class="line">            j -= <span class="number">1</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Array </tag>
            
            <tag> Two Pointers </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[069 Sqrt(x)]]></title>
      <url>http://wf94.github.io/2017/01/06/069-Sqrt-x/</url>
      <content type="html"><![CDATA[<p>Implement <code>int sqrt(int x)</code>.</p>
<p>Compute and return the square root of <em>x</em>.</p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用二分法进行搜索，搜索到的结果进行平方，由此进行比对。</p>
<p>如果需要利用牛顿迭代法解决，最后得到的结果精度都比较高，一般来说是浮点类型的。在这题中，利用二分法可以达到预期的效果。利用牛顿迭代法反而会开销稍大。</p>
<p>在写二分法的时候，千万要注意边界条件。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mySqrt</span><span class="params">(self, x)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type x: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> x &lt;= <span class="number">1</span>:</div><div class="line">            <span class="keyword">return</span> x</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            origin = x</div><div class="line">            high = x</div><div class="line">            low = <span class="number">0</span></div><div class="line">            prev = x</div><div class="line">            <span class="keyword">while</span> (prev != (high + low) / <span class="number">2</span>):</div><div class="line">                x = (high + low) / <span class="number">2</span></div><div class="line">                <span class="keyword">if</span> x * x &lt;= origin:</div><div class="line">                    low = x</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="comment"># 注意边界条件</span></div><div class="line">                    high = x + <span class="number">1</span></div><div class="line">                prev = x</div><div class="line">            <span class="keyword">return</span> low</div></pre></td></tr></table></figure>
<p>牛顿迭代法可以参考：<a href="https://en.wikipedia.org/wiki/Methods_of_computing_square_roots" target="_blank" rel="external">https://en.wikipedia.org/wiki/Methods_of_computing_square_roots</a></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
            <tag> Easy </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[067 Add Binary]]></title>
      <url>http://wf94.github.io/2017/01/05/067-Add-Binary/</url>
      <content type="html"><![CDATA[<p>Given two binary strings, return their sum (also a binary string). </p>
<p>For example,<br> a = <code>&quot;11&quot;</code><br> b = <code>&quot;1&quot;</code><br> Return <code>&quot;100&quot;</code>. </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>注意考虑几个条件即可：a和b的长度不同，则位数短的字符串首先停止迭代；注意循环过程中和循环结束后的进位。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addBinary</span><span class="params">(self, a, b)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type a: str</div><div class="line">        :type b: str</div><div class="line">        :rtype: str</div><div class="line">        """</div><div class="line">        lena = len(a)</div><div class="line">        lenb = len(b)</div><div class="line"></div><div class="line">        count = summ = carry = <span class="number">0</span></div><div class="line">        result = <span class="string">''</span></div><div class="line">        <span class="keyword">while</span> (count &lt; lena <span class="keyword">or</span> count &lt; lenb):</div><div class="line">            <span class="keyword">if</span> (count &lt; lena <span class="keyword">and</span> count &lt; lenb):</div><div class="line">                summ = int(a[-count<span class="number">-1</span>]) + int(b[-count<span class="number">-1</span>]) + carry</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">if</span> (lena &gt; lenb):</div><div class="line">                    summ = int(a[-count<span class="number">-1</span>]) + carry</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    summ = int(b[-count<span class="number">-1</span>]) + carry</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (summ == <span class="number">2</span>):</div><div class="line">                carry = <span class="number">1</span></div><div class="line">                summ = <span class="number">0</span></div><div class="line">            <span class="keyword">elif</span> (summ == <span class="number">3</span>):</div><div class="line">                carry = <span class="number">1</span></div><div class="line">                summ = <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                carry = <span class="number">0</span></div><div class="line">                </div><div class="line">            result = str(summ) + result</div><div class="line">            count += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> (carry == <span class="number">1</span>):</div><div class="line">            result = str(carry) + result</div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> String </tag>
            
            <tag> Math </tag>
            
            <tag> Easy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[058 Length of Last Word]]></title>
      <url>http://wf94.github.io/2017/01/05/058-Length-of-Last-Word/</url>
      <content type="html"><![CDATA[<p>Given a string <em>s</em> consists of upper/lower-case alphabets and empty space characters <code>&#39; &#39;</code>, return the length of last word in the string.</p>
<p>If the last word does not exist, return 0.</p>
<p><strong>Note:</strong> A word is defined as a character sequence consists of non-space characters only.</p>
<p>For example,<br> Given <em>s</em> = <code>&quot;Hello World&quot;</code>,<br> return <code>5</code>. </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>想办法提取这个字符串所有的单词，然后就可以得到最后一个单词了。关键就是在于空格的处理与分割。需要注意多个空格、开头为空格的情况。</p>
<p>在这里利用了python内置的split方法，也是可行的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLastWord</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> (len(s)):</div><div class="line">            l = s.split()</div><div class="line">            <span class="keyword">if</span> (len(l)):</div><div class="line">                <span class="keyword">return</span> len(l[len(l)<span class="number">-1</span>])</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<p>P.S. 290题(Word Pattern)涉及到关于空格处理与分割的方法。</p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> String </tag>
            
            <tag> Easy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[053 Maximum Subarray]]></title>
      <url>http://wf94.github.io/2017/01/05/053-Maximum-Subarray/</url>
      <content type="html"><![CDATA[<p>Find the contiguous subarray within an array (containing at least one number) which has the largest sum. </p>
<p>For example, given the array <code>[-2,1,-3,4,-1,2,1,-5,4]</code>,<br> the contiguous subarray <code>[4,-1,2,1]</code> has the largest sum = <code>6</code>. </p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题可以采用DP的方法来进行思考。遍历数组，访问每一个元素，计算当前元素之前的最大子数列(maximum subarray)的值。</p>
<p>利用两个变量来存储中间值，第一个变量final，存储的是当前的最大子数列(maximum subarray)的和，第二个变量sum，存储的是当前所有元素的非零和。</p>
<p>如果sum小于零，无论如何进行操作，后面的子数列(subarray)单独求和，要优于包含进之前元素的和。所以在计算sum的时候，如果和小于零，则置零。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        sum = <span class="number">0</span></div><div class="line">        final = float(<span class="string">"-inf"</span>)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</div><div class="line">            sum += i</div><div class="line">            final = max(sum, final)</div><div class="line">            <span class="keyword">if</span> (sum &lt; <span class="number">0</span>):</div><div class="line">                sum = <span class="number">0</span></div><div class="line">        <span class="keyword">return</span> final</div></pre></td></tr></table></figure>
<p>这也是一道经典的问题，该问题最初由布朗大学的Ulf Grenander教授于1977年提出，当初他为了展示数字图像中一个简单的最大然似然估计模型。不久之后卡内基梅隆大学的Jay Kadane提出了该问题的线性算法。上面所用的解法就类似于Kadane算法。</p>
<p>参考：<a href="https://en.wikipedia.org/wiki/Maximum_subarray_problem" target="_blank" rel="external">https://en.wikipedia.org/wiki/Maximum_subarray_problem</a></p>
<p>分治算法：<a href="http://xiadong.info/2016/08/leetcode-53-maximum-subarray/" target="_blank" rel="external">http://xiadong.info/2016/08/leetcode-53-maximum-subarray/</a></p>
<p><a href="https://discuss.leetcode.com/topic/426/how-to-solve-maximum-subarray-by-using-the-divide-and-conquer-approach/2" target="_blank" rel="external">https://discuss.leetcode.com/topic/426/how-to-solve-maximum-subarray-by-using-the-divide-and-conquer-approach/2</a></p>
<p>最大子数组问题详解：</p>
<p><a href="http://www.cnblogs.com/zghaobac/p/3315719.html" target="_blank" rel="external">http://www.cnblogs.com/zghaobac/p/3315719.html</a></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Array </tag>
            
            <tag> Dynamic Programming </tag>
            
            <tag> Divide and Conquer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[038 Count and Say]]></title>
      <url>http://wf94.github.io/2017/01/05/038-Count-and-Say/</url>
      <content type="html"><![CDATA[<p>The count-and-say sequence is the sequence of integers beginning as follows:<br><code>1, 11, 21, 1211, 111221, ...</code> </p>
<p><code>1</code> is read off as <code>&quot;one 1&quot;</code> or <code>11</code>.<br><code>11</code> is read off as <code>&quot;two 1s&quot;</code> or <code>21</code>.<br><code>21</code> is read off as <code>&quot;one 2</code>, then <code>one 1&quot;</code> or <code>1211</code>.</p>
<p>Given an integer <em>n</em>, generate the <em>n</em>th sequence. </p>
<p>Note: The sequence of integers will be represented as a string. </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>以1为种子，生成一个符合题意的结果即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countAndSay</span><span class="params">(self, n)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type n: int</div><div class="line">        :rtype: str</div><div class="line">        """</div><div class="line">        string = <span class="string">'1'</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</div><div class="line">            length = len(string)</div><div class="line">            count = <span class="number">1</span></div><div class="line">            temp = <span class="string">''</span></div><div class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> range(length):</div><div class="line">                <span class="keyword">if</span> (m == length<span class="number">-1</span>):</div><div class="line">                    temp += str(count)</div><div class="line">                    temp += string[m]</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="keyword">if</span> (string[m] == string[m+<span class="number">1</span>]):</div><div class="line">                        count += <span class="number">1</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        temp += str(count)</div><div class="line">                        temp += string[m]</div><div class="line">                        count = <span class="number">1</span></div><div class="line">            string = temp</div><div class="line">        <span class="keyword">return</span> string</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> String </tag>
            
            <tag> Easy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[036 Valid Sukodu]]></title>
      <url>http://wf94.github.io/2017/01/04/036-Valid-Sudoku/</url>
      <content type="html"><![CDATA[<p>Determine if a Sudoku is valid, according to: <a href="http://sudoku.com.au/TheRules.aspx" target="_blank" rel="external">Sudoku Puzzles - The Rules</a>.</p>
<p>The Sudoku board could be partially filled, where empty cells are filled with the character <code>&#39;.&#39;</code>.</p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>需要熟悉数独的规则，利用哈希表来进行判断。</p>
<p>数独的棋盘大小是一定的，不需要考虑时间的耗费，直接利用穷举法把所有情况列举出来，判断数独是否有效。</p>
<p>判断条件是：每一行、每一列、每一个3×3子块，不能有重复的数字。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidSudoku</span><span class="params">(self, board)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type board: List[List[str]]</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        collen = len(board)</div><div class="line">        rowlen = len(board[<span class="number">0</span>])</div><div class="line">        </div><div class="line">        squarelen = <span class="number">3</span></div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> board:</div><div class="line">            linedict = &#123;&#125;</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> line:</div><div class="line">                <span class="keyword">if</span> (i != <span class="string">'.'</span>):</div><div class="line">                    <span class="keyword">if</span> (linedict.has_key(i)):</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        linedict[i] = <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(rowlen):</div><div class="line">            rowdict = &#123;&#125;</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(collen):</div><div class="line">                <span class="keyword">if</span> (board[j][i] != <span class="string">'.'</span>):</div><div class="line">                    <span class="keyword">if</span> (rowdict.has_key(board[j][i])):</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        rowdict[board[j][i]] = <span class="number">1</span></div><div class="line">                        </div><div class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>]:</div><div class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>]:</div><div class="line">                squaredict = &#123;&#125;</div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(squarelen):</div><div class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> range(squarelen):</div><div class="line">                        cur = board[i+m][j+n]</div><div class="line">                        <span class="keyword">if</span> (cur != <span class="string">'.'</span>):</div><div class="line">                            <span class="keyword">if</span> (squaredict.has_key(cur)):</div><div class="line">                                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">                            <span class="keyword">else</span>:</div><div class="line">                                squaredict[cur] = <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[035 Search Insert Position]]></title>
      <url>http://wf94.github.io/2017/01/04/035-Search-Insert-Position/</url>
      <content type="html"><![CDATA[<p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>
<p>You may assume no duplicates in the array.</p>
<p>Here are few examples.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[1,3,5,6], 5 → 2</div><div class="line">[1,3,5,6], 2 → 1</div><div class="line">[1,3,5,6], 7 → 4</div><div class="line">[1,3,5,6], 0 → 0</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>本题我就利用O(n)的时间复杂度，鉴于题目难度，时间上还是可以接受的。<br>如果需要优化，可以用二分查找法，在利用二分查找法的时候注意边界条件。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span><span class="params">(self, nums, target)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :type target: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        ans = <span class="number">0</span></div><div class="line">        length = len(nums)</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            <span class="keyword">if</span> target &gt; nums[i]:</div><div class="line">                ans = i + <span class="number">1</span></div><div class="line">            <span class="keyword">elif</span> target == nums[i]:</div><div class="line">                ans = i</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[028 Implement strStr]]></title>
      <url>http://wf94.github.io/2017/01/04/028-Implement-strStr/</url>
      <content type="html"><![CDATA[<p>Implement strStr(). </p>
<p>Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack. </p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>找出haystack字符串中，needle字符串第一次出现的索引号。</p>
<p>利用两层循环可以得到想要的结果，因为题目难度所限，对于O(n*m)的时间复杂度也没有报超时错误。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">strStr</span><span class="params">(self, haystack, needle)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type haystack: str</div><div class="line">        :type needle: str</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        length = len(haystack)</div><div class="line">        lenned = len(needle)</div><div class="line">        <span class="keyword">if</span> (length == lenned <span class="keyword">and</span> length == <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">            </div><div class="line">        <span class="keyword">if</span> (length &lt; lenned):</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">            </div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">                flag = <span class="number">1</span></div><div class="line">                pos = i</div><div class="line">                <span class="comment"># 超出范围，needle不在haystack里</span></div><div class="line">                <span class="keyword">if</span> (pos + lenned &gt; length):</div><div class="line">                    flag = <span class="number">0</span></div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="comment"># 判断needle是不是真的在haystack里</span></div><div class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> needle:</div><div class="line">                    <span class="keyword">if</span> (haystack[pos] != j):</div><div class="line">                        flag = <span class="number">0</span></div><div class="line">                        <span class="keyword">break</span></div><div class="line">                    pos += <span class="number">1</span></div><div class="line">                <span class="comment"># 返回对应的字符串索引</span></div><div class="line">                <span class="keyword">if</span> (flag):</div><div class="line">                    <span class="keyword">return</span> i</div><div class="line">                    </div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> String </tag>
            
            <tag> Easy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[024 Swap Nodes in Pairs]]></title>
      <url>http://wf94.github.io/2017/01/04/024-Swap-Nodes-in-Pairs/</url>
      <content type="html"><![CDATA[<p>Given a linked list, swap every two adjacent nodes and return its head. </p>
<p>For example,<br> Given <code>1-&gt;2-&gt;3-&gt;4</code>, you should return the list as <code>2-&gt;1-&gt;4-&gt;3</code>. </p>
<p>Your algorithm should use only constant space. You may <strong>not</strong> modify the values in the list, only nodes itself can be changed. </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这是一个单链表的题目，需要对连续两个节点进行操作。需要注意的是，不能改变链表的数值，只能修改结构。</p>
<p>将连接相邻节点的next指针重置即可得到结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6</div><div class="line"></div><div class="line">  1 X 2 X 3-&gt;4-&gt;5-&gt;6</div><div class="line"></div><div class="line">  1&lt;-2 X 3-&gt;4-&gt;5-&gt;6</div><div class="line"></div><div class="line"> -&gt;2-&gt;1-&gt;4.....</div></pre></td></tr></table></figure>
<p>将2指向1，1指向4，即完成一次转换。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for singly-linked list.</span></div><div class="line"><span class="comment"># class ListNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.next = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span><span class="params">(self, head)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type head: ListNode</div><div class="line">        :rtype: ListNode</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> (head <span class="keyword">and</span> head.next):</div><div class="line">            cur1 = head</div><div class="line">            cur2 = <span class="keyword">None</span></div><div class="line">            cur3 = <span class="keyword">None</span></div><div class="line">            <span class="comment"># 用来指示是否是第一次操作，如果是，</span></div><div class="line">            <span class="comment"># 还需要更改头节点的指向，让头节点指向第二个节点</span></div><div class="line">            firsttime = <span class="number">1</span></div><div class="line">            <span class="keyword">while</span> (cur1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>):</div><div class="line">                cur2 = cur1.next</div><div class="line">                <span class="keyword">if</span> (cur2):</div><div class="line">                    cur3 = cur2.next</div><div class="line">                    <span class="keyword">if</span> (cur2.next <span class="keyword">and</span> cur2.next.next):</div><div class="line">                        cur1.next = cur2.next.next</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        cur1.next = cur2.next</div><div class="line">                    cur2.next = cur1</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    cur3 = <span class="keyword">None</span></div><div class="line">                <span class="keyword">if</span> (firsttime):</div><div class="line">                    head = cur2</div><div class="line">                cur1 = cur3</div><div class="line">                firsttime = <span class="number">0</span></div><div class="line">        <span class="keyword">return</span> head</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Medium </tag>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[020 Valid Parentheses]]></title>
      <url>http://wf94.github.io/2017/01/03/020-Valid-Parentheses/</url>
      <content type="html"><![CDATA[<p>Given a string containing just the characters (), [], {}, determine if the input string is valid.</p>
<p>The brackets must close in the correct order.</p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>在考虑这样的题目的时候，边界条件一定要判断清楚。首先，不是说任意一对括号相配对就可以了，还需要考虑括号的种类；其次，括号的配对不能错位嵌套。</p>
<p>本题利用堆栈可以很容易解决。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        p = []</div><div class="line">        flag = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</div><div class="line">            <span class="keyword">if</span> (i == <span class="string">'('</span> <span class="keyword">or</span> i == <span class="string">'['</span> <span class="keyword">or</span> i == <span class="string">'&#123;'</span>):</div><div class="line">                p.append(i)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">if</span> (len(p)):       </div><div class="line">                    j = p.pop()</div><div class="line">                    <span class="comment"># ord函数可以获得该符号的ASCII码</span></div><div class="line">                    <span class="keyword">if</span> (ord(i) - ord(j) == <span class="number">1</span> <span class="keyword">or</span> ord(i) - ord(j) == <span class="number">2</span>):</div><div class="line">                        flag = <span class="number">1</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        flag = <span class="number">0</span></div><div class="line">                        <span class="keyword">break</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    flag = <span class="number">0</span></div><div class="line">                    <span class="keyword">break</span></div><div class="line">        <span class="keyword">if</span> (flag <span class="keyword">and</span> len(p) == <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> String </tag>
            
            <tag> Easy </tag>
            
            <tag> Stack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[019 Remove Nth Node From End of List]]></title>
      <url>http://wf94.github.io/2017/01/03/019-Remove-Nth-Node-From-End-of-List/</url>
      <content type="html"><![CDATA[<p>Given a linked list, remove the <em>n</em>th node from the end of list and return its head. Given <em>n</em> will always be valid and try to do this in one pass. </p>
<p>For example,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</div><div class="line"></div><div class="line">After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这是一道非常典型的快慢指针题。双指针的操作在链表中比较常用，这样的操作可以省去频繁对链表进行遍历的开销，非常方便。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for singly-linked list.</span></div><div class="line"><span class="comment"># class ListNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.next = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span><span class="params">(self, head, n)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type head: ListNode</div><div class="line">        :type n: int</div><div class="line">        :rtype: ListNode</div><div class="line">        """</div><div class="line">        fast = head</div><div class="line">        headflag = <span class="number">1</span></div><div class="line">        <span class="comment"># 利用快指针来定位倒数第n个元素</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">            fast = fast.next</div><div class="line">        <span class="comment"># 慢指针必须要指到目标元素前一个元素</span></div><div class="line">        <span class="comment"># 才能执行单链表的删除操作</span></div><div class="line">        <span class="keyword">if</span> (fast):</div><div class="line">            fast = fast.next</div><div class="line">            headflag = <span class="number">0</span></div><div class="line">        slow = head</div><div class="line">        <span class="keyword">while</span>(fast):</div><div class="line">            fast = fast.next</div><div class="line">            slow = slow.next</div><div class="line">        <span class="comment"># 经过循环，现在慢指针已经指向目标元素的前一个元素了</span></div><div class="line">        <span class="keyword">if</span> (slow == head):</div><div class="line">            <span class="comment"># 边界条件：如果慢指针还在头部</span></div><div class="line">            <span class="keyword">if</span> (headflag):</div><div class="line">                <span class="comment"># 删除第一个元素</span></div><div class="line">                head = slow.next</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                slow.next = slow.next.next</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            slow.next = slow.next.next</div><div class="line">        <span class="keyword">return</span> head</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Two Pointers </tag>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[014 Longest Common Prefix]]></title>
      <url>http://wf94.github.io/2017/01/02/014-Longest-Common-Prefix/</url>
      <content type="html"><![CDATA[<p>Write a function to find the longest common prefix string amongst an array of strings. </p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>注意，参数strs是一个string类型的数组。思路很直白，从数组中每一个字符串的起始位置开始搜索并依次进行比较。只要有其中一个字符串在该位置的字符与其它的字符串不同，搜索结束，从而得到字符串数组的最长公共前缀。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type strs: List[str]</div><div class="line">        :rtype: str</div><div class="line">        """</div><div class="line">        length = len(strs)</div><div class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> <span class="string">''</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            pos = <span class="number">0</span></div><div class="line">            res = <span class="string">''</span></div><div class="line">            <span class="keyword">while</span>(<span class="keyword">True</span>):</div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">                    <span class="keyword">if</span> (pos &gt;= len(strs[i])):</div><div class="line">                        <span class="keyword">return</span> res</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        <span class="keyword">if</span> (strs[i][pos] != strs[<span class="number">0</span>][pos]):</div><div class="line">                            <span class="keyword">return</span> res</div><div class="line">                res += strs[<span class="number">0</span>][pos]</div><div class="line">                pos += <span class="number">1</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> String </tag>
            
            <tag> Easy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[009 Palindrome Number]]></title>
      <url>http://wf94.github.io/2017/01/02/009-Palindrome-Number/</url>
      <content type="html"><![CDATA[<p>Determine whether an integer is a palindrome. Do this without extra space.</p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题如果想用类似于第八题的方法，把每一位的数字都存在一个数组里，显然空间开销会比较大，从而与题意不符。因此，在循环当中，利用数学方法将各位对应数字计算出来，直接进行比较，会显得比较简洁。</p>
<p>需要注意的是，负数不是回文数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type x: int</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> ( x &gt;= <span class="number">0</span> ):</div><div class="line">            digit = <span class="number">0</span></div><div class="line">            i = x  </div><div class="line">            <span class="keyword">while</span>( i &gt; <span class="number">0</span> ):</div><div class="line">                i = i / <span class="number">10</span></div><div class="line">                digit += <span class="number">1</span></div><div class="line">            high = digit</div><div class="line">            low = <span class="number">1</span></div><div class="line">            m = x</div><div class="line">            n = x</div><div class="line">            <span class="keyword">while</span> (high &gt;= low):</div><div class="line">                <span class="keyword">if</span> (m / (<span class="number">10</span> ** (high<span class="number">-1</span>)) != n % <span class="number">10</span>):</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">                m = m - ( (<span class="number">10</span> ** (high<span class="number">-1</span>)) * (m / (<span class="number">10</span> ** (high<span class="number">-1</span>))))</div><div class="line">                n = n / <span class="number">10</span></div><div class="line">                high -= <span class="number">1</span></div><div class="line">                low += <span class="number">1</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
            <tag> Easy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[008 String to Integer (atoi)]]></title>
      <url>http://wf94.github.io/2017/01/02/008-String-to-Integer-atoi/</url>
      <content type="html"><![CDATA[<p>Implement atoi to convert a string to an integer.</p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>atoi函数的主要功能就是将字符串转换成整数，题目给出了提示，需要我们考虑清楚所有可能的情况。</p>
<p>百密必有一疏，在我写完代码第一次运行的时候，还是漏掉了以下三项：</p>
<ol>
<li>应当去掉尽可能多的空格；</li>
<li>字符串起始可以含有+号，并将此数视为正数；</li>
<li>在数字之后应当可以包含任何字符。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span><span class="params">(self, str)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type str: str</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        </div><div class="line">        symbols = [<span class="string">"+"</span>,<span class="string">"-"</span>]</div><div class="line">        numbers = [<span class="string">"0"</span>,<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>]</div><div class="line">        length = len(str)</div><div class="line">        symbol = <span class="string">"+"</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        </div><div class="line">        res = []</div><div class="line">        cur = <span class="number">0</span></div><div class="line">        <span class="comment"># 去除一开始的空格</span></div><div class="line">        <span class="keyword">while</span> (str[cur] == <span class="string">" "</span>):</div><div class="line">            cur += <span class="number">1</span></div><div class="line">        <span class="comment"># 判断第一个字符是不是所期待的字符</span></div><div class="line">        <span class="keyword">if</span> ( (str[cur] <span class="keyword">not</span> <span class="keyword">in</span> symbols) <span class="keyword">and</span> (str[cur] <span class="keyword">not</span> <span class="keyword">in</span> numbers) ):</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># 是符号的话，就存起来；否则开始转换成数字</span></div><div class="line">            <span class="keyword">if</span> (str[cur] <span class="keyword">in</span> symbols):</div><div class="line">                symbol = str[cur]</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                res.append(str[cur])</div><div class="line">            cur += <span class="number">1</span></div><div class="line">            </div><div class="line">            <span class="comment"># 注意到数字之后还能有别的乱七八糟的符号</span></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(cur, length):</div><div class="line">                <span class="keyword">if</span> (str[i] <span class="keyword">not</span> <span class="keyword">in</span> numbers):</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    res.append(str[i])</div><div class="line">        </div><div class="line">        <span class="comment"># 处理转换数字的操作</span></div><div class="line">        reslen = len(res)</div><div class="line">        <span class="keyword">if</span> (reslen &lt;= <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            answer = <span class="number">0</span></div><div class="line">            count = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> res[::<span class="number">-1</span>]:</div><div class="line">                answer += <span class="number">10</span> ** count * int(i)</div><div class="line">                count += <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> (symbol == <span class="string">"-"</span>):</div><div class="line">                answer = -answer</div><div class="line">            <span class="comment"># 注意数字不能越界，python的整数范围比int的值要大</span></div><div class="line">            <span class="keyword">if</span> (answer &gt; <span class="number">2147483647</span>):</div><div class="line">                answer = <span class="number">2147483647</span></div><div class="line">            <span class="keyword">elif</span> (answer &lt; <span class="number">-2147483648</span>):</div><div class="line">                answer = <span class="number">-2147483648</span></div><div class="line">            <span class="keyword">return</span> answer</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> String </tag>
            
            <tag> Medium </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[007 Reverse Integer]]></title>
      <url>http://wf94.github.io/2017/01/02/007-Reverse-Integer/</url>
      <content type="html"><![CDATA[<p>Reverse digits of an integer.</p>
<p><strong>Example1:</strong>  x =  123,   return  321<br><strong>Example2:</strong>  x = -123,   return -321 </p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这是一次失败的尝试。考虑的情况太多，以至于没有好好地去整合。</p>
<p>必须注意的是，我们需要考虑如果翻转 100 这个数，最后的结果是怎么样的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type x: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> (x != <span class="number">0</span>):</div><div class="line">            <span class="comment"># 首先不应该加一个判断是否为0的分支，没有意义啊。0也是无所谓符号的嘛</span></div><div class="line">            isNegative = <span class="keyword">False</span></div><div class="line">            <span class="keyword">if</span> (x &lt; <span class="number">0</span>):</div><div class="line">                x = -x</div><div class="line">                isNegative = <span class="keyword">True</span></div><div class="line">            <span class="comment"># 获得每一位的数字具体是多少，放到res里面</span></div><div class="line">            res = []</div><div class="line">            <span class="keyword">while</span> (x &gt; <span class="number">0</span>):</div><div class="line">                res.append(x % <span class="number">10</span>)</div><div class="line">                x = x / <span class="number">10</span></div><div class="line">            <span class="keyword">while</span> (res[<span class="number">0</span>] == <span class="number">0</span>):</div><div class="line">                <span class="keyword">del</span> res[<span class="number">0</span>]</div><div class="line"></div><div class="line">            <span class="comment"># 反向遍历res，结果赋值给ans</span></div><div class="line">            length = len(res)</div><div class="line">            <span class="keyword">if</span> (length):</div><div class="line">                ans = <span class="number">0</span></div><div class="line">                <span class="comment">#可以写成 for i, enum in enumerate(res[::-1])</span></div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">                    ans += res[-(i+<span class="number">1</span>)] * ( <span class="number">10</span> ** i )</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (isNegative):</div><div class="line">                ans = -ans</div><div class="line"></div><div class="line">            <span class="comment">#可以利用python自带的MAXINT/MININT参数</span></div><div class="line">            <span class="keyword">if</span> (ans &lt; <span class="number">-2</span> ** <span class="number">31</span> <span class="keyword">or</span> ans &gt; <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span>):</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">return</span> ans</div><div class="line"></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<p>最后，可以参考一下示例代码，不需要这么多判断分支，也能完成这道题。<br><a href="https://discuss.leetcode.com/topic/6005/shortest-code-possible-in-c" target="_blank" rel="external">https://discuss.leetcode.com/topic/6005/shortest-code-possible-in-c</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int reverse(int x) &#123;</div><div class="line">        long long res = 0;</div><div class="line">        while(x) &#123;</div><div class="line">            res = res*10 + x%10;</div><div class="line">            x /= 10;</div><div class="line">        &#125;</div><div class="line">        return (res&lt;INT_MIN || res&gt;INT_MAX) ? 0 : res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
            <tag> Easy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[006 Zigzag Conversion]]></title>
      <url>http://wf94.github.io/2017/01/01/006-Zigzag-Conversion/</url>
      <content type="html"><![CDATA[<p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility) </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">P   A   H   N</div><div class="line">A P L S I I G</div><div class="line">Y   I   R</div></pre></td></tr></table></figure>
<p>And then read line by line: “PAHNAPLSIIGYIR”</p>
<p>Write the code that will take a string and make this conversion given a number of rows:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">convert(&quot;PAYPALISHIRING&quot;, 3) ==&gt;  &quot;PAHNAPLSIIGYIR&quot;</div></pre></td></tr></table></figure></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先考虑最简单的情况，行数为2的时候，行数为3的时候每一个元素的分布情况。可以发现，元素分布是有规律的。就拿例子而言，第一行的元素之间相隔3个字符，第二行的元素之间相隔1个字符，利用求余操作就可以得到对应关系。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(self, s, numRows)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :type numRows: int</div><div class="line">        :rtype: str</div><div class="line">        """</div><div class="line">        strlist = []</div><div class="line">        length = len(s)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(numRows):</div><div class="line">            strlist.append(<span class="string">""</span>)</div><div class="line">            </div><div class="line">        <span class="keyword">if</span> (numRows != <span class="number">1</span>):</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">                remain = i % (<span class="number">2</span> * (numRows<span class="number">-1</span>) )</div><div class="line">                <span class="keyword">if</span> (remain &gt;= numRows):</div><div class="line">                    remain = (<span class="number">2</span> * (numRows<span class="number">-1</span>) ) - remain</div><div class="line">                strlist[remain] += s[i]</div><div class="line">                </div><div class="line">            res = <span class="string">""</span></div><div class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> strlist:</div><div class="line">                res += k</div><div class="line">            <span class="keyword">return</span> res</div><div class="line">        </div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> s</div></pre></td></tr></table></figure>
<p>下图也可以更好地理解此题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Δ=2n-2    1                           2n-1                         4n-3</div><div class="line">Δ=        2                     2n-2  2n                    4n-4   4n-2</div><div class="line">Δ=        3               2n-3        2n+1              4n-5       .</div><div class="line">Δ=        .           .               .               .            .</div><div class="line">Δ=        .       n+2                 .           3n               .</div><div class="line">Δ=        n-1 n+1                     3n-3    3n-1                 5n-5</div><div class="line">Δ=2n-2    n                           3n-2                         5n-4</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> String </tag>
            
            <tag> Medium </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[001 Two Sum]]></title>
      <url>http://wf94.github.io/2017/01/01/001-Two-Sum/</url>
      <content type="html"><![CDATA[<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.<br>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Given nums = [2, 7, 11, 15], target = 9,</div><div class="line">Because nums[0] + nums[1] = 2 + 7 = 9,</div><div class="line">return [0, 1].</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>因为题目给出的数组当中一定会有且只有一个解，而且不能重复用一个元素。所以第一层循环用以遍历数组中的元素，第二层循环用以查询此元素之后，是否还有元素满足要求。</p>
<p>因为这一题的难度是easy，所以利用上面所说，类似于穷举的方法就可以直接得到结果，不需要考虑额外的时间复杂度。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :type target: int</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        length = len(nums)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            remain = target - nums[i]</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, length):</div><div class="line">                <span class="keyword">if</span> (nums[j] == remain):</div><div class="line">                    <span class="keyword">return</span> [i, j]</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Easy </tag>
            
            <tag> Array </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
